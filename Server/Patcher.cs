/***************************************************************************
 *
 *   RunUO                   : May 1, 2002
 *   portions copyright      : (C) The RunUO Software Team
 *   email                   : info@runuo.com
 *   
 *   Angel Island UO Shard   : March 25, 2004
 *   portions copyright      : (C) 2004-2024 Tomasello Software LLC.
 *   email                   : luke@tomasello.com
 *
 ***************************************************************************/

/***************************************************************************
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 ***************************************************************************/

/* Server\Patcher.cs
 * CHANGELOG:
 *  12/3/22, Adam (HasResetChamps)
 *      reset all seasonal champs and correct logic error that was keeping them running.
 *  12/2/22, Adam (HasFixedDoorsV2)
 *      Remove walls at Fire Temple (should be passable)
 *      Fix door facings in secret building East of Trinsic
 *  9/22/22, Adam (HasPatchedCamps)
 *      Patch all 'camps' to have a 25-40 minute respawn time.
 *  9/7/22, Adam (HasPatchedVisibleSpawners)
 *      Add new patch to turn the visible spawners invisible
 *  8/26/22, Adam (AISpecial_OnCommand)
 *      1. While building Mortalis/Siege, we discovered AISpecial spawners tagged as 'Core'
 *      this happens because our original patching can't know if say Copper Elementals belong in the first level of Shame.
 *      We now have a world building command [AISpecial we can use on such spawners to reclassify them as AISpecial.
 *      These updates will be written to "definitive spawner list patch.cfg" and saved (and checked in to) the Data folder.
 *      When the (AI) server starts, it checks this file to apply any needed patches.
 *      2. Add AISpecial_OnCommand <target spawner> to reclassify this spawner as AISpecial.
 *          The resultant change is written to a patch file which will be applied to all shards on the next load.
 *      3. Explicitly set: spawner._CoreSpawn and spawner._NeedsReview when automatically categorizing spawners.
 *  8/25/22, Adam (HasCategorizedSpawners)
 *      A couple new spawner categories added.
 *  8/24/22, Adam (HasCategorizedSpawners)
 *      Make sure the SpecialDisposition check comes before the AllStandardCreatures check
 *      This is to ensure spawners in say Angel Island Prison are tagged as such and not simply tagged as standard 'core' spawns
 *	8/23/22, Adam
 *	    First time checkin
 *	    Moved from Main.cs
 *	    Runs patches on shard launch
 */

using Server.Commands;
using Server.Diagnostics;
using Server.Engines;
using Server.Engines.Alignment;
using Server.Engines.BulkOrders;
using Server.Engines.ChampionSpawn;
using Server.Engines.Craft;
using Server.Engines.CronScheduler;
using Server.Engines.ResourcePool;
using Server.Guilds;
using Server.Gumps;
using Server.Items;
using Server.Items.Triggers;
using Server.Misc;
using Server.Mobiles;
using Server.Multis;
using Server.Multis.Deeds;
using Server.Multis.StaticHousing;
using Server.Regions;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml;
using static Server.Commands.Decorate;
using static Server.Commands.GenTeleporter;
using static Server.Commands.Nuke;
using static Server.CoreAI;
using static Server.Diagnostics.LogHelper;
using static Server.Engines.SpawnerManager;
using static Server.Item;
using static Server.Items.MusicBox;
using static Server.Mobiles.Spawner;
using static Server.Utility;
using static Server.Utility.TeleporterRuleHelpers;

namespace Server
{
    public static class Patcher
    {
        static int m_PatchID = 0;

        // executes after world load but BEFORE EventSink.ServerStarted
        public static void Initialize()
        {
            if (Core.Patching == false)
            {
                Utility.ConsoleWriteLine("Patching disabled with the -nopatch startup switch", ConsoleColor.Red);
                return;
            }

            // executes after world load AFTER EventSink.Initialize
            EventSink.ServerStarted += new ServerStartedEventHandler(EventSink_ServerStarted);

            /*  adam: This is the startup patcher.
             *  You'll usually put onetime patching logic here.
             */

            ConsoleOutEcho = Path.Combine(Core.DataDirectory, "Patches", "ConsoleHistory.log");
            Utility.TimeCheck tc = new Utility.TimeCheck();
            tc.Start();

            try
            {
                int patches = 0;

                patches += AlwaysRunFirst(m_PatchID++);

                #region OLD PATCHER
                // run first
                patches += HasPatchedPatchHistory(m_PatchID++);

                patches += HasRefreshedStaticRegionsV3(m_PatchID++);

                patches += HasRefreshedStaticRegionsV2(m_PatchID++);

                patches += HasRefreshedStaticRegions(m_PatchID++);

                patches += HasPatchedRegionsControllerID(m_PatchID++);

                patches += HasRunGeneralCleanupV1(m_PatchID++);

                patches += HasValidatedTeleporterPatchLists(m_PatchID++);

                patches += HasPatchedFreezeDry(m_PatchID++);

                patches += HasDisabledIOBRegions(m_PatchID++);

                patches += HasWipedKinRansomChests(m_PatchID++);

                // relocated to AlwaysRunLast
                m_PatchID++; // patches += FeluccaMap00Check(m_PatchID++);

                patches += HasPatchedGUIDs(m_PatchID++);

                patches += HasPatchedHouseCodes(m_PatchID++);

                patches += HasCategorizedSpawners(m_PatchID++);

                patches += HasActivatedCamps(m_PatchID++);

                patches += HasPatchedStandardShardSpawners(m_PatchID++);

                patches += HasPatchedCamps(m_PatchID++);

                patches += HasPatchedNPSACoords(m_PatchID++);

                patches += HasRemovedOcCastle(m_PatchID++);

                patches += HasPatchedStaticRegions(m_PatchID++);

                patches += HasPatchedFeluccaDeco(m_PatchID++);

                patches += HasWipedContainerCache(m_PatchID++);

                patches += HasPatchedFeluccaTeleporters(m_PatchID++);

                patches += HasRebuiltContainerCache(m_PatchID++);

                patches += HasPatchedAIFeluccaTeleporters(m_PatchID++);

                patches += HasPatchedOutChamps(m_PatchID++);

                patches += HasPatchedIllegalTrammelItems(m_PatchID++);

                patches += HasPatchedConPvPTeleporters(m_PatchID++);

                patches += HasPatchedVampChampTeleporters(m_PatchID++);

                patches += HasPatchedGreenAcresTeleporters(m_PatchID++);

                patches += HasRestoredPremierGems(m_PatchID++);

                patches += HasDeletedForgeBehindWBB(m_PatchID++);

                patches += HasFixedDoors_1133_2237_40(m_PatchID++);

                patches += HasPatchedInClasicRespawn(m_PatchID++);

                patches += HasPatchedBirds(m_PatchID++);

                patches += HasPatchedMoonglowZooAI(m_PatchID++);

                patches += HasPatchedMoonglowZooStandardShards(m_PatchID++);

                patches += HasUpdatedMoonglowZoo(m_PatchID++);

                patches += HasPatchedVisibleSpawners(m_PatchID++);

                patches += HasPatchedDestinationOverride(m_PatchID++);

                patches += HasPatchedMoongates(m_PatchID++);

                patches += HasPatchedLostLandsAccess(m_PatchID++);

                patches += HasPatchedEventTeleporters(m_PatchID++);

                patches += HasInitializedNewShard(m_PatchID++);

                patches += HasPatchedTilesV1(m_PatchID++);

                patches += HasPatchedAIMoongates(m_PatchID++);

                patches += HasPatchedBlessedToInvulnerable(m_PatchID++);

                patches += HasRemovedBlessed(m_PatchID++);

                patches += HasEnabledSpecialSpawners(m_PatchID++);

                patches += HasPatchedBowyer(m_PatchID++);

                patches += HasPatchedTemplateSpawners(m_PatchID++);

                patches += HasPatchedVendorFees(m_PatchID++);

                patches += HasCategorizedOtherSpawners(m_PatchID++);

                patches += HasPatchedChickenFight(m_PatchID++);

                patches += HasRepatchedMoonglowZoo(m_PatchID++);

                patches += HasDeletedNerunSpawners(m_PatchID++);

                patches += HasPatchedAICamps(m_PatchID++);

                patches += HasPatchedDungeonTeleporters(m_PatchID++);

                patches += HasPatchedDungeonTeleporters2(m_PatchID++);

                patches += HasFixedDoorsV2(m_PatchID++);

                patches += HasResetChamps(m_PatchID++);

                patches += HasPatchedMachineInfo(m_PatchID++);

                patches += HasPatchedPatrolGuardSpawners(m_PatchID++);

                // relocated to AlwaysRunLast
                m_PatchID++; //patches += HasDeletedHomelessBaseVendors(m_PatchID++);
                #endregion OLD PATCHER

                #region NEW PATCHER
                patches += PatcherTableTest(m_PatchID++);

                patches += UpdatedRegionControllersV1(m_PatchID++);

                patches += BetaReadyV1(m_PatchID++);

                patches += BetaReadyV2(m_PatchID++);

                patches += BetaReadyV3(m_PatchID++);

                patches += BetaReadyV4(m_PatchID++);

                patches += BetaReadyV5(m_PatchID++);

                patches += BetaReadyV6(m_PatchID++);

                patches += BetaReadyV7(m_PatchID++);

                patches += BetaReadyV8(m_PatchID++);

                patches += BetaReadyV9(m_PatchID++);

                patches += BetaReadyV10(m_PatchID++);

                patches += BetaReadyV11(m_PatchID++);

                patches += BetaReadyV12(m_PatchID++);

                patches += BetaReadyV13(m_PatchID++);

                patches += BetaReadyV14(m_PatchID++);

                patches += BetaReadyV15(m_PatchID++);

                patches += BetaReadyV16(m_PatchID++);

                patches += BetaReadyV17(m_PatchID++);

                patches += BetaReadyV18(m_PatchID++);

                patches += BetaReadyV19(m_PatchID++);

                patches += BetaReadyV20(m_PatchID++);

                patches += BetaReadyV21(m_PatchID++);

                patches += PatchV22(m_PatchID++);

                patches += PatchV23(m_PatchID++);

                patches += PatchV24(m_PatchID++);

                patches += PatchV25(m_PatchID++);

                patches += PatchV26(m_PatchID++);

                patches += PatchV27(m_PatchID++);

                patches += PatchV28(m_PatchID++);

                patches += PatchV29(m_PatchID++);

                patches += PatchV30(m_PatchID++);

                patches += PatchV31(m_PatchID++);

                patches += PatchV32(m_PatchID++);

                patches += PatchV33(m_PatchID++);

                patches += PatchV34(m_PatchID++);

                patches += PatchV35(m_PatchID++);

                patches += PatchV36(m_PatchID++);

                patches += PatchV37(m_PatchID++);

                patches += PatchV38(m_PatchID++);

                patches += PatchV39(m_PatchID++);

                patches += PatchV40(m_PatchID++);

                patches += PatchV41(m_PatchID++);

                patches += PatchV42(m_PatchID++);

                patches += PatchV43(m_PatchID++);

                patches += PatchV44(m_PatchID++);

                patches += PatchV45(m_PatchID++);

                patches += PatchV46(m_PatchID++);

                patches += PatchV47(m_PatchID++);

                patches += PatchV48(m_PatchID++);

                patches += PatchV49(m_PatchID++);

                patches += PatchV50(m_PatchID++);

                patches += PatchV51(m_PatchID++);

                patches += PatchV52(m_PatchID++);

                patches += PatchV53(m_PatchID++);

                patches += PatchV54(m_PatchID++);

                patches += PatchV55(m_PatchID++);

                patches += PatchV56(m_PatchID++);

                patches += PatchV57(m_PatchID++);

                patches += PatchV58(m_PatchID++);

                patches += PatchV59(m_PatchID++);

                patches += PatchV60(m_PatchID++);

                patches += PatchV61(m_PatchID++);

                patches += PatchV62(m_PatchID++);

                patches += PatchV63(m_PatchID++);

                patches += PatchV64(m_PatchID++);

                patches += PatchV65(m_PatchID++);

                patches += PatchV66(m_PatchID++);

                patches += PatchV67(m_PatchID++);

                patches += PatchV68(m_PatchID++);

                patches += PatchV69(m_PatchID++);

                patches += PatchV70(m_PatchID++);

                patches += PatchV71(m_PatchID++);

                patches += PatchV72(m_PatchID++);

                patches += PatchV73(m_PatchID++);

                patches += PatchV74(m_PatchID++);

                patches += PatchV75(m_PatchID++);

                patches += PatchV76(m_PatchID++);

                patches += PatchV77(m_PatchID++);

                patches += PatchV78(m_PatchID++);

                patches += PatchV79(m_PatchID++);

                patches += PatchV80(m_PatchID++);

                patches += PatchV81(m_PatchID++);

                patches += PatchV82(m_PatchID++);

                patches += PatchV83(m_PatchID++);

                patches += PatchV84(m_PatchID++);

                patches += PatchV85(m_PatchID++);

                patches += PatchV86(m_PatchID++);

                patches += PatchV87(m_PatchID++);

                patches += PatchV88(m_PatchID++);

                patches += PatchV89(m_PatchID++);

                patches += PatchV90(m_PatchID++);

                patches += PatchV91(m_PatchID++);

                patches += PatchV92(m_PatchID++);

                patches += PatchV93(m_PatchID++);

                patches += PatchV94(m_PatchID++);

                patches += PatchV95(m_PatchID++);

                patches += PatchV96(m_PatchID++);

                patches += PatchV97(m_PatchID++);

                patches += PatchV98(m_PatchID++);

                patches += PatchV99(m_PatchID++);

                patches += PatchV100(m_PatchID++);

                patches += PatchV101(m_PatchID++);

                patches += PatchV102(m_PatchID++);

                patches += PatchV103(m_PatchID++);

                patches += PatchV104(m_PatchID++);

                patches += PatchV105(m_PatchID++);

                patches += PatchV106(m_PatchID++);

                patches += PatchV107(m_PatchID++);

                //patches += PatchV108(m_PatchID++); // Retirement - boot all staff

                #endregion NEW PATCHER

                // apply last
                patches += AlwaysRunLast(m_PatchID++);

                if (patches == 0)
                    EchoOut(String.Format("No Initialize patching required."), ConsoleColor.Magenta);
            }
            #region Finally
            catch (Exception ex)
            {
                LogHelper.LogException(ex);
            }
            finally
            {
                ConsoleOutEcho = null;
            }

            tc.End();
            System.Console.WriteLine("Patcher1 completed in {0}", tc.TimeTaken);
            #endregion Finally
        }
        #region Patchv108 (Retirement)
        private static int PatchV108(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV108;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Remove all Staff Accounts
                if (AllShards())
                {
                    Nuke.RemoveAllStaff(new CommandEventArgs(World.GetSystemAcct(),
                        command: "RemoveAllStaff",
                        argString: string.Empty,
                        arguments: new string[] { string.Empty }));
                }
                #endregion Remove all Staff Accounts

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv108 (Retirement)
        #region Patchv107
        private static int PatchV107(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV107;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch fire pits
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item != null && (item.ItemID == 0x0FAC || item.ItemID == 0x0DE3))
                        {
                            item.Light = LightType.Circle225;
                            patched++;
                        }
                }
                #endregion Patch fire pits

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv107
        #region Patchv106
        private static int PatchV106(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV106;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Initialize pirate naming by resetting the champ engines
                if (Siege())
                {
                    foreach (ChampEngine item in ChampEngine.Instances)
                        if (item is ChampEngine ce )
                        {
                            ce.SpawnType = ce.SpawnType;
                            patched++;
                        }
                }
                #endregion Initialize pirate naming by resetting the champ engines

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv106
        #region Patchv105
        private static int PatchV105(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV105;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Replace Island  Serpents with Gila Monsters
                if (Siege())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner)
                            if (spawner.Spawns("IslandSerpentModerate"))
                            {
                                spawner.ObjectNamesRaw = new ArrayList() { "GilaMonsterModerate" };
                                spawner.SetProp = null;
                                spawner.SterlingMin = 15;
                                spawner.SterlingMax = 45;
                                spawner.ScheduleRespawn = true;
                                patched++;
                            }
                            else if (spawner.Spawns("IslandSerpentStrong"))
                            {
                                spawner.ObjectNamesRaw = new ArrayList() { "GilaMonsterStrong" };
                                spawner.SetProp = null;
                                spawner.SterlingMin = 25;
                                spawner.SterlingMax = 75;
                                spawner.ScheduleRespawn = true;
                                patched++;
                            }
                }
                #endregion Replace Island  Serpents with Gila Monsters

                #region Remove sterling from animal spawners
                if (Siege())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && Region.Find(spawner.Location, spawner.Map) is Region region && region.Name == "Angel Island")
                        {
                            foreach (object o in spawner.Objects)
                            {
                                if (o is BaseCreature bc && bc.Body.IsAnimal)
                                {
                                    spawner.SterlingMin = 0;
                                    spawner.SterlingMax = 0;
                                    spawner.ScheduleRespawn = true;
                                    patched++;
                                    break;
                                }
                            }
                        }
                    ;
                }
                #endregion Remove sterling from animal spawners

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv105
        #region Patchv104
        private static int PatchV104(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV104;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Reset GOT ChampPvMRankings
                if (Siege())
                {
                    Engines.DataRecorder.DataRecorder.ChampPvMRankings.Clear();
                    patched++;
                }
                #endregion Reset GOT ChampPvMRankings

                #region Enable Township benefits from Prison mini champs - Add Sterling rewards
                if (Siege())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is ChampEngine ce)
                        {
                            if (ce.SpawnType == ChampLevelData.SpawnTypes.AI_Escape)
                            {
                                ce.BossSterlingMin = 1000;
                                ce.BossSterlingMax = 2500;

                                ce.SterlingMin = 40;
                                ce.SterlingMax = 85;
                                ce.KillDatabase = true;
                                ce.ClearMonsters = true;
                                patched++;
                            }
                            else if (ce.SpawnType == ChampLevelData.SpawnTypes.AI_Guard)
                            {
                                ce.BossSterlingMin = 95;
                                ce.BossSterlingMax = 125;

                                ce.SterlingMin = 25;
                                ce.SterlingMax = 75;
                                ce.KillDatabase = true;
                                ce.ClearMonsters = true;
                                patched++;
                            }
                        }
                        else if (item is Spawner spawner && Region.Find(spawner.Location, spawner.Map) is Region region && region.Name == "Angel Island")
                        {
                            spawner.SterlingMin = 10;
                            spawner.SterlingMax = 18;
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                    ;
                }
                #endregion Enable Township benefits from Prison mini champs - Add Sterling rewards

                #region Switch Pirate_Mini for Pirate_Micro
                if (Siege())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is ChampEngine ce && ce.SpawnType == ChampLevelData.SpawnTypes.Pirate_Mini)
                        {
                            ce.SpawnType = ChampLevelData.SpawnTypes.Pirate_Micro;
                            patched++;
                        }
                }
                #endregion Switch Pirate_Mini for Pirate_Micro

                #region Spawner Beautifier
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.ObjectNamesRaw != null)
                        {
                            ArrayList objectNames = new(spawner.ObjectNamesRaw);
                            ArrayList objectNamesFixed = new ArrayList();

                            for (int i = 0; i < objectNames.Count; i++)
                            {
                                string str = objectNames[i] as string;

                                if (true)
                                {
                                    if (str.Length > 0)
                                    {
                                        str = str.Trim();
                                        //adam 8/29/22, we now allow ':' delimited lists of creatures
                                        string[] tokens = str.Split(':', StringSplitOptions.RemoveEmptyEntries);
                                        List<string> valid = new List<string>();
                                        for (int ix = 0; ix < tokens.Length; ix++)
                                        {
                                            string token = tokens[ix];

                                            Type type = SpawnerType.GetType(token);

                                            if (type == null)
                                            {
                                                //from.SendMessage("{0} is not a valid type name.", token);
                                                tokens[ix] = string.Empty;
                                            }
                                            else
                                            {
                                                valid.Add(type.Name);   // 7/3/2024, Adam: beautifier
                                                patched++;
                                            }
                                        }
                                        // rebuild the entry
                                        str = string.Empty;
                                        foreach (string obj in valid)
                                            str += obj + ':';
                                        str = str.TrimEnd(':');
                                        // add it
                                        objectNamesFixed.Add(str);
                                    }
                                }
                            }
                            spawner.ObjectNamesRaw = new ArrayList(objectNamesFixed);
                        }
                }
                #endregion Spawner Beautifier

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv104
        #region Patchv103
        private static int PatchV103(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV103;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Unregister all Custom Region Controls that reside on the internal map
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is CustomRegionControl crc)
                            if (crc.Map == Map.Internal && crc.Registered == true)
                            {
                                crc.Registered = false;
                                patched++;
                            }
                }
                #endregion Unregister all Custom Region Controls that reside on the internal map

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv103
        #region Patchv102
        private static int PatchV102(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV102;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Force an update of township subsidies
                if (AllShards())
                {
                    foreach (var tss in TownshipStone.AllTownshipStones)
                        tss.RecordFameAndTaxBankInfo();
                }
                #endregion Force an update of township subsidies

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv102
        #region Patchv101
        private static int PatchV101(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV101;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Allow non ROT gains for any skills already GM'ed
                if (SiegeStyleShards())
                {
                    // Skill on Siege will be Return Over Time (ROT)
                    //  ROT has it's own 'wait' system
                    SkillGainSystem.GainWaits = false;
                    patched++;

                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is PlayerMobile pm)
                        {
                            Server.Skills skills = pm.Skills;
                            for (int i = 0; i < skills.Length; ++i)
                                if (skills[i].Base >= 100.0)
                                {
                                    pm.GMHistoryTable |= SkillNameFlagsHelper.GetFlag(skills[i].SkillName);
                                    patched++;
                                }
                        }
                }
                #endregion Allow non ROT gains for any skills already GM'ed

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv101
        #region Patchv100
        private static int PatchV100(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV100;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Reset GOT ChampPvMRankings
                if (Siege())
                {
                    Engines.DataRecorder.DataRecorder.ChampPvMRankings.Clear();
                    patched++;
                }
                #endregion Reset GOT ChampPvMRankings

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv100
        #region Patchv99
        private static int PatchV99(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV99;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Fixup Motion Controllers
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is MotionController mc)
                            if (mc.Target is Spawner spawner)
                                if (mc.TreatSpawnerAsItem)
                                    mc.TargetItem = spawner;
                                else
                                    mc.TargetSpawner = spawner;

                }
                #endregion Fixup Motion Controllers

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv99
        #region Patchv98
        private static int PatchV98(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV98;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Establish all player reward hues
                if (AllShards())
                {
                    List<PlayerMobile> list = new();
                    foreach (var m in World.Mobiles.Values)
                        if (m is PlayerMobile pm && pm.AccessLevel == AccessLevel.Player && (pm.Account as Accounting.Account).AccessLevel == AccessLevel.Player)
                            list.Add(pm);

                    // let the most recent players get the most unique hues
                    list.Sort((e1, e2) =>
                    {
                        return (e2.Account as Accounting.Account).LastLogin.CompareTo((e1.Account as Accounting.Account).LastLogin);
                    });

                    foreach (var pm in list)
                        pm.RewardHue = Utility.RewardHue(pm);
                }
                #endregion Establish all player reward hues

                #region 1 year Siege anniversary  - hued shroud
                if (Siege())
                {
                    LogHelper logger = new LogHelper("1 year Siege anniversary.log", overwrite: false, sline: true);
                    foreach (var m in World.Mobiles.Values)
                        if (m is PlayerMobile pm && pm.AccessLevel == AccessLevel.Player)
                            if (pm.BankBox != null)
                                try
                                {
                                    SPOneYearAnniversary shroud = new SPOneYearAnniversary(pm.RewardHue);
                                    if (!pm.BankBox.TryDropItem(World.GetAdminAcct(), shroud, sendFullMessage: false))
                                        pm.BankBox.AddItem(shroud);

                                    logger.Log(string.Format("{0} received {1}", pm, shroud));
                                }
                                catch { }

                    logger.Finish();
                }
                #endregion 1 year Siege anniversary  - hued shroud

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv98
        #region Patchv97
        private static int PatchV97(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV97;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Set 'a wounded soldier' to not give rewards
                if (SiegeStyleShards())
                {
                    foreach (var m in World.Mobiles.Values)
                        if (m is BaseEscortable be && be.Name == "a wounded soldier")
                            be.GiveReward = false;
                }
                #endregion Set 'a wounded soldier' to not give rewards

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv97
        #region Patchv96
        private static int PatchV96(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV96;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                int missing = 0;
                #region Re-add missing mobiles from ModeNeruns and ModeMulti spawners
                if (TestCenterShards())
                {
                    (Serial serial, string[] NameList, string counts)[] tupleList = {
                            (0x401745CB, new string[]{ "wyvern","wyvern","wyvern", }, "1"),
                            (0x4005D9F5, new string[]{ "Shadowwyrm", }, "1, 1, 1, 1"),
                            (0x40107283, new string[]{ "Drake","Drake","Drake", }, "1"),
                            (0x40006DD7, new string[]{ "lich","lichlord", }, "2, 2"),
                            (0x4000A7CA, new string[]{ "EvilWanderingHealer","WanderingHealer", }, "1, 1"),
                            (0x4000DCD4, new string[]{ "Bogthing","Bogling", }, "2, 5"),
                            (0x4009AE64, new string[]{ "drake", }, "2"),
                            (0x400A08EF, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F0, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F1, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F2, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F3, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F4, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F5, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F6, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F7, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F8, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08F9, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08FA, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08FB, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08FC, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08FD, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A08FE, new string[]{ "alligator", }, "8"),
                            (0x400A08FF, new string[]{ "alligator", }, "2"),
                            (0x400A0900, new string[]{ "alligator", }, "2"),
                            (0x400A0901, new string[]{ "alligator", }, "2"),
                            (0x400A0902, new string[]{ "alligator", }, "8"),
                            (0x400A0903, new string[]{ "alligator", }, "2"),
                            (0x400A0904, new string[]{ "Harpy", }, "6"),
                            (0x400A0905, new string[]{ "Headlessone", }, "4"),
                            (0x400A0906, new string[]{ "Stoneharpy", }, "2"),
                            (0x400A0907, new string[]{ "Gazer","Gazerlarva", }, "4, 2, 0, 0, 0, 0"),
                            (0x400A0908, new string[]{ "Gazer","Gazerlarva", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0909, new string[]{ "Corpser", }, "3"),
                            (0x400A090A, new string[]{ "Corpser", }, "3"),
                            (0x400A090B, new string[]{ "Headlessone", }, "2"),
                            (0x400A090C, new string[]{ "Headlessone", }, "2"),
                            (0x400A090D, new string[]{ "Headlessone", }, "2"),
                            (0x400A090E, new string[]{ "Harpy","Stoneharpy", }, "8, 1, 0, 0, 0, 0"),
                            (0x400A090F, new string[]{ "Giantspider","Dreadspider", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A0910, new string[]{ "Slime", }, "5"),
                            (0x400A0911, new string[]{ "Waterelemental", }, "2"),
                            (0x400A0912, new string[]{ "Giantspider","Dreadspider", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0913, new string[]{ "Giantspider","Dreadspider", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0914, new string[]{ "Gazer","Gazerlarva","Eldergazer", }, "4, 2, 1, 0, 0, 0"),
                            (0x400A0915, new string[]{ "Corpser", }, "3"),
                            (0x400A0916, new string[]{ "Corpser", }, "3"),
                            (0x400A0917, new string[]{ "Gazer","Gazerlarva", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0918, new string[]{ "Corpser", }, "2"),
                            (0x400A0919, new string[]{ "Gazer", }, "2"),
                            (0x400A091A, new string[]{ "Skeleton", }, "4"),
                            (0x400A091B, new string[]{ "Skeleton", }, "4"),
                            (0x400A091C, new string[]{ "Skeleton", }, "4"),
                            (0x400A091D, new string[]{ "Skeleton", }, "4"),
                            (0x400A091E, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400A091F, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400A0920, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400A0921, new string[]{ "Boneknight","Skeleton","Zombie","Shade", }, "3, 1, 1, 1, 0, 0"),
                            (0x400A0922, new string[]{ "Boneknight","Skeleton","Zombie","Shade", }, "3, 1, 1, 1, 0, 0"),
                            (0x400A0923, new string[]{ "Lich","Spectre","Skeleton", }, "7, 3, 1, 0, 0, 0"),
                            (0x400A0924, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400A0925, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 3, 1, 1"),
                            (0x400A0926, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0927, new string[]{ "Mummy","Skeleton","Zombie", }, "1, 3, 1, 0, 0, 0"),
                            (0x400A0928, new string[]{ "Waterelemental", }, "2"),
                            (0x400A0929, new string[]{ "Skeleton", }, "2"),
                            (0x400A092A, new string[]{ "Mummy","Skeleton","Zombie", }, "1, 3, 1, 0, 0, 0"),
                            (0x400A092B, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A092C, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A092D, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A092E, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A092F, new string[]{ "Skeleton","Spectre", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A0930, new string[]{ "Ghoul","Shade","Skeleton","Zombie", }, "3, 1, 1, 1, 0, 0"),
                            (0x400A0931, new string[]{ "Ghoul","Shade","Skeleton","Zombie", }, "3, 1, 1, 1, 0, 0"),
                            (0x400A0932, new string[]{ "Ghoul","Skeleton","Wraith","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0933, new string[]{ "Ghoul","Skeleton","Wraith","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0934, new string[]{ "Ghoul","Skeleton","Wraith","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0935, new string[]{ "Ghoul","Wraith", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A0936, new string[]{ "Ghoul","Mummy","Shade","Wraith","Zombie", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0937, new string[]{ "Boneknight","Skeletalknight", }, "4, 4, 0, 0, 0, 0"),
                            (0x400A0938, new string[]{ "Ghoul","Shade","Skeleton","Wraith", }, "1, 1, 2, 1, 0, 0"),
                            (0x400A0939, new string[]{ "Bonemagi", }, "3"),
                            (0x400A093A, new string[]{ "Ghoul","Shade","Skeleton","Wraith","Zombie", }, "1, 1, 2, 1, 1, 0"),
                            (0x400A093B, new string[]{ "Ghoul","Shade","Spectre","Wraith", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A093C, new string[]{ "Lich", }, "2"),
                            (0x400A093D, new string[]{ "Ghoul","Shade","Spectre","Wraith", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A093E, new string[]{ "Ghoul","Lich","Spectre","Wraith", }, "1, 3, 1, 1, 0, 0"),
                            (0x400A093F, new string[]{ "Ghoul","Poisonelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0940, new string[]{ "Ghoul","Poisonelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0941, new string[]{ "Ghoul","Shade","Spectre","Wraith", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0942, new string[]{ "Lich", }, "4"),
                            (0x400A0943, new string[]{ "Ghoul","Lich", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A0944, new string[]{ "Fireelemental", }, "2"),
                            (0x400A0945, new string[]{ "Lich", }, "2"),
                            (0x400A0946, new string[]{ "Lizardman", }, "5"),
                            (0x400A0947, new string[]{ "Lizardman", }, "5"),
                            (0x400A0948, new string[]{ "Lizardman", }, "5"),
                            (0x400A0949, new string[]{ "Lizardman", }, "5"),
                            (0x400A094A, new string[]{ "Lizardman", }, "5"),
                            (0x400A094B, new string[]{ "Lizardman", }, "5"),
                            (0x400A094C, new string[]{ "Lizardman", }, "5"),
                            (0x400A094D, new string[]{ "Ettin", }, "4"),
                            (0x400A094E, new string[]{ "Ettin", }, "4"),
                            (0x400A094F, new string[]{ "Earthelemental","Ettin", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0950, new string[]{ "Earthelemental","Ettin", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0951, new string[]{ "Earthelemental","Ettin", }, "4, 6, 0, 0, 0, 0"),
                            (0x400A0952, new string[]{ "Ettin", }, "4"),
                            (0x400A0953, new string[]{ "Ettin", }, "4"),
                            (0x400A0954, new string[]{ "Earthelemental", }, "6"),
                            (0x400A0955, new string[]{ "Troll", }, "3"),
                            (0x400A0956, new string[]{ "Troll", }, "3"),
                            (0x400A0957, new string[]{ "Troll", }, "3"),
                            (0x400A0958, new string[]{ "Troll", }, "3"),
                            (0x400A0959, new string[]{ "Ogre", }, "3"),
                            (0x400A095A, new string[]{ "Ogre", }, "3"),
                            (0x400A095B, new string[]{ "Ogrelord", }, "5"),
                            (0x400A095C, new string[]{ "Ogre", }, "3"),
                            (0x400A095D, new string[]{ "Ogre", }, "3"),
                            (0x400A095E, new string[]{ "Ettin", }, "4"),
                            (0x400A095F, new string[]{ "Ettin", }, "4"),
                            (0x400A0960, new string[]{ "Cyclops", }, "3"),
                            (0x400A0961, new string[]{ "Ettin", }, "4"),
                            (0x400A0962, new string[]{ "Ettin", }, "4"),
                            (0x400A0963, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A0964, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0965, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A0966, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A0967, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A0968, new string[]{ "Giantserpent", }, "6"),
                            (0x400A0969, new string[]{ "Wyvern","Dragon","Drake", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A096A, new string[]{ "Waterelemental", }, "4"),
                            (0x400A096B, new string[]{ "Giantserpent", }, "6"),
                            (0x400A096C, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A096D, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A096E, new string[]{ "Drake","Wyvern", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A096F, new string[]{ "Waterelemental", }, "4"),
                            (0x400A0970, new string[]{ "Waterelemental", }, "4"),
                            (0x400A0971, new string[]{ "Drake","Shadowwyrm","Wyvern", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0972, new string[]{ "Daemon","Evilmage", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A0973, new string[]{ "Drake","Shadowwyrm","Wyvern", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0974, new string[]{ "Fireelemental", }, "1"),
                            (0x400A0975, new string[]{ "Wyvern:Wyvern:Giantserpent", }, "3"),
                            (0x400A0976, new string[]{ "Ancientwyrm", }, "1"),
                            (0x400A0977, new string[]{ "Slime","Giantrat","Giantserpent", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A0978, new string[]{ "Slime", }, "1"),
                            (0x400A0979, new string[]{ "Evilmagelord", }, "2"),
                            (0x400A097A, new string[]{ "Giantrat","Lavasnake","Evilmage", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A097B, new string[]{ "Lavalizard", }, "1"),
                            (0x400A097C, new string[]{ "Fireelemental", }, "3"),
                            (0x400A097D, new string[]{ "Fireelemental","Lavasnake","Hellcat","Hellhound", }, "3, 1, 1, 1, 0, 0"),
                            (0x400A097E, new string[]{ "Efreet","Lavaserpent","Hellhound","Fireelemental", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A097F, new string[]{ "Lich","Bonemagi:Skeletalmage","Hellcat","Hellhound","Fireelemental","Lavalizard", }, "4, 6, 1, 3, 2, 1"),
                            (0x400A0980, new string[]{ "Lavasnake", }, "1"),
                            (0x400A0981, new string[]{ "Lavalizard", }, "1"),
                            (0x400A0982, new string[]{ "Hellcat", }, "1"),
                            (0x400A0983, new string[]{ "Fireelemental", }, "1"),
                            (0x400A0984, new string[]{ "Lavasnake", }, "1"),
                            (0x400A0985, new string[]{ "Lavasnake", }, "1"),
                            (0x400A0986, new string[]{ "Fireelemental", }, "1"),
                            (0x400A0987, new string[]{ "Fireelemental","Efreet","Lavaserpent", }, "4, 1, 1, 0, 0, 0"),
                            (0x400A0988, new string[]{ "Hellcat","Fireelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0989, new string[]{ "Fireelemental", }, "1"),
                            (0x400A098A, new string[]{ "Fireelemental", }, "2"),
                            (0x400A098B, new string[]{ "Hellhound", }, "1"),
                            (0x400A098C, new string[]{ "Efreet","Lavalizard", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A098D, new string[]{ "Fireelemental","Lavaserpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A098E, new string[]{ "Lavalizard","Fireelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A098F, new string[]{ "Lich","Lichlord", }, "3, 1, 0, 0, 0, 0"),
                            (0x400A0990, new string[]{ "Hellhound", }, "6"),
                            (0x400A0991, new string[]{ "Daemon", }, "2"),
                            (0x400A0992, new string[]{ "Hellhound","Hellcat", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0993, new string[]{ "Evilmage","Hellhound","Lavasnake","Hellcat", }, "1, 5, 1, 1, 0, 0"),
                            (0x400A0994, new string[]{ "Evilmage", }, "1"),
                            (0x400A0995, new string[]{ "Evilmagelord", }, "1"),
                            (0x400A0996, new string[]{ "Evilmagelord", }, "1"),
                            (0x400A0997, new string[]{ "Evilmage", }, "1"),
                            (0x400A0998, new string[]{ "Evilmage", }, "1"),
                            (0x400A0999, new string[]{ "Hellhound", }, "1"),
                            (0x400A099A, new string[]{ "Evilmage","Evilmagelord", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A099B, new string[]{ "Evilmage", }, "1"),
                            (0x400A099C, new string[]{ "Evilmage", }, "1"),
                            (0x400A099D, new string[]{ "Evilmage", }, "1"),
                            (0x400A099E, new string[]{ "Evilmage", }, "1"),
                            (0x400A099F, new string[]{ "Evilmage", }, "1"),
                            (0x400A09A0, new string[]{ "Evilmagelord", }, "1"),
                            (0x400A09A1, new string[]{ "Spectre:Wraith","Skeleton","Zombie", }, "2, 3, 4, 0, 0, 0"),
                            (0x400A09A2, new string[]{ "Spectre:Wraith:Shade","Skeleton","Zombie", }, "2, 3, 4, 0, 0, 0"),
                            (0x400A09A3, new string[]{ "Spectre:Shade:Wraith","Lich","Skeleton","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A09A4, new string[]{ "Spectre:Shade:Wraith","Skeleton","Zombie", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A09A5, new string[]{ "Lich", }, "1"),
                            (0x400A09A6, new string[]{ "Spectre:Wraith","Skeleton","Zombie", }, "2, 3, 4, 0, 0, 0"),
                            (0x400A09A7, new string[]{ "Skeleton", }, "10"),
                            (0x400A09A8, new string[]{ "zombie:skeleton", }, "4"),
                            (0x400A09A9, new string[]{ "Imp","Hellhound", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A09AA, new string[]{ "Imp","Hellhound", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A09AB, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A09AC, new string[]{ "Imp","Hellhound", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A09AD, new string[]{ "Firegargoyle", }, "2"),
                            (0x400A09AE, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A09AF, new string[]{ "Gargoyle","Hellhound", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A09B0, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A09B1, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09B2, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A09B3, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A09B4, new string[]{ "Daemon", }, "2"),
                            (0x400A09B5, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A09B6, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09B7, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09B8, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A09B9, new string[]{ "Gargoyle", }, "4"),
                            (0x400A09BA, new string[]{ "Gazer","Gazerlarva", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A09BB, new string[]{ "Imp","Hellhound","Gargoyle", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A09BC, new string[]{ "Eldergazer","Gazer","Gazerlarva", }, "1, 3, 2, 0, 0, 0"),
                            (0x400A09BD, new string[]{ "Balron","Gargoyle","Gazer", }, "1, 2, 2, 0, 0, 0"),
                            (0x400A09BE, new string[]{ "Daemon","Gargoyle","Gazer", }, "2, 2, 2, 0, 0, 0"),
                            (0x400A09BF, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09C0, new string[]{ "Daemon","Stonegargoyle", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A09C1, new string[]{ "Daemon","Gazer","Gazerlarva", }, "2, 3, 2, 0, 0, 0"),
                            (0x400A09C2, new string[]{ "Daemon","Hellhound","Imp", }, "2, 1, 1, 0, 0, 0"),
                            (0x400A09C3, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09C4, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09C5, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09C6, new string[]{ "Firegargoyle", }, "2"),
                            (0x400A09C7, new string[]{ "Gargoyle", }, "2"),
                            (0x400A09C9, new string[]{ "Balron", }, "1"),
                            (0x400A09CB, new string[]{ "Gazer","Imp","Stonegargoyle", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A09CC, new string[]{ "Arcticogrelord", }, "1"),
                            (0x400A09CD, new string[]{ "Iceserpent","Snowelemental","Ratman","Frosttroll","Frostspider", }, "2, 1, 1, 1, 1, 0"),
                            (0x400A09CE, new string[]{ "Frostspider","Frostooze","Icesnake", }, "1, 2, 1, 0, 0, 0"),
                            (0x400A09CF, new string[]{ "Ratmanmage", }, "1"),
                            (0x400A09D0, new string[]{ "Arcticogrelord", }, "1"),
                            (0x400A09D1, new string[]{ "Whitewyrm", }, "1"),
                            (0x400A09D2, new string[]{ "Frostooze","Frostspider","Iceelemental:Snowelemental","Icesnake","Frosttroll", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A09D4, new string[]{ "Frostooze","Frostspider","Iceelemental:Snowelemental","Icesnake","Frosttroll", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A09D5, new string[]{ "Iceserpent","Ratman","Snowelemental:Iceelemental","Frosttroll", }, "3, 1, 4, 2, 0, 0"),
                            (0x400A09D6, new string[]{ "Iceserpent","Snowelemental:Iceelemental","Frosttroll","Ratman", }, "3, 4, 1, 1, 0, 0"),
                            (0x400A09D7, new string[]{ "Iceserpent","Snowelemental:Iceelemental", }, "9, 9, 0, 0, 0, 0"),
                            (0x400A09D8, new string[]{ "Ratman","Ratmanarcher","Ratmanmage", }, "12, 7, 5, 0, 0, 0"),
                            (0x400A09D9, new string[]{ "Icefiend", }, "1"),
                            (0x400A09DA, new string[]{ "Icefiend", }, "1"),
                            (0x400A09DB, new string[]{ "Swampdragon", }, "7"),
                            (0x400A09DC, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Stoneharpy", }, "15, 15, 6, 9, 6, 3"),
                            (0x400A09DD, new string[]{ "Stonegargoyle","Wyvern","Mummy","Ettin", }, "3, 6, 4, 6, 0, 0"),
                            (0x400A09DE, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Stoneharpy", }, "10, 10, 4, 6, 4, 3"),
                            (0x400A09DF, new string[]{ "Stonegargoyle","Wyvern","Mummy","Ettin", }, "3, 4, 2, 4, 0, 0"),
                            (0x400A09E0, new string[]{ "Gazer","Reaper","Scorpion","Giantserpent","Troll", }, "3, 2, 3, 2, 2, 0"),
                            (0x400A09E1, new string[]{ "Corpser","Giantspider","Troll","Harpy","Ettin","Gazer", }, "3, 3, 3, 6, 3, 3"),
                            (0x400A09E2, new string[]{ "Cyclops","Titan", }, "5, 3, 0, 0, 0, 0"),
                            (0x400A09E3, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Wyvern", }, "3, 3, 1, 3, 2, 1"),
                            (0x400A09E4, new string[]{ "Ettin", }, "2"),
                            (0x400A09E5, new string[]{ "Ophidianarchmage","Ophidianmage","Ophidianmatriarch","Ophidianknight","Ophidianwarrior", }, "3, 6, 3, 4, 10, 0"),
                            (0x400A09E6, new string[]{ "Wyvern","Drake","Imp","Mongbat", }, "2, 4, 1, 2, 0, 0"),
                            (0x400A09E7, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Stoneharpy", }, "8, 8, 3, 5, 3, 3"),
                            (0x400A09E8, new string[]{ "Stonegargoyle","Wyvern","Mummy","Ettin", }, "3, 3, 3, 5, 0, 0"),
                            (0x400A09E9, new string[]{ "Hellhound","Lavalizard","Fireelemental","Efreet","Hellcat","Lavaserpent", }, "8, 8, 10, 4, 6, 8"),
                            (0x400A09EA, new string[]{ "Lavasnake", }, "15"),
                            (0x400A09EB, new string[]{ "Wyvern", }, "6"),
                            (0x400A09EC, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "4, 8, 4, 4, 5, 5"),
                            (0x400A09ED, new string[]{ "Polarbear", }, "5"),
                            (0x400A09EE, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "4, 7, 4, 4, 5, 5"),
                            (0x400A09EF, new string[]{ "Polarbear", }, "5"),
                            (0x400A09F0, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "4, 10, 4, 4, 3, 3"),
                            (0x400A09F1, new string[]{ "Polarbear", }, "3"),
                            (0x400A09F2, new string[]{ "Iceserpent","Icesnake","Snowelemental","Whitewolf","Walrus","Polarbear", }, "6, 10, 3, 3, 3, 3"),
                            (0x400A09F3, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "6, 4, 4, 4, 4, 4"),
                            (0x400A09F4, new string[]{ "Polarbear", }, "4"),
                            (0x400A09F5, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "6, 3, 3, 3, 4, 4"),
                            (0x400A09F6, new string[]{ "Polarbear", }, "4"),
                            (0x400A09F7, new string[]{ "Gorilla","Panther","Giantserpent","Silverserpent","Mongbat", }, "10, 10, 10, 2, 10, 0"),
                            (0x400A09F8, new string[]{ "Gianttoad","Swampdragon","Giantrat","Alligator","Sewerrat","Plaguebeast", }, "8, 5, 12, 12, 11, 2"),
                            (0x400A09F9, new string[]{ "Bullfrog","Swamptentacle","Bogling","Bogthing", }, "15, 5, 13, 3, 0, 0"),
                            (0x400A09FA, new string[]{ "Boneknight","Skeletalknight","Bonemagi","Skeleton","Wraith","Ghoul", }, "3, 3, 3, 6, 4, 4"),
                            (0x400A09FB, new string[]{ "Savagerider","Savage","Savageshaman", }, "3, 9, 3, 0, 0, 0"),
                            (0x400A09FC, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400A09FD, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400A09FE, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400A09FF, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400A0A00, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400A0A01, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400A0A02, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400A0A03, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400A0A04, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400A0A05, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400A0A06, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400A0A07, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400A0A08, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A09, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A0A, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A0B, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A0C, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A0D, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A0E, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A0F, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A10, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A11, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A12, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A13, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A14, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A15, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A16, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A17, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A18, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A19, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A1A, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A1B, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A1C, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A1D, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A1E, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A1F, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A20, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A21, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A22, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A23, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A24, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A25, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A26, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A27, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A28, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A29, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A2A, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A2B, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A2C, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A2D, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A2E, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A2F, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A30, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A31, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A32, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A33, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A34, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A35, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A36, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A37, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A38, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A39, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A3A, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A3B, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A3C, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A3D, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A3E, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A3F, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A40, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A41, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A42, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A43, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A45, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A46, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A47, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A48, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A49, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A4A, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A4B, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A4C, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A4D, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A4E, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A4F, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A50, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A51, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A52, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A53, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A54, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A55, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A56, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A57, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A58, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A59, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A5A, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A5B, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A5C, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A5D, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A5E, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A5F, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A60, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A61, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A63, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A64, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A65, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A66, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400A0A67, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400A0A68, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400A0A69, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400A0A6A, new string[]{ "Forestostard","Ridablellama", }, "3, 3, 0, 0, 0, 0"),
                            (0x400A0A6B, new string[]{ "Frenziedostard", }, "8"),
                            (0x400A0A6C, new string[]{ "Imp","Mongbat", }, "2, 5, 0, 0, 0, 0"),
                            (0x400A0A6D, new string[]{ "Imp","Harpy","Headlessone","Scorpion","Stoneharpy","Wyvern", }, "1, 1, 1, 1, 1, 1"),
                            (0x400A0A6E, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400A0A6F, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0A70, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400A0A71, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0A72, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400A0A73, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0A74, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400A0A75, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0A76, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400A0A77, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0A78, new string[]{ "Bull","Greathart","Cow", }, "10, 6, 6, 0, 0, 0"),
                            (0x400A0A79, new string[]{ "Bull","Greathart","Cow", }, "2, 2, 2, 0, 0, 0"),
                            (0x400A0A7A, new string[]{ "Gorilla","Panther","Giantserpent","Silverserpent","Mongbat", }, "6, 6, 6, 1, 6, 0"),
                            (0x400A0A7B, new string[]{ "Gorilla","Panther","Giantserpent","Mongbat","Silverserpent", }, "5, 5, 5, 5, 1, 0"),
                            (0x400A0A7C, new string[]{ "Gorilla","Panther","Giantserpent","Mongbat","Silverserpent", }, "5, 5, 5, 5, 1, 0"),
                            (0x400A0A7D, new string[]{ "Terathanmatriarch","Terathanavenger","Terathandrone","Terathanwarrior", }, "2, 4, 10, 10, 0, 0"),
                            (0x400A0A7E, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A0A7F, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A0A80, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A0A81, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A0A82, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A0A83, new string[]{ "Orc","Orccaptain","Orcishlord", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0A84, new string[]{ "Orc", }, "5"),
                            (0x400A0A85, new string[]{ "Direwolf", }, "2"),
                            (0x400A0A86, new string[]{ "Orcishlord", }, "3"),
                            (0x400A0A87, new string[]{ "Orccaptain", }, "3"),
                            (0x400A0A88, new string[]{ "Orc", }, "3"),
                            (0x400A0A89, new string[]{ "Noble", }, "1"),
                            (0x400A0A8A, new string[]{ "Orcishlord","Orc", }, "1, 3, 0, 0, 0, 0"),
                            (0x400A0A8B, new string[]{ "Giantrat", }, "3"),
                            (0x400A0A8C, new string[]{ "Direwolf", }, "3"),
                            (0x400A0A8D, new string[]{ "Orccaptain","Orcishlord","Orcishmage","Orcbomber", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0A8E, new string[]{ "Orcbomber","Orccaptain","Orc", }, "1, 1, 2, 0, 0, 0"),
                            (0x400A0A8F, new string[]{ "Orcishlord","Orcishmage","Orcbomber","Orc", }, "1, 2, 1, 2, 0, 0"),
                            (0x400A0A90, new string[]{ "Orc","Orcishmage","Orcishlord", }, "3, 1, 2, 0, 0, 0"),
                            (0x400A0A91, new string[]{ "Corpser", }, "2"),
                            (0x400A0A92, new string[]{ "Orc", }, "3"),
                            (0x400A0A93, new string[]{ "Orcbrute","Orc", }, "1, 4, 0, 0, 0, 0"),
                            (0x400A0A94, new string[]{ "Orcbomber","Orc", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0A95, new string[]{ "Orcbomber","Earthelemental", }, "1, 4, 0, 0, 0, 0"),
                            (0x400A0A96, new string[]{ "hordeminion", }, "17"),
                            (0x400A0A97, new string[]{ "mongbat", }, "17"),
                            (0x400A0A98, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400A0A99, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400A0A9A, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400A0A9B, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400A0A9C, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400A0A9D, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400A0A9E, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400A0A9F, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400A0AA0, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400A0AA1, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400A0AA2, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400A0AA3, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400A0AA4, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400A0AA5, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400A0AA6, new string[]{ "ettin:ogre", }, "6"),
                            (0x400A0AA7, new string[]{ "orcishmage", }, "5"),
                            (0x400A0AA8, new string[]{ "orc", }, "10"),
                            (0x400A0AA9, new string[]{ "orc", }, "10"),
                            (0x400A0AAA, new string[]{ "orc", }, "10"),
                            (0x400A0AAB, new string[]{ "orc", }, "10"),
                            (0x400A0AAC, new string[]{ "orc", }, "10"),
                            (0x400A0AAD, new string[]{ "orc", }, "10"),
                            (0x400A0AAE, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "3"),
                            (0x400A0AAF, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "7"),
                            (0x400A0AB0, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "3"),
                            (0x400A0AB1, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "3"),
                            (0x400A0AB2, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "6"),
                            (0x400A0AB3, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "7"),
                            (0x400A0AB4, new string[]{ "airelemental:ettin:ogre:waterelemental","orc:troll:lizardman", }, "5, 5, 0, 0, 0, 0"),
                            (0x400A0AB5, new string[]{ "airelemental:ettin:ogre:waterelemental","orc:troll:lizardman", }, "5, 5, 0, 0, 0, 0"),
                            (0x400A0AB6, new string[]{ "airelemental:ettin:ogre:waterelemental","orc:troll:lizardman", }, "5, 5, 0, 0, 0, 0"),
                            (0x400A0AB7, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AB8, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AB9, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0ABA, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0ABB, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0ABC, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0ABD, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0ABE, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0ABF, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AC0, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AC1, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AC2, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AC3, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AC4, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AC5, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400A0AC6, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0AC7, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0AC8, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0AC9, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0ACA, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0ACB, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0ACC, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0ACD, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0ACE, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400A0ACF, new string[]{ "earthelemental:ratman", }, "4"),
                            (0x400A0AD0, new string[]{ "earthelemental:ratman", }, "4"),
                            (0x400A0AD1, new string[]{ "earthelemental:ratman", }, "4"),
                            (0x400A0AD2, new string[]{ "ghoul:lich:lichlord","skeleton:zombie", }, "3, 5, 0, 0, 0, 0"),
                            (0x400A0AD3, new string[]{ "ghoul:lich:lichlord","skeleton:zombie", }, "3, 5, 0, 0, 0, 0"),
                            (0x400A0AD4, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400A0AD5, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400A0AD6, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400A0AD7, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400A0AD8, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400A0AD9, new string[]{ "troll", }, "10"),
                            (0x400A0ADA, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400A0ADB, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400A0ADC, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400A0ADD, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400A0ADE, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400A0ADF, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400A0AE0, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400A0AE1, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400A0AE2, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400A0AE3, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400A0AE4, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400A0AE5, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400A0AE6, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400A0AE7, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AE8, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AE9, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AEA, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AEB, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AEC, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AED, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AEE, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AEF, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AF0, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AF1, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0AF2, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AF3, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AF4, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AF5, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AF6, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AF7, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AF8, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AF9, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AFA, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AFB, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400A0AFC, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0AFD, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0AFE, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0AFF, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B00, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B01, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B02, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B03, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B04, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B05, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B06, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B07, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B08, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B09, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B0A, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B0B, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B0C, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B0D, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B0E, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B0F, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B10, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B11, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400A0B12, new string[]{ "ettin:gargoyle:gazer:orc:troll", }, "5"),
                            (0x400A0B13, new string[]{ "ettin:gargoyle:gazer:orc:troll", }, "5"),
                            (0x400A0B14, new string[]{ "ettin:gargoyle:gazer:orc:troll", }, "5"),
                            (0x400A0B15, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B16, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B17, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B18, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B19, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B1A, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B1B, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B1C, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B1D, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B1E, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B1F, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B20, new string[]{ "ettin:troll", }, "2"),
                            (0x400A0B21, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400A0B22, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400A0B23, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400A0B24, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400A0B25, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400A0B26, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B27, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B28, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B29, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B2A, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B2B, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B2C, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B2D, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B2E, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B2F, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B30, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B31, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B32, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400A0B33, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B34, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B35, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B36, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B37, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B38, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B39, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B3A, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B3B, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B3C, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B3D, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B3E, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B3F, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400A0B40, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B41, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B42, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B43, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B44, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B45, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B46, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B47, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B48, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B49, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B4A, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B4B, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B4C, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B4D, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400A0B4E, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B4F, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B50, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B51, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B52, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B53, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B54, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B55, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B56, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B57, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400A0B58, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B59, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B5A, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B5B, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B5C, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B5D, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B5E, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B5F, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B60, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B61, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B62, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400A0B63, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B64, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B65, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B66, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B67, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B68, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B69, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B6A, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B6B, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B6C, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B6D, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B6E, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B6F, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B70, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0B71, new string[]{ "corpser:direwolf:ettin:harpy:lizardman:orc:ratman:reaper", }, "8"),
                            (0x400A0B72, new string[]{ "corpser:direwolf:ettin:harpy:lizardman:orc:ratman:reaper", }, "8"),
                            (0x400A0B73, new string[]{ "corpser:direwolf:ettin:harpy:lizardman:orc:ratman:reaper", }, "8"),
                            (0x400A0B74, new string[]{ "ettin:giantspider:harpy:lizardman:ogre:orc:skeleton:spectre:troll", }, "9"),
                            (0x400A0B75, new string[]{ "ettin:giantspider:harpy:lizardman:ogre:orc:skeleton:spectre:troll", }, "9"),
                            (0x400A0B76, new string[]{ "ettin:giantspider:harpy:lizardman:ogre:orc:skeleton:spectre:troll", }, "9"),
                            (0x400A0B77, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B78, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B79, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B7A, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B7B, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B7C, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400A0B7D, new string[]{ "giantspider:orc:ratman:spectre:zombie", }, "5"),
                            (0x400A0B7E, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400A0B7F, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400A0B80, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400A0B81, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400A0B82, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400A0B83, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400A0B84, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400A0B85, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400A0B86, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400A0B87, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400A0B88, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400A0B89, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400A0B8A, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400A0B8B, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400A0B8C, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400A0B8D, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B8E, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B8F, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B90, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B91, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B92, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B93, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B94, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B95, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B96, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400A0B97, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B98, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B99, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B9A, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B9B, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B9C, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B9D, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B9E, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0B9F, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0BA0, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0BA1, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "8"),
                            (0x400A0BA2, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0BA3, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0BA4, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400A0BA5, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400A0BA6, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400A0BA7, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400A0BA8, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400A0BA9, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400A0BAA, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BAB, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BAC, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BAD, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BAE, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BAF, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BB0, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BB1, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400A0BB2, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BB3, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BB4, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BB5, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BB6, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BB7, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BB8, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BB9, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BBA, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BBB, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BBC, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BBD, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BBE, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BBF, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BC0, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BC1, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BC2, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BC3, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BC4, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400A0BC5, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400A0BC6, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400A0BC7, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400A0BC8, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400A0BC9, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400A0BCA, new string[]{ "timberwolf", }, "7"),
                            (0x400A0BCB, new string[]{ "timberwolf", }, "7"),
                            (0x400A0BCC, new string[]{ "timberwolf", }, "7"),
                            (0x400A0BCD, new string[]{ "timberwolf", }, "7"),
                            (0x400A0BCE, new string[]{ "timberwolf", }, "7"),
                            (0x400A0BCF, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400A0BD0, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400A0BD1, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400A0BD2, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400A0BD3, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400A0BD4, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400A0BD5, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400A0BD6, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400A0BD7, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400A0BD8, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400A0BD9, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400A0BDA, new string[]{ "ettin:ogre:orc:ratman:skeleton:spectre:zombie", }, "7"),
                            (0x400A0BDB, new string[]{ "ettin:ogre:orc:ratman:skeleton:spectre:zombie", }, "7"),
                            (0x400A0BDC, new string[]{ "ettin:gargoyle:gazer:ogre:orc:troll:waterelemental", }, "7"),
                            (0x400A0BDD, new string[]{ "ettin:gargoyle:gazer:ogre:orc:troll:waterelemental", }, "7"),
                            (0x400A0BDE, new string[]{ "ettin:gargoyle:gazer:ogre:orc:troll:waterelemental", }, "7"),
                            (0x400A0BDF, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE0, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE1, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE2, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE3, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE4, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE5, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE6, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE7, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE8, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BE9, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BEA, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BEB, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0BEC, new string[]{ "orc:ratman", }, "6"),
                            (0x400A0BED, new string[]{ "orc:ratman", }, "6"),
                            (0x400A0BEE, new string[]{ "orc:ratman", }, "6"),
                            (0x400A0BEF, new string[]{ "orc:ratman", }, "6"),
                            (0x400A0BF0, new string[]{ "orc:ratman", }, "6"),
                            (0x400A0BF1, new string[]{ "orc:ratman", }, "6"),
                            (0x400A0BF2, new string[]{ "Orc","Orcishlord","Orcishmage", }, "1, 3, 2, 5, 3, 2"),
                            (0x400A0BF3, new string[]{ "Orc","Orcishlord","Orcishmage", }, "1, 3, 2, 5, 3, 2"),
                            (0x400A0BF4, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400A0BF5, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400A0BF6, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400A0BF7, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400A0BF8, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400A0BF9, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400A0BFA, new string[]{ "Daemon", }, "4"),
                            (0x400A0BFB, new string[]{ "Imp", }, "4"),
                            (0x400A0BFC, new string[]{ "Imp", }, "4"),
                            (0x400A0BFD, new string[]{ "Imp", }, "4"),
                            (0x400A0BFE, new string[]{ "Imp", }, "4"),
                            (0x400A0BFF, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "5, 5, 5, 5, 5, 5"),
                            (0x400A0C00, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400A0C01, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400A0C02, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400A0C03, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400A0C04, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400A0C05, new string[]{ "Headlessone","Orc","Orccaptain","Orcishlord","Orcishmage", }, "3, 6, 1, 2, 1, 0"),
                            (0x400A0C06, new string[]{ "Savage","Savagerider","Savageshaman", }, "2, 1, 1, 0, 0, 0"),
                            (0x400A0C07, new string[]{ "Savage","Savagerider","Savageshaman", }, "2, 1, 1, 0, 0, 0"),
                            (0x400A0C08, new string[]{ "Brigand", }, "7"),
                            (0x400A0C09, new string[]{ "Lich", }, "8"),
                            (0x400A0C0A, new string[]{ "Orc","Orcishlord","Orcishmage", }, "3, 1, 1, 0, 0, 0"),
                            (0x400A0C0B, new string[]{ "Orc","Orcishlord","Orcishmage", }, "3, 1, 1, 0, 0, 0"),
                            (0x400A0C0C, new string[]{ "orc","orcBomber","OrcCaptain","OrcishLord","OrcishMage", }, "8, 1, 1, 2, 2, 0"),
                            (0x400A0C0D, new string[]{ "Skeleton", }, "2"),
                            (0x400A0C0E, new string[]{ "Wraith:Shade:Spectre","Ghoul", }, "4, 4, 0, 0, 0, 0"),
                            (0x400A0C0F, new string[]{ "Wraith:Shade:Spectre", }, "1"),
                            (0x400A0C10, new string[]{ "Wraith:Shade:Spectre", }, "1"),
                            (0x400A0C11, new string[]{ "Lich", }, "1"),
                            (0x400A0C12, new string[]{ "Daemon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0C13, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0C14, new string[]{ "Daemon", }, "3"),
                            (0x400A0C15, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0C16, new string[]{ "Wisp", }, "8"),
                            (0x400A0C17, new string[]{ "Ghoul","Giantrat","Giantserpent","Headlessone","Jwilson", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0C18, new string[]{ "Iceserpent","Icesnake","Polarbear","Snowleopard","Whitewolf","Frostooze", }, "1, 1, 1, 1, 1, 1"),
                            (0x400A0C19, new string[]{ "Frostspider","Frosttroll", }, "1, 4, 0, 0, 0, 0"),
                            (0x400A0C1A, new string[]{ "Brownbear:Grizzlybear:Blackbear","Direwolf:Timberwolf:Greywolf","Rabbit:JackRabbit","Cougar:Panther","Bird:Eagle", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0C1B, new string[]{ "Alligator","Bullfrog","Corpser","Swamptentacle", }, "2, 3, 1, 1, 0, 0"),
                            (0x400A0C1C, new string[]{ "Giantserpent","Giantspider","Boar","Greathart","Hind","Llama", }, "1, 1, 1, 1, 1, 1"),
                            (0x400A0C1D, new string[]{ "Horse","Rat", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0C1E, new string[]{ "Brownbear:Grizzlybear:Blackbear","Direwolf:Timberwolf:Greywolf","Cougar:Panther","Giantserpent","Greathart", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0C1F, new string[]{ "Alligator","Bullfrog","Gorilla","Giantserpent","Gianttoad", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0C20, new string[]{ "Mummy","Ophidianwarrior","Scorpion","Giantserpent", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0C21, new string[]{ "Rottingcorpse","Skeleton","Slime","Snake","Strongmongbat", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0C22, new string[]{ "Ghoul","Giantserpent","Headlessone","Jwilson","Zombie", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0C23, new string[]{ "Cat","Chicken","Dog","Pig","Sheep", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0C24, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C25, new string[]{ "OrcCamp", }, "1"),
                            (0x400A0C26, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C27, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C28, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C29, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C2A, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C2B, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C2C, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C2D, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C2E, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C2F, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C30, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C31, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C32, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C33, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400A0C34, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C35, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C36, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C37, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C38, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C39, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C3A, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C3B, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C3C, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C3D, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C3E, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C3F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C40, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C41, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C42, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C43, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C44, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C45, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C46, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C47, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C48, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C49, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C4A, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C4B, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C4C, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C4D, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C4E, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C4F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C50, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C51, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C52, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C53, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C54, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C55, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C56, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C57, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C58, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C59, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C5A, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C5B, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C5C, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C5D, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C5E, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C5F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C60, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C61, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C62, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C63, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C64, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C65, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C66, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C67, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C68, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C69, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C6A, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C6B, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C6C, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C6D, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C6E, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C6F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400A0C70, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C71, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C72, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C73, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C74, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C75, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C76, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C77, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C78, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C79, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C7A, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C7B, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C7C, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C7D, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C7E, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C7F, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C80, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C81, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C82, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C83, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C84, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C85, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C86, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C87, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C88, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C89, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C8A, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C8B, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C8C, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C8D, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C8E, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C8F, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C90, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C91, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C92, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C93, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C94, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C95, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C96, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C97, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C98, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C99, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C9A, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C9B, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C9C, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C9D, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C9E, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0C9F, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CA9, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CAA, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CAB, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CAC, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CAD, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CAE, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CAF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB0, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB3, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400A0CB7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "13, 4, 1, 0, 0, 0"),
                            (0x400A0CB8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "13, 4, 1, 0, 0, 0"),
                            (0x400A0CB9, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "13, 4, 1, 0, 0, 0"),
                            (0x400A0CBA, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "13, 4, 1, 0, 0, 0"),
                            (0x400A0CBB, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CBC, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CBD, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CBE, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CBF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC0, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC3, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CC9, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CCA, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CCB, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CCC, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CCD, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CCE, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CCF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD0, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD3, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CD9, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CDA, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CDB, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CDC, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CDD, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CDE, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CDF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CE0, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CE1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CE2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CE3, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CE4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400A0CE5, new string[]{ "Earthelemental","Scorpion", }, "4, 2, 0, 0, 0, 0"),
                            (0x400A0CE6, new string[]{ "Earthelemental","Scorpion", }, "7, 3, 0, 0, 0, 0"),
                            (0x400A0CE7, new string[]{ "Earthelemental","Scorpion", }, "4, 1, 0, 0, 0, 0"),
                            (0x400A0CE8, new string[]{ "Earthelemental", }, "4"),
                            (0x400A0CE9, new string[]{ "Earthelemental", }, "4"),
                            (0x400A0CEA, new string[]{ "Earthelemental","Scorpion", }, "4, 2, 0, 0, 0, 0"),
                            (0x400A0CEB, new string[]{ "Earthelemental","Scorpion", }, "6, 20, 0, 0, 0, 0"),
                            (0x400A0CEC, new string[]{ "Airelemental", }, "3"),
                            (0x400A0CED, new string[]{ "Dullcopperelemental", }, "6"),
                            (0x400A0CEE, new string[]{ "Airelemental", }, "3"),
                            (0x400A0CEF, new string[]{ "Airelemental","Waterelemental", }, "3, 2, 0, 0, 0, 0"),
                            (0x400A0CF0, new string[]{ "Kraken","Waterelemental", }, "1, 3, 0, 0, 0, 0"),
                            (0x400A0CF1, new string[]{ "Kraken","Seaserpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0CF2, new string[]{ "Dullcopperelemental", }, "2"),
                            (0x400A0CF3, new string[]{ "Dullcopperelemental", }, "4"),
                            (0x400A0CF4, new string[]{ "Earthelemental", }, "2"),
                            (0x400A0CF5, new string[]{ "Fireelemental","Poisonelemental", }, "1, 4, 0, 0, 0, 0"),
                            (0x400A0CF6, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0CF7, new string[]{ "Evilmage","Evilmagelord", }, "5, 5, 0, 0, 0, 0"),
                            (0x400A0CF8, new string[]{ "Airelemental","Earthelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0CFA, new string[]{ "Fireelemental","Poisonelemental","Scorpion", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0CFB, new string[]{ "Airelemental","Earthelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0CFC, new string[]{ "Fireelemental","Poisonelemental","Scorpion", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0CFD, new string[]{ "Airelemental", }, "2"),
                            (0x400A0CFF, new string[]{ "Eldergazer", }, "2"),
                            (0x400A0D00, new string[]{ "Dullcopperelemental","Fireelemental", }, "4, 2, 0, 0, 0, 0"),
                            (0x400A0D01, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "2, 2, 3, 0, 0, 0"),
                            (0x400A0D02, new string[]{ "Evilmage","Evilmagelord", }, "5, 5, 0, 0, 0, 0"),
                            (0x400A0D03, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0D04, new string[]{ "Earthelemental","Scorpion", }, "4, 2, 0, 0, 0, 0"),
                            (0x400A0D05, new string[]{ "Earthelemental","Fireelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0D06, new string[]{ "Airelemental", }, "2"),
                            (0x400A0D07, new string[]{ "Fireelemental", }, "2"),
                            (0x400A0D08, new string[]{ "Airelemental", }, "2"),
                            (0x400A0D09, new string[]{ "Kraken","Seaserpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0D0A, new string[]{ "Evilmage","Evilmagelord", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0D0B, new string[]{ "Eldergazer", }, "2"),
                            (0x400A0D0C, new string[]{ "Airelemental", }, "5"),
                            (0x400A0D0D, new string[]{ "Bloodelemental", }, "8"),
                            (0x400A0D0E, new string[]{ "Fireelemental", }, "2"),
                            (0x400A0D0F, new string[]{ "Earthelemental", }, "4"),
                            (0x400A0D10, new string[]{ "Bloodelemental", }, "2"),
                            (0x400A0D11, new string[]{ "Earthelemental","Fireelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0D12, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0D13, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0D14, new string[]{ "Kraken","Waterelemental", }, "1, 3, 0, 0, 0, 0"),
                            (0x400A0D15, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400A0D16, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D17, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D18, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D19, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D1A, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400A0D1B, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400A0D1C, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400A0D1D, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D1E, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400A0D1F, new string[]{ "Antlion", }, "1"),
                            (0x400A0D20, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400A0D21, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D22, new string[]{ "Blacksolenworker","Blacksolenqueen", }, "2, 1, 0, 0, 0, 0"),
                            (0x400A0D23, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400A0D24, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400A0D25, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400A0D26, new string[]{ "Beetle", }, "2"),
                            (0x400A0D27, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400A0D28, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D29, new string[]{ "Antlion", }, "1"),
                            (0x400A0D2A, new string[]{ "Dreadspider", }, "2"),
                            (0x400A0D2B, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400A0D2C, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400A0D2D, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400A0D2E, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400A0D2F, new string[]{ "Blacksolenqueen","Blacksolenworker", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0D30, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D31, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D32, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400A0D33, new string[]{ "Blacksolenworker", }, "3"),
                            (0x400A0D34, new string[]{ "Beetle", }, "2"),
                            (0x400A0D35, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400A0D36, new string[]{ "Antlion", }, "1"),
                            (0x400A0D37, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400A0D38, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400A0D39, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400A0D3A, new string[]{ "Antlion", }, "3"),
                            (0x400A0D3B, new string[]{ "Antlion", }, "1"),
                            (0x400A0D3C, new string[]{ "redsoleninfiltratorqueen","redsoleninfiltratorwarrior", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0D3D, new string[]{ "redsoleninfiltratorqueen","redsoleninfiltratorwarrior", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0D3E, new string[]{ "redsoleninfiltratorqueen","redsoleninfiltratorwarrior", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0D3F, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D40, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D41, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D42, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D43, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D44, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D45, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D46, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D47, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D48, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D49, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D4A, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D4B, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D4C, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D4D, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D4E, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D4F, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D50, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D51, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D52, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D53, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D54, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D55, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D56, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D57, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D58, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D59, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D5A, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D5B, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400A0D5C, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0D5D, new string[]{ "dragon","drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0D5E, new string[]{ "lichlord","lich", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0D5F, new string[]{ "daemon", }, "3"),
                            (0x400A0D60, new string[]{ "Bird","Cat","Dog","Rat", }, "15, 15, 15, 15, 0, 0"),
                            (0x400A0D61, new string[]{ "Cow", }, "7"),
                            (0x400A0D62, new string[]{ "Cow", }, "7"),
                            (0x400A0D63, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400A0D64, new string[]{ "Chicken", }, "5"),
                            (0x400A0D65, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400A0D66, new string[]{ "Chicken", }, "5"),
                            (0x400A0D67, new string[]{ "Bird","Cat","Dog","Rat", }, "7, 7, 7, 7, 0, 0"),
                            (0x400A0D68, new string[]{ "Chicken", }, "5"),
                            (0x400A0D69, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400A0D6A, new string[]{ "Bird","Cat","Dog","Rat", }, "8, 8, 8, 8, 0, 0"),
                            (0x400A0D6B, new string[]{ "Chicken:Sheep:Cow", }, "3"),
                            (0x400A0D6C, new string[]{ "Chicken:Sheep:Cow", }, "3"),
                            (0x400A0D6D, new string[]{ "Chicken:Sheep:Cow", }, "3"),
                            (0x400A0D6E, new string[]{ "Bird","Cat","Dog","Rat", }, "20, 20, 20, 20, 0, 0"),
                            (0x400A0D6F, new string[]{ "Sheep", }, "15"),
                            (0x400A0D70, new string[]{ "Sheep", }, "15"),
                            (0x400A0D71, new string[]{ "Sheep", }, "15"),
                            (0x400A0D72, new string[]{ "Chicken", }, "2"),
                            (0x400A0D73, new string[]{ "Chicken", }, "2"),
                            (0x400A0D74, new string[]{ "Chicken", }, "2"),
                            (0x400A0D75, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400A0D77, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400A0D78, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400A0D79, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400A0D7A, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400A0D7B, new string[]{ "Bird","Cat","Dog","Rat", }, "3, 3, 3, 3, 0, 0"),
                            (0x400A0D7C, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400A0D7D, new string[]{ "Chicken:Cow:Sheep", }, "5"),
                            (0x400A0D7E, new string[]{ "Chicken:Cow:Sheep", }, "5"),
                            (0x400A0D7F, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400A0D80, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400A0D81, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400A0D82, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400A0D83, new string[]{ "Chicken", }, "10"),
                            (0x400A0D84, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400A0D85, new string[]{ "Bird","Cat","Dog","Rat", }, "6, 6, 6, 6, 0, 0"),
                            (0x400A0D86, new string[]{ "Bird","Cat","Dog","Rat", }, "6, 6, 6, 6, 0, 0"),
                            (0x400A0D87, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400A0D88, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400A0D89, new string[]{ "Bird","Cat","Dog","Rat", }, "18, 18, 18, 18, 0, 0"),
                            (0x400A0D8A, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400A0D8B, new string[]{ "Chicken:Cow:Sheep", }, "5"),
                            (0x400A0D8C, new string[]{ "Chicken", }, "2"),
                            (0x400A0D8D, new string[]{ "Chicken", }, "1"),
                            (0x400A0D8E, new string[]{ "bird", }, "3"),
                            (0x400A0D8F, new string[]{ "bird", }, "5"),
                            (0x400A0D90, new string[]{ "bird", }, "3"),
                            (0x400A0D91, new string[]{ "bird", }, "5"),
                            (0x400A0D92, new string[]{ "bird", }, "3"),
                            (0x400A0D93, new string[]{ "bird", }, "5"),
                            (0x400A0D94, new string[]{ "Bird", }, "10"),
                            (0x400A0D95, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400A0D96, new string[]{ "Bird","Cat","Dog","Rat", }, "6, 6, 6, 6, 0, 0"),
                            (0x400A0D97, new string[]{ "Chicken:Sheep:Cow:Bull", }, "5"),
                            (0x400A0D98, new string[]{ "Orderguard", }, "1"),
                            (0x400A0D99, new string[]{ "Orderguard", }, "1"),
                            (0x400A0D9A, new string[]{ "Chaosguard", }, "1"),
                            (0x400A0D9B, new string[]{ "Chaosguard", }, "1"),
                            (0x400A0D9C, new string[]{ "Towncrier", }, "1"),
                            (0x400A0D9D, new string[]{ "Towncrier", }, "1"),
                            (0x400A0D9E, new string[]{ "Towncrier", }, "1"),
                            (0x400A0D9F, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA0, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA1, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA2, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA3, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA4, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA5, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA6, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA7, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DA8, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DAA, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DAB, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DAC, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DAD, new string[]{ "Towncrier", }, "1"),
                            (0x400A0DAE, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DAF, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB0, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB1, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB2, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB3, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB4, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB5, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB6, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB7, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB8, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DB9, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DBA, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DBB, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400A0DBC, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400A0DBD, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400A0DBE, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400A0DBF, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400A0DC0, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400A0DC1, new string[]{ "Herbalist","Mage", }, "2, 2, 0, 0, 0, 0"),
                            (0x400A0DC2, new string[]{ "jeweler", }, "1"),
                            (0x400A0DC3, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DC4, new string[]{ "bowyer", }, "1"),
                            (0x400A0DC5, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DC6, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0DC7, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DC8, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DC9, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0DCA, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DCB, new string[]{ "innkeeper", }, "1"),
                            (0x400A0DCC, new string[]{ "tinkerguildmaster", }, "1"),
                            (0x400A0DCD, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0DCE, new string[]{ "warriorguildmaster","hirefighter", }, "1, 2, 0, 0, 0, 0"),
                            (0x400A0DCF, new string[]{ "innkeeper", }, "1"),
                            (0x400A0DD0, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DD1, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DD2, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0DD3, new string[]{ "fisherman", }, "1"),
                            (0x400A0DD4, new string[]{ "scribe", }, "1"),
                            (0x400A0DD5, new string[]{ "blacksmithguildmaster","blacksmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DD6, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DD7, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0DD8, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0DD9, new string[]{ "butcher", }, "1"),
                            (0x400A0DDA, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DDB, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DDC, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DDD, new string[]{ "scribe", }, "1"),
                            (0x400A0DDE, new string[]{ "jeweler", }, "1"),
                            (0x400A0DDF, new string[]{ "baker", }, "1"),
                            (0x400A0DE0, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DE1, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DE2, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DE3, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DE4, new string[]{ "bard","bardguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DE5, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DE6, new string[]{ "minerguildmaster", }, "1"),
                            (0x400A0DE7, new string[]{ "innkeeper", }, "1"),
                            (0x400A0DE8, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DE9, new string[]{ "mage", }, "1"),
                            (0x400A0DEA, new string[]{ "towncrier", }, "1"),
                            (0x400A0DEB, new string[]{ "orderguard","hirefighter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DEC, new string[]{ "farmer","rancher", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DED, new string[]{ "escortablemage", }, "1"),
                            (0x400A0DEE, new string[]{ "orderguard", }, "1"),
                            (0x400A0DEF, new string[]{ "hirefighter", }, "3"),
                            (0x400A0DF0, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0DF1, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DF2, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DF3, new string[]{ "innkeeper", }, "1"),
                            (0x400A0DF5, new string[]{ "thiefguildmaster", }, "1"),
                            (0x400A0DF6, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0DF7, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DF8, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DF9, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0DFA, new string[]{ "fisherman", }, "1"),
                            (0x400A0DFB, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DFC, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DFD, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DFE, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0DFF, new string[]{ "fisherman", }, "1"),
                            (0x400A0E00, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E01, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E02, new string[]{ "fisherman", }, "1"),
                            (0x400A0E03, new string[]{ "fisherman", }, "1"),
                            (0x400A0E04, new string[]{ "fisherman", }, "1"),
                            (0x400A0E05, new string[]{ "jeweler", }, "1"),
                            (0x400A0E06, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E07, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E08, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E09, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E0A, new string[]{ "baker", }, "1"),
                            (0x400A0E0B, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E0D, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E0E, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E0F, new string[]{ "butcher", }, "1"),
                            (0x400A0E10, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E12, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E13, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E14, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0E15, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E16, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E17, new string[]{ "fisherman", }, "1"),
                            (0x400A0E18, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E19, new string[]{ "scribe", }, "1"),
                            (0x400A0E1A, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E1B, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E1C, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E1D, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E1E, new string[]{ "fisherguildmaster", }, "1"),
                            (0x400A0E1F, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E20, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E21, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E22, new string[]{ "baker", }, "1"),
                            (0x400A0E23, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E24, new string[]{ "baker", }, "1"),
                            (0x400A0E25, new string[]{ "jeweler", }, "1"),
                            (0x400A0E26, new string[]{ "fisherguildmaster", }, "1"),
                            (0x400A0E28, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E29, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0E2A, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E2B, new string[]{ "fisherman", }, "1"),
                            (0x400A0E2C, new string[]{ "minerguildmaster", }, "1"),
                            (0x400A0E2D, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E2E, new string[]{ "provisioner", }, "1"),
                            (0x400A0E2F, new string[]{ "cobbler", }, "1"),
                            (0x400A0E30, new string[]{ "butcher", }, "1"),
                            (0x400A0E31, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0E32, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E33, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E34, new string[]{ "architect", }, "1"),
                            (0x400A0E35, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E36, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E37, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0E38, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E39, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E3B, new string[]{ "minerguildmaster", }, "1"),
                            (0x400A0E3C, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E3D, new string[]{ "minerguildmaster", }, "1"),
                            (0x400A0E3E, new string[]{ "bard","bardguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E3F, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400A0E40, new string[]{ "carpenter","realestatebroker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E41, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E42, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E43, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E44, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E45, new string[]{ "mageguildmaster", }, "1"),
                            (0x400A0E46, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E47, new string[]{ "butcher", }, "1"),
                            (0x400A0E48, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E49, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E4A, new string[]{ "baker", }, "1"),
                            (0x400A0E4B, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E4C, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E4D, new string[]{ "fisherman", }, "1"),
                            (0x400A0E4E, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E4F, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E50, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E51, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E52, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E53, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E54, new string[]{ "shipwright","mapmaker", }, "1, 1"),
                            (0x400A0E55, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0E56, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E57, new string[]{ "tanner", }, "1"),
                            (0x400A0E58, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E59, new string[]{ "bardguildmaster", }, "1"),
                            (0x400A0E5A, new string[]{ "jeweler", }, "1"),
                            (0x400A0E5B, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0E5C, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E5D, new string[]{ "bowyer", }, "1"),
                            (0x400A0E5E, new string[]{ "butcher", }, "1"),
                            (0x400A0E5F, new string[]{ "furtrader", }, "1"),
                            (0x400A0E60, new string[]{ "fisherman", }, "1"),
                            (0x400A0E61, new string[]{ "scribe", }, "1"),
                            (0x400A0E62, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E63, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E64, new string[]{ "butcher", }, "1"),
                            (0x400A0E65, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E66, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E67, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E68, new string[]{ "bardguildmaster", }, "1"),
                            (0x400A0E69, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E6A, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E6B, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E6C, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E6D, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E6E, new string[]{ "baker", }, "1"),
                            (0x400A0E6F, new string[]{ "baker", }, "1"),
                            (0x400A0E70, new string[]{ "butcher", }, "1"),
                            (0x400A0E71, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400A0E72, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E73, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E74, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E75, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0E76, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E77, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0E78, new string[]{ "bowyer", }, "1"),
                            (0x400A0E79, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E7B, new string[]{ "fisherman", }, "1"),
                            (0x400A0E7C, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E7D, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E7E, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400A0E7F, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E80, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E81, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E83, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0E84, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0E85, new string[]{ "fisherman", }, "1"),
                            (0x400A0E87, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E88, new string[]{ "rangerguildmaster", }, "1"),
                            (0x400A0E89, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E8A, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E8B, new string[]{ "fisherman", }, "1"),
                            (0x400A0E8C, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E8D, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E8E, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E8F, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0E90, new string[]{ "bowyer", }, "1"),
                            (0x400A0E91, new string[]{ "butcher", }, "1"),
                            (0x400A0E92, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E93, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E94, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E95, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E96, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E97, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E98, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E99, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0E9A, new string[]{ "scribe", }, "1"),
                            (0x400A0E9B, new string[]{ "jeweler", }, "1"),
                            (0x400A0E9C, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E9D, new string[]{ "innkeeper", }, "1"),
                            (0x400A0E9E, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0E9F, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EA0, new string[]{ "tinkerguildmaster", }, "1"),
                            (0x400A0EA1, new string[]{ "butcher", }, "1"),
                            (0x400A0EA2, new string[]{ "fisherman", }, "1"),
                            (0x400A0EA3, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EA4, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EA5, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EA6, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0EA7, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400A0EA8, new string[]{ "innkeeper", }, "1"),
                            (0x400A0EA9, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EAA, new string[]{ "baker", }, "1"),
                            (0x400A0EAB, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EAC, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EAD, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400A0EAE, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EAF, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0EB0, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EB1, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0EB2, new string[]{ "minerguildmaster", }, "1"),
                            (0x400A0EB3, new string[]{ "bowyer", }, "1"),
                            (0x400A0EB4, new string[]{ "jeweler", }, "1"),
                            (0x400A0EB5, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EB6, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EB7, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EB8, new string[]{ "baker", }, "1"),
                            (0x400A0EB9, new string[]{ "fisherman", }, "1"),
                            (0x400A0EBA, new string[]{ "innkeeper", }, "1"),
                            (0x400A0EBB, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EBC, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EBD, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EBE, new string[]{ "beekeeper", }, "1"),
                            (0x400A0EBF, new string[]{ "butcher", }, "1"),
                            (0x400A0EC0, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400A0EC1, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EC2, new string[]{ "fisherguildmaster", }, "1"),
                            (0x400A0EC3, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EC4, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EC5, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EC6, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EC8, new string[]{ "innkeeper", }, "1"),
                            (0x400A0EC9, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0ECA, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0ECB, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0ECC, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0ECD, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400A0ECE, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0ECF, new string[]{ "scribe", }, "1"),
                            (0x400A0ED0, new string[]{ "innkeeper", }, "1"),
                            (0x400A0ED1, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0ED2, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0ED3, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0ED4, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0ED5, new string[]{ "innkeeper", }, "1"),
                            (0x400A0ED6, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0ED7, new string[]{ "innkeeper", }, "1"),
                            (0x400A0ED8, new string[]{ "scribe", }, "1"),
                            (0x400A0ED9, new string[]{ "baker", }, "1"),
                            (0x400A0EDA, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EDB, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EDC, new string[]{ "bowyer", }, "1"),
                            (0x400A0EDD, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EDE, new string[]{ "butcher", }, "1"),
                            (0x400A0EDF, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EE0, new string[]{ "innkeeper", }, "1"),
                            (0x400A0EE1, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EE2, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EE3, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EE4, new string[]{ "bowyer", }, "1"),
                            (0x400A0EE5, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EE6, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EE7, new string[]{ "baker", }, "1"),
                            (0x400A0EE8, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EE9, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EEA, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EEB, new string[]{ "innkeeper", }, "1"),
                            (0x400A0EEC, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0EED, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EEE, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EEF, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EF0, new string[]{ "minter","banker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EF1, new string[]{ "mageguildmaster","alchemist","mage", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EF2, new string[]{ "tinkerguildmaster","tinker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EF3, new string[]{ "jeweler", }, "1"),
                            (0x400A0EF4, new string[]{ "animaltrainer", }, "1"),
                            (0x400A0EF5, new string[]{ "butcher", }, "1"),
                            (0x400A0EF6, new string[]{ "weaponsmith","armorer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EF7, new string[]{ "customhairstylist","alchemist","herbalist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EF8, new string[]{ "mapmaker","shipwright", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EF9, new string[]{ "tailorguildmaster","weaver","tailor", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EFA, new string[]{ "fisherman", }, "1"),
                            (0x400A0EFB, new string[]{ "baker", }, "1"),
                            (0x400A0EFC, new string[]{ "innkeeper", }, "1"),
                            (0x400A0EFD, new string[]{ "healerguildmaster","healer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0EFE, new string[]{ "realestatebroker","architect","carpenter", }, "1, 1, 1, 0, 0, 0"),
                            (0x400A0EFF, new string[]{ "cobbler","provisioner", }, "1, 1, 0, 0, 0, 0"),
                            (0x400A0F1A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F1B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F1C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F1D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F1E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F1F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F20, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F21, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F22, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F23, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F24, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F25, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F26, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F27, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F28, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F29, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F2A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F2B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F2C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F2D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F2E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F2F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F30, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F31, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F32, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F33, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F34, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F35, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F36, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F37, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F38, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F39, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F3A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F3B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F3C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F3D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F3E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F3F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F40, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F41, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F42, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F43, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F44, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F45, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F46, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F47, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F48, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F49, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F4A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F4B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F4C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F4D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F4E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F4F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F50, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F51, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F52, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F53, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F54, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F55, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F56, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F57, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F58, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F59, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F5A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F5B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F5C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F5D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F5E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F5F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F60, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F61, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F62, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F63, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F64, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F65, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F66, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F67, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F68, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F69, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F6A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F6B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F6C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F6D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F6E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F6F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F70, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F71, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F72, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F73, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F74, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F75, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F76, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F77, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F78, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F79, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F7A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F7B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F7C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F7D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F7E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F7F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F80, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F81, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F82, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F83, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F84, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F85, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F86, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F88, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F89, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F8A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F8B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F8C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F8D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F8E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F8F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F90, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F91, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F92, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F93, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F94, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F95, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F96, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F97, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F98, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F99, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F9A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F9B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F9C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F9D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F9E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0F9F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA0, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA1, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA2, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA3, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA4, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA5, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA6, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA7, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA8, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FA9, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FAA, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FAB, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FAC, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FAD, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FAE, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FAF, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB0, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB1, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB2, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB3, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB4, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB5, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB6, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB7, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB8, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FB9, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FBA, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FBB, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FBC, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FBD, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FBE, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FBF, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC0, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC1, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC2, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC3, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC4, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC5, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC6, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC7, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC8, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FC9, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FCA, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FCC, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FCD, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FCE, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400A0FCF, new string[]{ "Jukawarrior", }, "2"),
                            (0x400A0FD0, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400A0FD1, new string[]{ "Golemcontroller","Golem", }, "4, 4, 0, 0, 0, 0"),
                            (0x400A0FD2, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400A0FD3, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400A0FD4, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400A0FD5, new string[]{ "Brigand","Jukalord","Jukamage","Jukawarrior", }, "4, 1, 1, 3, 0, 0"),
                            (0x400A0FD6, new string[]{ "Golem","Jukalord","Jukamage","Jukawarrior", }, "1, 1, 1, 3, 0, 0"),
                            (0x400A0FD7, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x4001CF8C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF8D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF8E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF8F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF90, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF91, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF92, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF93, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF94, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF95, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF96, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF97, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF98, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF99, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF9A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF9B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF9C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF9D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF9E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CF9F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFA9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFAA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFAB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFAC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFAD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFAE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFAF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFB9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFBA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFBB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFBC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFBD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFBE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFBF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFC9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFCA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFCB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFCC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFCD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFCE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFCF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFD9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFDA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFDB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFDC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFDE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFE0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFE2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFE4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFE7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFE9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFEB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFED, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFEF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFF2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFF4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFF6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFF8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFFA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFFD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001CFFF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D002, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D004, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D006, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D008, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D00A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D00C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D00E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D010, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D012, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D014, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D016, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D018, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D01A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D01C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D01E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D020, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D022, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D024, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D027, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D029, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D02B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D02D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D02F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D031, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D032, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D033, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D034, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D036, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D038, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D03A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D03C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D03E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D040, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D042, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D044, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D046, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D048, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D04A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D04C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D04E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D050, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D052, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D054, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D060, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D11E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D147, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D14B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D14F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D157, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D15A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D15D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D166, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D170, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D179, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D17C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D17E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D180, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D18E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D192, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D195, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D198, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D19B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1A0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1A4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1A7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1AC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1B1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1B4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1B8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1BB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1BD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1BF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1C1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1C3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1C5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1C7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1CA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1CC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1CD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1CF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1D1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1D3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1D5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1D7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x4001D1E7, new string[]{ "RedSolenWorker", }, "1"),
                            (0x4001D1E9, new string[]{ "WhiteWyrm","IceSerpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x4001D1EC, new string[]{ "WhiteWyrm","IceSerpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x4001D1EE, new string[]{ "GiantSpider","DreadSpider", }, "1, 1, 0, 0, 0, 0"),
                            (0x4001D1F0, new string[]{ "BogThing","SwampDragon", }, "1, 1, 0, 0, 0, 0"),
                            (0x4001D1F4, new string[]{ "Wisp","Wisp", }, "1, 1, 0, 0, 0, 0"),
                            (0x4001D1F9, new string[]{ "Wisp", }, "1"),
                            (0x4001D1FD, new string[]{ "Centaur","Kirin","Unicorn","Pixie", }, "1, 1, 1, 1, 0, 0"),
                            (0x4001D20A, new string[]{ "ForestOstard","FrenziedOstard","FrenziedOstard", }, "1, 1, 1, 0, 0, 0"),
                            (0x4001D210, new string[]{ "Wyvern","OphidianWarrior", }, "1, 1, 0, 0, 0, 0"),
                            (0x4001D213, new string[]{ "FireSteed","FireSteed","HellCat", }, "1, 1, 1, 0, 0, 0"),
                            (0x4001D21B, new string[]{ "HellSteed", }, "1"),
                            (0x4002452F, new string[]{ "Drake","Drake","Drake", }, "1"),
                            (0x40024540, new string[]{ "Wyvern", }, "1"),
                            (0x40024545, new string[]{ "wyvern", }, "1"),
                            (0x4014E9F1, new string[]{ "wyvern", }, "1"),
                            (0x4014E9F2, new string[]{ "orcishmage","orcishmage","orcishmage", }, "1"),
                            (0x4014E9F4, new string[]{ "Troll","Troll", }, "1"),
                            (0x4015D982, new string[]{ "orcishmage","orcishmage","orcishmage", }, "1"),
                            (0x4015D988, new string[]{ "troll","troll", }, "1"),
                            (0x4015D9AE, new string[]{ "drake", }, "1"),
                            (0x4015D9BB, new string[]{ "orcishmage","orcishmage","orcishmage", }, "1"),
                            (0x4015D9C0, new string[]{ "Troll", }, "1"),
                            (0x4015D9D1, new string[]{ "Troll","Troll","Troll", }, "1"),
                            (0x4015D9D2, new string[]{ "Ogre","Ogre","Ogre", }, "1"),
                            };

                    foreach (var obj in tupleList)
                    {
                        if (World.FindItem(obj.serial) is Spawner spawner)
                        {
                            if (spawner.ModeMulti || spawner.ModeNeruns)
                            {
                                spawner.ObjectNamesRaw = new ArrayList(obj.NameList);
                                spawner.Counts = obj.counts;
                                patched++;
                            }
                            else
                                ;   // error (doesn't) get hit
                        }
                        else
                            missing++; // only one missing in my test, and I believe it was one of Boz's misconfigured spawners 
                    }
                }
                #endregion Re-add missing mobiles from ModeNeruns and ModeMulti spawners

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv96
        #region Patchv95
        private static int PatchV95(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV95;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                int missing = 0;
                #region Re-add missing mobiles from ModeNeruns and ModeMulti spawners
                if (Siege())
                {
                    (Serial serial, string[] NameList, string counts)[] tupleList = {
                            (0x4004EA87, new string[]{ "paganpeasant","pagandruid", }, "2, 1"),
                            (0x4004EA88, new string[]{ "paganpeasant","pagandruid", }, "2, 1"),
                            (0x4004EA89, new string[]{ "paganpeasant","pagandruid", }, "2, 1"),
                            (0x4004F18A, new string[]{ "paganpeasant","pagandruid", }, "0, 1"),
                            (0x4000B151, new string[]{ "EvilWanderingHealer", }, "1, 1"),
                            (0x4000B1A9, new string[]{ "lich","lichlord", }, "2, 2"),
                            (0x4000DAD3, new string[]{ "Bogthing","Bogling", }, "2, 5"),
                            (0x40019DA5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DA6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DA7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DA8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DA9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DAA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DAB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DAC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DAD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DAE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DAF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DB9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DBA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DBB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DBD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DBE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DBF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DC9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DCA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DCB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DCC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DCD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DCE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DCF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DD9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DDA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DDB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DDC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DDD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DDE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DDF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DE9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DEB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DEC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DED, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DEE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DEF, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DF0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DF1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DF6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DF9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DFC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019DFE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E09, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E0B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E0E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E0F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E11, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E13, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E14, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E15, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E16, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E17, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E18, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E19, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E1A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E1B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E1C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E20, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E26, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E28, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E29, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E2D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E2F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E30, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E32, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E3B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E3F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E42, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E48, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E52, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E53, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E54, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E55, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E56, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E58, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E59, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E5F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E60, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E61, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E62, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E63, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E64, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E66, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E67, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E68, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E69, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E6B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E6C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E6D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E70, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E71, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E72, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E73, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E74, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E75, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E76, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E77, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E78, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E79, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E7A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E7B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E7C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E7D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E7E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E7F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E80, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E81, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E82, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E83, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E84, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E86, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E8A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E8C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E8E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E91, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E92, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E93, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E94, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E95, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E96, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E98, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E99, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E9A, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E9B, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E9C, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E9D, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E9E, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019E9F, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA0, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA1, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA2, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA3, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA4, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA5, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA6, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA7, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA8, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EA9, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EAA, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EAB, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EAC, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EAD, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EAE, new string[]{ "Crow:Magpie:Raven", }, "2"),
                            (0x40019EB7, new string[]{ "TerathanDrone", }, "1"),
                            (0x40019EB8, new string[]{ "IceSerpent","WhiteWyrm", }, "1, 1, 0, 0, 0, 0"),
                            (0x40019EB9, new string[]{ "IceSerpent","WhiteWyrm", }, "1, 1, 0, 0, 0, 0"),
                            (0x40019EBA, new string[]{ "GiantSpider","DreadSpider", }, "1, 1, 0, 0, 0, 0"),
                            (0x40019EBB, new string[]{ "BogThing","Quagmire", }, "1, 1, 0, 0, 0, 0"),
                            (0x40019EBC, new string[]{ "Basilisk", }, "1"),
                            (0x40019EBE, new string[]{ "Basilisk", }, "1"),
                            (0x40019EBF, new string[]{ "Centaur","Kirin","Unicorn", }, "1, 1, 1, 0, 0, 0"),
                            (0x40019EC5, new string[]{ "ForestOstard","FrenziedOstard","FrenziedOstard", }, "1, 1, 1, 0, 0, 0"),
                            (0x40019EC9, new string[]{ "Wyvern","OphidianWarrior", }, "1, 1, 0, 0, 0, 0"),
                            (0x40019ECA, new string[]{ "FireSteed","HellCat","FireSteed", }, "1, 1, 1, 0, 0, 0"),
                            (0x40019ECC, new string[]{  }, "1"),
                            (0x400AADB0, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB1, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB3, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB4, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB5, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB6, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB7, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB8, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADB9, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADBB, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADBC, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADBD, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADBF, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADC0, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADC1, new string[]{ "sewerrat:Rat","Bullfrog", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADC2, new string[]{ "alligator", }, "8"),
                            (0x400AADC3, new string[]{ "alligator", }, "2"),
                            (0x400AADC4, new string[]{ "alligator", }, "2"),
                            (0x400AADC5, new string[]{ "alligator", }, "2"),
                            (0x400AADC6, new string[]{ "alligator", }, "8"),
                            (0x400AADC7, new string[]{ "alligator", }, "2"),
                            (0x400AADC8, new string[]{ "Harpy", }, "6"),
                            (0x400AADC9, new string[]{ "Headlessone", }, "4"),
                            (0x400AADCB, new string[]{ "Stoneharpy", }, "2"),
                            (0x400AADCC, new string[]{ "Gazer","Gazerlarva", }, "4, 2, 0, 0, 0, 0"),
                            (0x400AADCD, new string[]{ "Gazer","Gazerlarva", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADCE, new string[]{ "Corpser", }, "3"),
                            (0x400AADCF, new string[]{ "Corpser", }, "3"),
                            (0x400AADD0, new string[]{ "Headlessone", }, "2"),
                            (0x400AADD1, new string[]{ "Headlessone", }, "2"),
                            (0x400AADD2, new string[]{ "Headlessone", }, "2"),
                            (0x400AADD3, new string[]{ "Harpy","Stoneharpy", }, "8, 1, 0, 0, 0, 0"),
                            (0x400AADD4, new string[]{ "Giantspider","Dreadspider", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADD5, new string[]{ "Slime", }, "5"),
                            (0x400AADD6, new string[]{ "Waterelemental", }, "2"),
                            (0x400AADD7, new string[]{ "Giantspider","Dreadspider", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADD8, new string[]{ "Giantspider","Dreadspider", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADD9, new string[]{ "Gazer","Gazerlarva","Eldergazer", }, "4, 2, 1, 0, 0, 0"),
                            (0x400AADDA, new string[]{ "Corpser", }, "3"),
                            (0x400AADDB, new string[]{ "Corpser", }, "3"),
                            (0x400AADDC, new string[]{ "Gazer","Gazerlarva", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADDD, new string[]{ "Corpser", }, "2"),
                            (0x400AADDE, new string[]{ "Gazer", }, "2"),
                            (0x400AADDF, new string[]{ "Skeleton", }, "4"),
                            (0x400AADE0, new string[]{ "Skeleton", }, "4"),
                            (0x400AADE1, new string[]{ "Skeleton", }, "4"),
                            (0x400AADE2, new string[]{ "Skeleton", }, "4"),
                            (0x400AADE3, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400AADE4, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400AADE5, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400AADE6, new string[]{ "Boneknight","Skeleton","Zombie","Shade", }, "3, 1, 1, 1, 0, 0"),
                            (0x400AADE7, new string[]{ "Boneknight","Skeleton","Zombie","Shade", }, "3, 1, 1, 1, 0, 0"),
                            (0x400AADE8, new string[]{ "Lich","Spectre","Skeleton", }, "7, 3, 1, 0, 0, 0"),
                            (0x400AADE9, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 2, 1, 1"),
                            (0x400AADEA, new string[]{ "Mummy","Shade","Skeletalknight","Skeleton:Zombie","Spectre","Wraith", }, "1, 1, 1, 3, 1, 1"),
                            (0x400AADEB, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AADEC, new string[]{ "Mummy","Skeleton","Zombie", }, "1, 3, 1, 0, 0, 0"),
                            (0x400AADED, new string[]{ "Waterelemental", }, "2"),
                            (0x400AADEF, new string[]{ "Skeleton", }, "2"),
                            (0x400AADF0, new string[]{ "Mummy","Skeleton","Zombie", }, "1, 3, 1, 0, 0, 0"),
                            (0x400AADF1, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADF2, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADF3, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADF4, new string[]{ "Skeleton","Zombie", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AADF5, new string[]{ "Skeleton","Spectre", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADF6, new string[]{ "Ghoul","Shade","Skeleton","Zombie", }, "3, 1, 1, 1, 0, 0"),
                            (0x400AADF8, new string[]{ "Ghoul","Shade","Skeleton","Zombie", }, "3, 1, 1, 1, 0, 0"),
                            (0x400AADF9, new string[]{ "Ghoul","Skeleton","Wraith","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AADFA, new string[]{ "Ghoul","Skeleton","Wraith","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AADFB, new string[]{ "Ghoul","Skeleton","Wraith","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AADFD, new string[]{ "Ghoul","Wraith", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AADFE, new string[]{ "Ghoul","Mummy","Shade","Wraith","Zombie", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AADFF, new string[]{ "Boneknight","Skeletalknight", }, "4, 4, 0, 0, 0, 0"),
                            (0x400AAE00, new string[]{ "Ghoul","Shade","Skeleton","Wraith", }, "1, 1, 2, 1, 0, 0"),
                            (0x400AAE01, new string[]{ "Bonemagi", }, "3"),
                            (0x400AAE02, new string[]{ "Ghoul","Shade","Skeleton","Wraith","Zombie", }, "1, 1, 2, 1, 1, 0"),
                            (0x400AAE03, new string[]{ "Ghoul","Shade","Spectre","Wraith", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AAE04, new string[]{ "Lich", }, "2"),
                            (0x400AAE05, new string[]{ "Ghoul","Shade","Spectre","Wraith", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AAE06, new string[]{ "Ghoul","Lich","Spectre","Wraith", }, "1, 3, 1, 1, 0, 0"),
                            (0x400AAE07, new string[]{ "Ghoul","Poisonelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE08, new string[]{ "Ghoul","Poisonelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE09, new string[]{ "Ghoul","Shade","Spectre","Wraith", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AAE0A, new string[]{ "Lich", }, "4"),
                            (0x400AAE0B, new string[]{ "Ghoul","Lich", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AAE0C, new string[]{ "Fireelemental", }, "2"),
                            (0x400AAE0D, new string[]{ "Lich", }, "2"),
                            (0x400AAE0F, new string[]{ "Lizardman", }, "3"),
                            (0x400AAE10, new string[]{ "Lizardman", }, "5"),
                            (0x400AAE11, new string[]{ "Lizardman", }, "3"),
                            (0x400AAE12, new string[]{ "Lizardman", }, "5"),
                            (0x400AAE13, new string[]{ "Lizardman", }, "3"),
                            (0x400AAE14, new string[]{ "Lizardman", }, "3"),
                            (0x400AAE15, new string[]{ "Lizardman", }, "3"),
                            (0x400AAE16, new string[]{ "Ettin", }, "2"),
                            (0x400AAE17, new string[]{ "Ettin", }, "4"),
                            (0x400AAE18, new string[]{ "Earthelemental","Ettin", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AAE19, new string[]{ "Earthelemental","Ettin", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AAE1A, new string[]{ "Earthelemental","Ettin", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AAE1B, new string[]{ "Ettin", }, "2"),
                            (0x400AAE1C, new string[]{ "Ettin", }, "2"),
                            (0x400AAE1D, new string[]{ "Earthelemental", }, "3"),
                            (0x400AAE1E, new string[]{ "Troll", }, "3"),
                            (0x400AAE1F, new string[]{ "Troll", }, "3"),
                            (0x400AAE20, new string[]{ "Troll", }, "3"),
                            (0x400AAE21, new string[]{ "Troll", }, "3"),
                            (0x400AAE22, new string[]{ "Ogre", }, "3"),
                            (0x400AAE24, new string[]{ "Ogre", }, "3"),
                            (0x400AAE25, new string[]{ "Ogrelord", }, "5"),
                            (0x400AAE26, new string[]{ "Ogre", }, "3"),
                            (0x400AAE2A, new string[]{ "Ogre", }, "3"),
                            (0x400AAE2B, new string[]{ "Ettin", }, "4"),
                            (0x400AAE2C, new string[]{ "Ettin", }, "4"),
                            (0x400AAE2D, new string[]{ "Cyclops", }, "3"),
                            (0x400AAE2E, new string[]{ "Ettin", }, "4"),
                            (0x400AAE2F, new string[]{ "Ettin", }, "4"),
                            (0x400AAE30, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAE32, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AAE34, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAE39, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAE3A, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAE3C, new string[]{ "Giantserpent", }, "6"),
                            (0x400AAE47, new string[]{ "Wyvern","Dragon","Drake", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AAE48, new string[]{ "Waterelemental", }, "4"),
                            (0x400AAE49, new string[]{ "Giantserpent", }, "6"),
                            (0x400AAE4B, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAE4C, new string[]{ "Dragon","Drake","Wyvern", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAE4D, new string[]{ "Drake","Wyvern", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE4E, new string[]{ "Waterelemental", }, "4"),
                            (0x400AAE4F, new string[]{ "Waterelemental", }, "4"),
                            (0x400AAE50, new string[]{ "Drake","Shadowwyrm","Wyvern", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AAE51, new string[]{ "Daemon","Evilmage", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AAE52, new string[]{ "Drake","Shadowwyrm","Wyvern", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AAE53, new string[]{ "Fireelemental", }, "1"),
                            (0x400AAE54, new string[]{ "Wyvern:Wyvern:Giantserpent", }, "3"),
                            (0x400AAE55, new string[]{ "Ancientwyrm", }, "1"),
                            (0x400AAE56, new string[]{ "Slime","Giantrat","Giantserpent", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAE57, new string[]{ "Slime", }, "1"),
                            (0x400AAE58, new string[]{ "Evilmagelord", }, "2"),
                            (0x400AAE59, new string[]{ "Giantrat","Lavasnake","Evilmage", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AAE5A, new string[]{ "Lavalizard", }, "1"),
                            (0x400AAE5B, new string[]{ "Fireelemental", }, "3"),
                            (0x400AAE5C, new string[]{ "Fireelemental","Lavasnake","Hellcat","Hellhound", }, "3, 1, 1, 1, 0, 0"),
                            (0x400AAE5D, new string[]{ "Efreet","Lavaserpent","Hellhound","Fireelemental", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AAE5E, new string[]{ "Lich","Bonemagi:Skeletalmage","Hellcat","Hellhound","Fireelemental","Lavalizard", }, "4, 6, 1, 3, 2, 1"),
                            (0x400AAE5F, new string[]{ "Lavasnake", }, "1"),
                            (0x400AAE60, new string[]{ "Lavalizard", }, "1"),
                            (0x400AAE61, new string[]{ "Hellcat", }, "1"),
                            (0x400AAE63, new string[]{ "Fireelemental", }, "1"),
                            (0x400AAE64, new string[]{ "Lavasnake", }, "1"),
                            (0x400AAE65, new string[]{ "Lavasnake", }, "1"),
                            (0x400AAE66, new string[]{ "Fireelemental", }, "1"),
                            (0x400AAE67, new string[]{ "Fireelemental","Efreet","Lavaserpent", }, "4, 1, 1, 0, 0, 0"),
                            (0x400AAE68, new string[]{ "Hellcat","Fireelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE69, new string[]{ "Fireelemental", }, "1"),
                            (0x400AAE6A, new string[]{ "Fireelemental", }, "2"),
                            (0x400AAE6B, new string[]{ "Hellhound", }, "1"),
                            (0x400AAE6C, new string[]{ "Efreet","Lavalizard", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AAE6D, new string[]{ "Fireelemental","Lavaserpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE6E, new string[]{ "Lavalizard","Fireelemental", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE6F, new string[]{ "Lich","Lichlord", }, "3, 1, 0, 0, 0, 0"),
                            (0x400AAE71, new string[]{ "Hellhound", }, "6"),
                            (0x400AAE72, new string[]{ "Daemon", }, "2"),
                            (0x400AAE73, new string[]{ "Hellhound","Hellcat", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE75, new string[]{ "Evilmage","Hellhound","Lavasnake","Hellcat", }, "1, 5, 1, 1, 0, 0"),
                            (0x400AAE76, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE77, new string[]{ "Evilmagelord", }, "1"),
                            (0x400AAE78, new string[]{ "Evilmagelord", }, "1"),
                            (0x400AAE79, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE7A, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE7B, new string[]{ "Hellhound", }, "1"),
                            (0x400AAE7C, new string[]{ "Evilmage","Evilmagelord", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE7D, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE7E, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE7F, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE80, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE81, new string[]{ "Evilmage", }, "1"),
                            (0x400AAE82, new string[]{ "Evilmagelord", }, "1"),
                            (0x400AAE83, new string[]{ "Spectre:Wraith","Skeleton","Zombie", }, "2, 3, 4, 0, 0, 0"),
                            (0x400AAE84, new string[]{ "Spectre:Wraith:Shade","Skeleton","Zombie", }, "2, 3, 4, 0, 0, 0"),
                            (0x400AAE85, new string[]{ "Spectre:Shade:Wraith","Lich","Skeleton","Zombie", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AAE86, new string[]{ "Spectre:Shade:Wraith","Skeleton","Zombie", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAE87, new string[]{ "Lich", }, "1"),
                            (0x400AAE89, new string[]{ "Spectre:Wraith","Skeleton","Zombie", }, "2, 3, 4, 0, 0, 0"),
                            (0x400AAE8A, new string[]{ "Skeleton", }, "10"),
                            (0x400AAE8B, new string[]{ "zombie:skeleton", }, "4"),
                            (0x400AAE8C, new string[]{ "Imp","Hellhound", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE8D, new string[]{ "Imp","Hellhound", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE8E, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAE8F, new string[]{ "Imp","Hellhound", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AAE90, new string[]{ "Firegargoyle", }, "2"),
                            (0x400AAE91, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAE92, new string[]{ "Gargoyle","Hellhound", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AAE93, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAE94, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAE95, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAE96, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAE98, new string[]{ "Daemon", }, "2"),
                            (0x400AAE9A, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAE9B, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAE9C, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAE9D, new string[]{ "Imp","Hellhound", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAE9F, new string[]{ "Gargoyle", }, "4"),
                            (0x400AAEA1, new string[]{ "Gazer","Gazerlarva", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AAEA2, new string[]{ "Imp","Hellhound","Gargoyle", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAEA4, new string[]{ "Eldergazer","Gazer","Gazerlarva", }, "1, 3, 2, 0, 0, 0"),
                            (0x400AAEA5, new string[]{ "Balron","Gargoyle","Gazer", }, "1, 2, 2, 0, 0, 0"),
                            (0x400AAEA6, new string[]{ "Daemon","Gargoyle","Gazer", }, "2, 2, 2, 0, 0, 0"),
                            (0x400AAEA7, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAEA8, new string[]{ "Daemon","Stonegargoyle", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AAEA9, new string[]{ "Daemon","Gazer","Gazerlarva", }, "2, 3, 2, 0, 0, 0"),
                            (0x400AAEAA, new string[]{ "Daemon","Hellhound","Imp", }, "2, 1, 1, 0, 0, 0"),
                            (0x400AAEAB, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAEAC, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAEAD, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAEAE, new string[]{ "Firegargoyle", }, "2"),
                            (0x400AAEAF, new string[]{ "Gargoyle", }, "2"),
                            (0x400AAEB0, new string[]{ "Balron", }, "1"),
                            (0x400AAEB1, new string[]{ "Gazer","Imp","Stonegargoyle", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AAEB2, new string[]{ "Arcticogrelord", }, "1"),
                            (0x400AAEB3, new string[]{ "Iceserpent","Snowelemental","Ratman","Frosttroll","Frostspider", }, "2, 1, 1, 1, 1, 0"),
                            (0x400AAEB4, new string[]{ "Frostspider","Frostooze","Icesnake", }, "1, 2, 1, 0, 0, 0"),
                            (0x400AAEB5, new string[]{ "Ratmanmage", }, "1"),
                            (0x400AAEB6, new string[]{ "Arcticogrelord", }, "1"),
                            (0x400AAEB7, new string[]{ "Whitewyrm", }, "1"),
                            (0x400AAEB8, new string[]{ "Frostooze","Frostspider","Iceelemental:Snowelemental","Icesnake","Frosttroll", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AAEB9, new string[]{ "Frostooze","Frostspider","Iceelemental:Snowelemental","Icesnake","Frosttroll", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AAEBB, new string[]{ "Iceserpent","Ratman","Snowelemental:Iceelemental","Frosttroll", }, "3, 1, 4, 2, 0, 0"),
                            (0x400AAEBC, new string[]{ "Iceserpent","Snowelemental:Iceelemental","Frosttroll","Ratman", }, "3, 4, 1, 1, 0, 0"),
                            (0x400AAEBD, new string[]{ "Iceserpent","Snowelemental:Iceelemental", }, "9, 9, 0, 0, 0, 0"),
                            (0x400AAEBE, new string[]{ "Ratman","Ratmanarcher","Ratmanmage", }, "12, 7, 5, 0, 0, 0"),
                            (0x400AAEBF, new string[]{ "Icefiend", }, "1"),
                            (0x400AAEC0, new string[]{ "Icefiend", }, "1"),
                            (0x400AAEC1, new string[]{ "Swampdragon", }, "7"),
                            (0x400AAEC2, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Stoneharpy", }, "15, 15, 6, 9, 6, 3"),
                            (0x400AAEC3, new string[]{ "Stonegargoyle","Wyvern","Mummy","Ettin", }, "3, 6, 4, 6, 0, 0"),
                            (0x400AAEC4, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Stoneharpy", }, "10, 10, 4, 6, 4, 3"),
                            (0x400AAEC5, new string[]{ "Stonegargoyle","Wyvern","Mummy","Ettin", }, "3, 4, 2, 4, 0, 0"),
                            (0x400AAEC6, new string[]{ "Gazer","Reaper","Scorpion","Giantserpent","Troll", }, "3, 2, 3, 2, 2, 0"),
                            (0x400AAEC7, new string[]{ "Corpser","Giantspider","Troll","Harpy","Ettin","Gazer", }, "3, 3, 3, 6, 3, 3"),
                            (0x400AAEC8, new string[]{ "Cyclops","Titan", }, "5, 3, 0, 0, 0, 0"),
                            (0x400AAEC9, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Wyvern", }, "3, 3, 1, 3, 2, 1"),
                            (0x400AAECA, new string[]{ "Ettin", }, "2"),
                            (0x400AAECB, new string[]{ "Ophidianarchmage","Ophidianmage","Ophidianmatriarch","Ophidianknight","Ophidianwarrior", }, "3, 6, 3, 4, 10, 0"),
                            (0x400AAECC, new string[]{ "Wyvern","Drake","Imp","Mongbat", }, "2, 4, 1, 2, 0, 0"),
                            (0x400AAECD, new string[]{ "Imp","Scorpion","Desertostard","Orc","Orcishlord","Stoneharpy", }, "8, 8, 3, 5, 3, 3"),
                            (0x400AAECE, new string[]{ "Stonegargoyle","Wyvern","Mummy","Ettin", }, "3, 3, 3, 5, 0, 0"),
                            (0x400AAECF, new string[]{ "Hellhound","Lavalizard","Fireelemental","Efreet","Hellcat","Lavaserpent", }, "8, 8, 10, 4, 6, 8"),
                            (0x400AAED0, new string[]{ "Lavasnake", }, "15"),
                            (0x400AAED1, new string[]{ "Wyvern", }, "6"),
                            (0x400AAED2, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "4, 8, 4, 4, 5, 5"),
                            (0x400AAED3, new string[]{ "Polarbear", }, "5"),
                            (0x400AAED4, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "4, 7, 4, 4, 5, 5"),
                            (0x400AAED5, new string[]{ "Polarbear", }, "5"),
                            (0x400AAED6, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "4, 10, 4, 4, 3, 3"),
                            (0x400AAED8, new string[]{ "Polarbear", }, "3"),
                            (0x400AAED9, new string[]{ "Iceserpent","Icesnake","Snowelemental","Whitewolf","Walrus","Polarbear", }, "6, 10, 3, 3, 3, 3"),
                            (0x400AAEDA, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "6, 4, 4, 4, 4, 4"),
                            (0x400AAEDB, new string[]{ "Polarbear", }, "4"),
                            (0x400AAEDC, new string[]{ "Iceserpent","Icesnake","Frosttroll","Snowelemental","Whitewolf","Walrus", }, "6, 3, 3, 3, 4, 4"),
                            (0x400AAEDD, new string[]{ "Polarbear", }, "4"),
                            (0x400AAEDE, new string[]{ "Gorilla","Panther","Giantserpent","Silverserpent","Mongbat", }, "10, 10, 10, 2, 10, 0"),
                            (0x400AAEDF, new string[]{ "Gianttoad","Swampdragon","Giantrat","Alligator","Sewerrat","Plaguebeast", }, "8, 5, 12, 12, 11, 2"),
                            (0x400AAEE0, new string[]{ "Bullfrog","Swamptentacle","Bogling","Bogthing", }, "15, 5, 13, 3, 0, 0"),
                            (0x400AAEE1, new string[]{ "Boneknight","Skeletalknight","Bonemagi","Skeleton","Wraith","Ghoul", }, "3, 3, 3, 6, 4, 4"),
                            (0x400AAEE2, new string[]{ "Savagerider","Savage","Savageshaman", }, "3, 9, 3, 0, 0, 0"),
                            (0x400AAEE3, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400AAEE4, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400AAEE5, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400AAEE6, new string[]{ "Horse","Orc","Orcishlord","Greathart","Hind","Ridablellama", }, "4, 8, 4, 4, 16, 4"),
                            (0x400AAEE7, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400AAEE8, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400AAEE9, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400AAEEA, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400AAEEB, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400AAEEC, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400AAEED, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "6, 4, 4, 2, 2, 2"),
                            (0x400AAEEE, new string[]{ "Hind","Llama","Timberwolf", }, "2, 2, 2, 0, 0, 0"),
                            (0x400AAEEF, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAEF0, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAEF1, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAEF3, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAEF4, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAEF5, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAEF6, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAEF7, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAEF8, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAEFA, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAEFB, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAEFC, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAEFE, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAEFF, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF00, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF01, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF02, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF03, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF04, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF05, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF06, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF07, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF08, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF09, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF0A, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF0B, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF0C, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF0D, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF0E, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF0F, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF10, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF11, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF12, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF13, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF14, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF15, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF16, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF17, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF18, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF19, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF1A, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF1B, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF1C, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF1D, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF1E, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF1F, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF20, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF21, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF22, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF23, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF24, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF25, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF26, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF27, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF28, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF29, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF2A, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF2B, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF2C, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF2D, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF2E, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF2F, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF30, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF31, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF33, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF34, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF35, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF36, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF37, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF38, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF39, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF3A, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF3B, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF3C, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF3D, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF3E, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF3F, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF40, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF41, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF42, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF43, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF44, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF45, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF46, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF47, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF48, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF49, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF4A, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF4B, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF4D, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF4E, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF4F, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF51, new string[]{ "Brownbear:Grizzlybear:Blackbear","Horse:Ridablellama","Rabbit:JackRabbit","Bird","Cougar","Greathart", }, "3, 2, 2, 1, 1, 1"),
                            (0x400AAF52, new string[]{ "Hind","Llama","Timberwolf","Corpser","Ettin","Forestostard", }, "1, 1, 1, 1, 1, 2"),
                            (0x400AAF53, new string[]{ "Gazer","Giantspider","Harpy","Headlessone","Lizardman","Mongbat", }, "1, 1, 1, 1, 3, 1"),
                            (0x400AAF54, new string[]{ "Rat","Ratman","Reaper","Troll", }, "1, 1, 1, 2, 0, 0"),
                            (0x400AAF55, new string[]{ "Forestostard","Ridablellama", }, "3, 3, 0, 0, 0, 0"),
                            (0x400AAF56, new string[]{ "Frenziedostard", }, "8"),
                            (0x400AAF57, new string[]{ "Imp","Mongbat", }, "2, 5, 0, 0, 0, 0"),
                            (0x400AAF58, new string[]{ "Imp","Harpy","Headlessone","Scorpion","Stoneharpy","Wyvern", }, "1, 1, 1, 1, 1, 1"),
                            (0x400AAF59, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400AAF5A, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AAF5B, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400AAF5C, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AAF5D, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400AAF5E, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AAF5F, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400AAF60, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AAF61, new string[]{ "Rabbit:JackRabbit","Bird","Rat","Hind","Llama","Horse", }, "20, 15, 5, 4, 3, 3"),
                            (0x400AAF63, new string[]{ "Mongbat","Greathart", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AAF64, new string[]{ "Bull","Greathart","Cow", }, "10, 6, 6, 0, 0, 0"),
                            (0x400AAF65, new string[]{ "Bull","Greathart","Cow", }, "2, 2, 2, 0, 0, 0"),
                            (0x400AAF66, new string[]{ "Gorilla","Panther","Giantserpent","Silverserpent","Mongbat", }, "6, 6, 6, 1, 6, 0"),
                            (0x400AAF67, new string[]{ "Gorilla","Panther","Giantserpent","Mongbat","Silverserpent", }, "5, 5, 5, 5, 1, 0"),
                            (0x400AAF69, new string[]{ "Gorilla","Panther","Giantserpent","Mongbat","Silverserpent", }, "5, 5, 5, 5, 1, 0"),
                            (0x400AAF6A, new string[]{ "Terathanmatriarch","Terathanavenger","Terathandrone","Terathanwarrior", }, "2, 4, 10, 10, 0, 0"),
                            (0x400AAF6B, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAF6C, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAF6D, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAF6E, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAF6F, new string[]{ "Ophidianmatriarch:Ophidianarchmage","Ophidianmage","Ophidianknight:Ophidianwarrior", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAF70, new string[]{ "Orc","Orccaptain","Orcishlord", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AAF71, new string[]{ "Orc", }, "5"),
                            (0x400AAF72, new string[]{ "Direwolf", }, "2"),
                            (0x400AAF73, new string[]{ "Orcishlord", }, "3"),
                            (0x400AAF74, new string[]{ "Orccaptain", }, "3"),
                            (0x400AAF75, new string[]{ "Orc", }, "3"),
                            (0x400AAF76, new string[]{ "Noble", }, "1"),
                            (0x400AAF77, new string[]{ "Orcishlord","Orc", }, "1, 3, 0, 0, 0, 0"),
                            (0x400AAF78, new string[]{ "Giantrat", }, "3"),
                            (0x400AAF79, new string[]{ "Direwolf", }, "3"),
                            (0x400AAF7A, new string[]{ "Orccaptain","Orcishlord","Orcishmage","Orcbomber", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AAF7B, new string[]{ "Orcbomber","Orccaptain","Orc", }, "1, 1, 2, 0, 0, 0"),
                            (0x400AAF7C, new string[]{ "Orcishlord","Orcishmage","Orcbomber","Orc", }, "1, 2, 1, 2, 0, 0"),
                            (0x400AAF7D, new string[]{ "Orc","Orcishmage","Orcishlord", }, "3, 1, 2, 0, 0, 0"),
                            (0x400AAF7E, new string[]{ "Corpser", }, "2"),
                            (0x400AAF7F, new string[]{ "Orc", }, "3"),
                            (0x400AAF80, new string[]{ "Orcbrute","Orc", }, "1, 4, 0, 0, 0, 0"),
                            (0x400AAF81, new string[]{ "Orcbomber","Orc", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AAF82, new string[]{ "Orcbomber","Earthelemental", }, "1, 4, 0, 0, 0, 0"),
                            (0x400AAF83, new string[]{ "hordeminion", }, "17"),
                            (0x400AAF84, new string[]{ "mongbat", }, "17"),
                            (0x400AAF85, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400AAF86, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400AAF87, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400AAF88, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400AAF89, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400AAF8A, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400AAF8B, new string[]{ "ettin:giantspider","wisp","mongbat:orc:troll", }, "2, 1, 6, 0, 0, 0"),
                            (0x400AAF8C, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400AAF8D, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400AAF8E, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400AAF8F, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400AAF90, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400AAF91, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400AAF92, new string[]{ "ettin:harpy:ogre:troll", }, "8"),
                            (0x400AAF93, new string[]{ "ettin:ogre", }, "6"),
                            (0x400AAF94, new string[]{ "orcishmage", }, "5"),
                            (0x400AAF95, new string[]{ "orc", }, "10"),
                            (0x400AAF96, new string[]{ "orc", }, "10"),
                            (0x400AAF97, new string[]{ "orc", }, "10"),
                            (0x400AAF98, new string[]{ "orc", }, "10"),
                            (0x400AAF99, new string[]{ "orc", }, "10"),
                            (0x400AAF9A, new string[]{ "orc", }, "10"),
                            (0x400AAF9C, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "3"),
                            (0x400AAF9D, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "7"),
                            (0x400AAF9E, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "3"),
                            (0x400AAF9F, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "3"),
                            (0x400AAFA0, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "6"),
                            (0x400AAFA1, new string[]{ "brigand:harpy:lizardman:orcishmage:orc:ratman:spectre:troll", }, "7"),
                            (0x400AAFA2, new string[]{ "airelemental:ettin:ogre:waterelemental","orc:troll:lizardman", }, "5, 5, 0, 0, 0, 0"),
                            (0x400AAFA3, new string[]{ "airelemental:ettin:ogre:waterelemental","orc:troll:lizardman", }, "5, 5, 0, 0, 0, 0"),
                            (0x400AAFA4, new string[]{ "airelemental:ettin:ogre:waterelemental","orc:troll:lizardman", }, "5, 5, 0, 0, 0, 0"),
                            (0x400AAFA5, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFA6, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFA7, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFA9, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFAF, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFBC, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFBD, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFBF, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC0, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC2, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC3, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC4, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC6, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC7, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC8, new string[]{ "airelemental:gargoyle:gazer", }, "3"),
                            (0x400AAFC9, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFCA, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFCB, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFCC, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFCD, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFCE, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFCF, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFD0, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFD1, new string[]{ "airelemental","ettin:harpy:orc", }, "1, 8, 0, 0, 0, 0"),
                            (0x400AAFD2, new string[]{ "earthelemental:ratman", }, "4"),
                            (0x400AAFD3, new string[]{ "earthelemental:ratman", }, "4"),
                            (0x400AAFD4, new string[]{ "earthelemental:ratman", }, "4"),
                            (0x400AAFD5, new string[]{ "ghoul:lich:lichlord","skeleton:zombie", }, "3, 5, 0, 0, 0, 0"),
                            (0x400AAFD6, new string[]{ "ghoul:lich:lichlord","skeleton:zombie", }, "3, 5, 0, 0, 0, 0"),
                            (0x400AAFD7, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400AAFD8, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400AAFD9, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400AAFDA, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400AAFDB, new string[]{ "gargoyle:gazer", }, "4"),
                            (0x400AAFDC, new string[]{ "troll", }, "3"),
                            (0x400AAFDE, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400AAFDF, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400AAFE0, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400AAFE1, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400AAFE2, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400AAFE3, new string[]{ "alligator:lizardman:silverserpent:snake","wisp", }, "8, 2, 0, 0, 0, 0"),
                            (0x400AAFE4, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400AAFE5, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400AAFE6, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400AAFE7, new string[]{ "airelemental:gargoyle", }, "2"),
                            (0x400AAFE8, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400AAFE9, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400AAFEA, new string[]{ "lizardman:ratman", }, "8"),
                            (0x400AAFEB, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFEC, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFED, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFEE, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFEF, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFF0, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFF1, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFF2, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFF3, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFF4, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFF5, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AAFF6, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFF7, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFF8, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFF9, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFFA, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFFB, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFFC, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFFD, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFFE, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AAFFF, new string[]{ "ettin:lizardman:ogre:orc:troll", }, "5"),
                            (0x400AB000, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB001, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB002, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB003, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB004, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB005, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB006, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB007, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB008, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB009, new string[]{ "ettin:headlessone:lizardman:ogre:orc:troll:waterelemental","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB00A, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB00B, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB00C, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB00D, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB00E, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB00F, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB010, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB011, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB012, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB013, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB014, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB015, new string[]{ "airelemental:ettin:orc", }, "3"),
                            (0x400AB016, new string[]{ "ettin:gargoyle:gazer:orc:troll", }, "5"),
                            (0x400AB017, new string[]{ "ettin:gargoyle:gazer:orc:troll", }, "5"),
                            (0x400AB018, new string[]{ "ettin:gargoyle:gazer:orc:troll", }, "5"),
                            (0x400AB019, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB01A, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB01C, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB01D, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB01E, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB01F, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB020, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB021, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB022, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB023, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB024, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB025, new string[]{ "ettin:troll", }, "2"),
                            (0x400AB026, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400AB027, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400AB028, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400AB02B, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400AB02C, new string[]{ "airelemental:waterelemental","direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:skeleton:troll", }, "2, 11, 0, 0, 0, 0"),
                            (0x400AB02D, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB02E, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB02F, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB030, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB031, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB033, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB034, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB035, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB036, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB037, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB038, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB039, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB03A, new string[]{ "giantspider:scorpion", }, "2"),
                            (0x400AB03B, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB03C, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB03D, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB03E, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB03F, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB040, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB041, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB042, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB043, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB044, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB045, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB046, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB047, new string[]{ "corpser:direwolf:ettin:ogre:reaper:skeleton:zombie", }, "7"),
                            (0x400AB048, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB049, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB04B, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB04C, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB04D, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB04E, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB04F, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB050, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB051, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB052, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB053, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB054, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB055, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB056, new string[]{ "harpy:lizardman:orc:ratman:troll", }, "5"),
                            (0x400AB057, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB058, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB059, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB05A, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB05B, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB05D, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB05E, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB05F, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB060, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB061, new string[]{ "ettin:mongbat:orc:ratman:troll", }, "5"),
                            (0x400AB063, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB065, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB066, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB068, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB06B, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB06C, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB06E, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB071, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB076, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB078, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB079, new string[]{ "alligator:giantserpent:lizardman:ratman:slime:snake", }, "6"),
                            (0x400AB07D, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB07F, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB080, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB082, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB083, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB084, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB085, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB086, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB087, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB088, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB089, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB08B, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB08C, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB08E, new string[]{ "ettin:ghoul:ogre:orc","wisp", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB08F, new string[]{ "corpser:direwolf:ettin:harpy:lizardman:orc:ratman:reaper", }, "8"),
                            (0x400AB090, new string[]{ "corpser:direwolf:ettin:harpy:lizardman:orc:ratman:reaper", }, "8"),
                            (0x400AB091, new string[]{ "corpser:direwolf:ettin:harpy:lizardman:orc:ratman:reaper", }, "8"),
                            (0x400AB092, new string[]{ "ettin:giantspider:harpy:lizardman:ogre:orc:skeleton:spectre:troll", }, "9"),
                            (0x400AB093, new string[]{ "ettin:giantspider:harpy:lizardman:ogre:orc:skeleton:spectre:troll", }, "9"),
                            (0x400AB094, new string[]{ "ettin:giantspider:harpy:lizardman:ogre:orc:skeleton:spectre:troll", }, "9"),
                            (0x400AB095, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB096, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB097, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB098, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB099, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB09A, new string[]{ "ghoul:giantspider:headlessone:lizardman:orc:ratman:zombie","wisp", }, "7, 1, 0, 0, 0, 0"),
                            (0x400AB09B, new string[]{ "giantspider:orc:ratman:spectre:zombie", }, "5"),
                            (0x400AB09C, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400AB09D, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400AB0A3, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400AB0A4, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400AB0A5, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400AB0A6, new string[]{ "ettin:gazer:harpy:headlessone:ogre:troll", }, "6"),
                            (0x400AB0A7, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400AB0A8, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400AB0A9, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400AB0AA, new string[]{ "airelemental:waterelemental","corpser:Direwolf:ettin:gargoyle:gazer:harpy:lizardman:orc:ratman:reaper", }, "2, 10, 0, 0, 0, 0"),
                            (0x400AB0AB, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400AB0AC, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400AB0AD, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400AB0AE, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400AB0AF, new string[]{ "corpser:direwolf:harpy:reaper:skeleton", }, "5"),
                            (0x400AB0B0, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B1, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B2, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B3, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B4, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B5, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B6, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B7, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B8, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0B9, new string[]{ "airelemental:waterelemental","corpser:direwolf:ettin:gargoyle:gazer:harpy:orc:reaper:troll", }, "2, 9, 0, 0, 0, 0"),
                            (0x400AB0BA, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0BB, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0BC, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0BD, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0C0, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0C1, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0C3, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0C4, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0C6, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0C7, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "8"),
                            (0x400AB0C8, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0C9, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0CA, new string[]{ "polarbear:snowleopard:walrus:whitewolf", }, "4"),
                            (0x400AB0CB, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400AB0CC, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400AB0CD, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400AB0CE, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400AB0CF, new string[]{ "alligator:giantserpent:lizardman:mongbat:ratman:silverserpent:snake", }, "7"),
                            (0x400AB0D0, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D1, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D2, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D3, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D4, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D5, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D6, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D7, new string[]{ "ettin:ghoul:headlessone:ogre:orc:orcishmage:skeleton:troll", }, "8"),
                            (0x400AB0D8, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0DA, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0DB, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0DC, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0DD, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0DE, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0DF, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E0, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E1, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E2, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E3, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E4, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E5, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E6, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E7, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E8, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0E9, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0EA, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0EB, new string[]{ "corpser:ettin:ghoul:giantspider:lizardman:ogre:orc:reaper:skeleton:troll:zombie","wisp", }, "11, 1, 0, 0, 0, 0"),
                            (0x400AB0EC, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400AB0ED, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400AB0EE, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400AB0EF, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400AB0F0, new string[]{ "airelemental:ettin:gargoyle:gazer:orc:troll:waterelemental", }, "7"),
                            (0x400AB0F1, new string[]{ "timberwolf", }, "7"),
                            (0x400AB0F2, new string[]{ "timberwolf", }, "7"),
                            (0x400AB0F3, new string[]{ "timberwolf", }, "7"),
                            (0x400AB0F4, new string[]{ "timberwolf", }, "7"),
                            (0x400AB0F5, new string[]{ "timberwolf", }, "7"),
                            (0x400AB0F6, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400AB0F7, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400AB0F8, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400AB0F9, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400AB0FA, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400AB0FB, new string[]{ "greathart","hind", }, "2, 5, 0, 0, 0, 0"),
                            (0x400AB0FC, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400AB0FD, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400AB0FE, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400AB0FF, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400AB100, new string[]{ "ettin:harpy:headlessone:lizardman:ogre:orc:skeleton:troll:zombie","wisp", }, "9, 1, 0, 0, 0, 0"),
                            (0x400AB101, new string[]{ "ettin:ogre:orc:ratman:skeleton:spectre:zombie", }, "7"),
                            (0x400AB102, new string[]{ "ettin:ogre:orc:ratman:skeleton:spectre:zombie", }, "7"),
                            (0x400AB103, new string[]{ "ettin:gargoyle:gazer:ogre:orc:troll:waterelemental", }, "7"),
                            (0x400AB104, new string[]{ "ettin:gargoyle:gazer:ogre:orc:troll:waterelemental", }, "7"),
                            (0x400AB105, new string[]{ "ettin:gargoyle:gazer:ogre:orc:troll:waterelemental", }, "7"),
                            (0x400AB107, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB108, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB109, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB10A, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB10B, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB10C, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB10D, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB10E, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB10F, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB110, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB111, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB112, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB113, new string[]{ "mongbat","orc", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB114, new string[]{ "orc:ratman", }, "6"),
                            (0x400AB115, new string[]{ "orc:ratman", }, "6"),
                            (0x400AB116, new string[]{ "orc:ratman", }, "6"),
                            (0x400AB117, new string[]{ "orc:ratman", }, "6"),
                            (0x400AB118, new string[]{ "orc:ratman", }, "6"),
                            (0x400AB119, new string[]{ "orc:ratman", }, "6"),
                            (0x400AB11A, new string[]{ "Orc","Orcishlord","Orcishmage", }, "1, 3, 2, 5, 3, 2"),
                            (0x400AB11B, new string[]{ "Orc","Orcishlord","Orcishmage", }, "1, 3, 2, 5, 3, 2"),
                            (0x400AB11C, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400AB11E, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400AB11F, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400AB120, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400AB121, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400AB123, new string[]{ "orc","ettin","ratman","giantspider","reaper", }, "10, 10, 10, 10, 10, 0"),
                            (0x400AB124, new string[]{ "Daemon", }, "4"),
                            (0x400AB125, new string[]{ "Imp", }, "4"),
                            (0x400AB126, new string[]{ "Imp", }, "4"),
                            (0x400AB128, new string[]{ "Imp", }, "4"),
                            (0x400AB129, new string[]{ "Imp", }, "4"),
                            (0x400AB12A, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "5, 5, 5, 5, 5, 5"),
                            (0x400AB12B, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400AB12C, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400AB12D, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400AB12E, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400AB12F, new string[]{ "orc","giantspider","giantserpent","gorilla","tropicalbird","whippingvine", }, "10, 10, 10, 10, 10, 10"),
                            (0x400AB130, new string[]{ "Headlessone","Orc","Orccaptain","Orcishlord","Orcishmage", }, "3, 6, 1, 2, 1, 0"),
                            (0x400AB131, new string[]{ "Savage","Savagerider","Savageshaman", }, "2, 1, 1, 0, 0, 0"),
                            (0x400AB132, new string[]{ "Savage","Savagerider","Savageshaman", }, "2, 1, 1, 0, 0, 0"),
                            (0x400AB133, new string[]{ "Brigand", }, "7"),
                            (0x400AB134, new string[]{ "Lich", }, "8"),
                            (0x400AB135, new string[]{ "Orc","Orcishlord","Orcishmage", }, "3, 1, 1, 0, 0, 0"),
                            (0x400AB136, new string[]{ "Orc","Orcishlord","Orcishmage", }, "3, 1, 1, 0, 0, 0"),
                            (0x400AB138, new string[]{ "orc","orcBomber","OrcCaptain","OrcishLord","OrcishMage", }, "8, 1, 1, 2, 2, 0"),
                            (0x400AB139, new string[]{ "Skeleton", }, "2"),
                            (0x400AB13A, new string[]{ "Wraith:Shade:Spectre","Ghoul", }, "4, 4, 0, 0, 0, 0"),
                            (0x400AB13B, new string[]{ "Wraith:Shade:Spectre", }, "1"),
                            (0x400AB13C, new string[]{ "Wraith:Shade:Spectre", }, "1"),
                            (0x400AB13D, new string[]{ "Lich", }, "1"),
                            (0x400AB13E, new string[]{ "Daemon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB13F, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB140, new string[]{ "Daemon", }, "3"),
                            (0x400AB142, new string[]{ "Dragon","Drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB144, new string[]{ "Wisp", }, "8"),
                            (0x400AB145, new string[]{ "Ghoul","Giantrat","Giantserpent","Headlessone","Jwilson", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB146, new string[]{ "Iceserpent","Icesnake","Polarbear","Snowleopard","Whitewolf","Frostooze", }, "1, 1, 1, 1, 1, 1"),
                            (0x400AB147, new string[]{ "Frostspider","Frosttroll", }, "1, 4, 0, 0, 0, 0"),
                            (0x400AB148, new string[]{ "Brownbear:Grizzlybear:Blackbear","Direwolf:Timberwolf:Greywolf","Rabbit:JackRabbit","Cougar:Panther","Bird:Eagle", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB14A, new string[]{ "Alligator","Bullfrog","Corpser","Swamptentacle", }, "2, 3, 1, 1, 0, 0"),
                            (0x400AB14B, new string[]{ "Giantserpent","Giantspider","Boar","Greathart","Hind","Llama", }, "1, 1, 1, 1, 1, 1"),
                            (0x400AB14C, new string[]{ "Horse","Rat", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB14D, new string[]{ "Brownbear:Grizzlybear:Blackbear","Direwolf:Timberwolf:Greywolf","Cougar:Panther","Giantserpent","Greathart", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB14E, new string[]{ "Alligator","Bullfrog","Gorilla","Giantserpent","Gianttoad", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB14F, new string[]{ "Mummy","Ophidianwarrior","Scorpion","Giantserpent", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB150, new string[]{ "Rottingcorpse","Skeleton","Slime","Snake","Strongmongbat", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB151, new string[]{ "Ghoul","Giantserpent","Headlessone","Jwilson","Zombie", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB152, new string[]{ "Cat","Chicken","Dog","Pig","Sheep", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB153, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB154, new string[]{ "Orccamp", }, "1"),
                            (0x400AB155, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB156, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB157, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB158, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB159, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB15A, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB15C, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB15E, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB165, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB167, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB168, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB169, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB16A, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB16C, new string[]{ "OrcCamp:RatCamp:LizardmanCamp", }, "1"),
                            (0x400AB16D, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB16E, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB16F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB170, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB171, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB172, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB174, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB178, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB179, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB17A, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB17F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB180, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB181, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB182, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB183, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB184, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB185, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB186, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB187, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB188, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB189, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB18A, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB18B, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB18C, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB18D, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB18E, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB18F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB190, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB191, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB192, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB193, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB194, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB195, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB196, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB197, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB198, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB199, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB19A, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB19B, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB19E, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB19F, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A0, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A2, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A3, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A4, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A5, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A6, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A7, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A8, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1A9, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1AA, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1AB, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1AC, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1AD, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1AE, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1AF, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1B0, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1B1, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1B2, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1B3, new string[]{ "BlackPearl:Bloodmoss:SpidersSilk:SulfurousAsh:Garlic:Ginseng:Nightshade:MandrakeRoot", }, "160"),
                            (0x400AB1B4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1B5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1B6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1B7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1B8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1B9, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1BA, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1BB, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1BD, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1BE, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1BF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C0, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1C8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1DD, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1DE, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1DF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E0, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E3, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1E9, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1EA, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1EB, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1EC, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1ED, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1EE, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1EF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F0, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F1, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F2, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F3, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F4, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F5, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F6, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F7, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F8, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1F9, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","kraken", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1FA, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1FB, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1FC, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1FD, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB1FF, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB200, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB201, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB202, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB203, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB204, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB205, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB206, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB207, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB209, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB20A, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB20B, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB20D, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB20E, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB20F, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB210, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB211, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "15, 6, 1, 0, 0, 0"),
                            (0x400AB212, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "13, 4, 1, 0, 0, 0"),
                            (0x400AB214, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "13, 4, 1, 0, 0, 0"),
                            (0x400AB215, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "13, 4, 1, 0, 0, 0"),
                            (0x400AB216, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "13, 4, 1, 0, 0, 0"),
                            (0x400AB217, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB218, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB219, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB21A, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB21B, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB21C, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB21D, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB21E, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB21F, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB220, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB221, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB222, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB223, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB225, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB226, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB228, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB229, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB22A, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB22B, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB22C, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB22D, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB22E, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB22F, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB230, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB231, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB232, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB233, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB234, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB235, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB237, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB238, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB239, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB23A, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB23B, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB23D, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB23E, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB242, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB244, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB245, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","waterelemental", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB246, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","dolphin", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB247, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","deepseaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB248, new string[]{ "DeepSeaSerpent:SeaSerpent:WaterElemental:Kraken","Dolphin","seaserpent", }, "10, 2, 1, 0, 0, 0"),
                            (0x400AB249, new string[]{ "Earthelemental","Scorpion", }, "4, 2, 0, 0, 0, 0"),
                            (0x400AB24A, new string[]{ "Earthelemental","Scorpion", }, "7, 3, 0, 0, 0, 0"),
                            (0x400AB24B, new string[]{ "Earthelemental","Scorpion", }, "4, 1, 0, 0, 0, 0"),
                            (0x400AB24C, new string[]{ "Earthelemental", }, "4"),
                            (0x400AB24D, new string[]{ "Earthelemental", }, "4"),
                            (0x400AB24E, new string[]{ "Earthelemental","Scorpion", }, "4, 2, 0, 0, 0, 0"),
                            (0x400AB24F, new string[]{ "Earthelemental","Scorpion", }, "6, 20, 0, 0, 0, 0"),
                            (0x400AB250, new string[]{ "Airelemental", }, "3"),
                            (0x400AB252, new string[]{ "Dullcopperelemental", }, "6"),
                            (0x400AB253, new string[]{ "Airelemental", }, "3"),
                            (0x400AB254, new string[]{ "Airelemental","Waterelemental", }, "3, 2, 0, 0, 0, 0"),
                            (0x400AB255, new string[]{ "Kraken","Waterelemental", }, "1, 3, 0, 0, 0, 0"),
                            (0x400AB256, new string[]{ "Kraken","Seaserpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB257, new string[]{ "Dullcopperelemental", }, "2"),
                            (0x400AB258, new string[]{ "Dullcopperelemental", }, "4"),
                            (0x400AB259, new string[]{ "Earthelemental", }, "2"),
                            (0x400AB25A, new string[]{ "Fireelemental","Poisonelemental", }, "1, 4, 0, 0, 0, 0"),
                            (0x400AB25B, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB25C, new string[]{ "Evilmage","Evilmagelord", }, "5, 5, 0, 0, 0, 0"),
                            (0x400AB25D, new string[]{ "Airelemental","Earthelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AB25E, new string[]{ "Fireelemental","Poisonelemental","Scorpion", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB25F, new string[]{ "Airelemental","Earthelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AB260, new string[]{ "Fireelemental","Poisonelemental","Scorpion", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB261, new string[]{ "Airelemental", }, "2"),
                            (0x400AB262, new string[]{ "Eldergazer", }, "2"),
                            (0x400AB263, new string[]{ "Dullcopperelemental","Fireelemental", }, "4, 2, 0, 0, 0, 0"),
                            (0x400AB264, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "2, 2, 3, 0, 0, 0"),
                            (0x400AB265, new string[]{ "Evilmage","Evilmagelord", }, "5, 5, 0, 0, 0, 0"),
                            (0x400AB267, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB269, new string[]{ "Earthelemental","Scorpion", }, "4, 2, 0, 0, 0, 0"),
                            (0x400AB26A, new string[]{ "Earthelemental","Fireelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AB26B, new string[]{ "Airelemental", }, "2"),
                            (0x400AB26C, new string[]{ "Fireelemental", }, "2"),
                            (0x400AB26D, new string[]{ "Airelemental", }, "2"),
                            (0x400AB26E, new string[]{ "Kraken","Seaserpent", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB26F, new string[]{ "Evilmage","Evilmagelord", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB270, new string[]{ "Eldergazer", }, "2"),
                            (0x400AB271, new string[]{ "Airelemental", }, "5"),
                            (0x400AB272, new string[]{ "Bloodelemental", }, "8"),
                            (0x400AB273, new string[]{ "Fireelemental", }, "2"),
                            (0x400AB274, new string[]{ "Earthelemental", }, "4"),
                            (0x400AB275, new string[]{ "Bloodelemental", }, "2"),
                            (0x400AB276, new string[]{ "Earthelemental","Fireelemental", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AB277, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB278, new string[]{ "Kraken","Seaserpent","Waterelemental", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB279, new string[]{ "Kraken","Waterelemental", }, "1, 3, 0, 0, 0, 0"),
                            (0x400AB27A, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400AB27C, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB27D, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB27E, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB280, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB281, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400AB283, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400AB284, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400AB285, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB286, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400AB287, new string[]{ "Antlion", }, "1"),
                            (0x400AB288, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400AB289, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB28A, new string[]{ "Blacksolenworker","Blacksolenqueen", }, "2, 1, 0, 0, 0, 0"),
                            (0x400AB28B, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400AB28C, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400AB28D, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400AB28E, new string[]{ "Beetle", }, "2"),
                            (0x400AB28F, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400AB290, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB291, new string[]{ "Antlion", }, "1"),
                            (0x400AB292, new string[]{ "Dreadspider", }, "2"),
                            (0x400AB293, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400AB294, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400AB295, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400AB296, new string[]{ "Blacksolenwarrior", }, "1"),
                            (0x400AB297, new string[]{ "Blacksolenqueen","Blacksolenworker", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB298, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB299, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB29A, new string[]{ "Blacksolenworker", }, "1"),
                            (0x400AB29B, new string[]{ "Blacksolenworker", }, "3"),
                            (0x400AB29C, new string[]{ "Beetle", }, "2"),
                            (0x400AB29D, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400AB29E, new string[]{ "Antlion", }, "1"),
                            (0x400AB29F, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400AB2A1, new string[]{ "Blacksolenwarrior", }, "2"),
                            (0x400AB2A2, new string[]{ "Blacksolenworker", }, "2"),
                            (0x400AB2A3, new string[]{ "Antlion", }, "3"),
                            (0x400AB2A4, new string[]{ "Antlion", }, "1"),
                            (0x400AB2A5, new string[]{ "redsoleninfiltratorqueen","redsoleninfiltratorwarrior", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB2A7, new string[]{ "redsoleninfiltratorqueen","redsoleninfiltratorwarrior", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB2A9, new string[]{ "redsoleninfiltratorqueen","redsoleninfiltratorwarrior", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB2AA, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2AB, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2AC, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2AD, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2AE, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2AF, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2B0, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2B1, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2B2, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2B4, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2B6, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2B7, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2B8, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2B9, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2BA, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2BB, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2BC, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2BE, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2BF, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2C0, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2C1, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2C2, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2C3, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2C4, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2C5, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2C6, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2C7, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2C8, new string[]{ "Balron","Dragon","Drake","Nightmare", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2C9, new string[]{ "Ophidianarchmage","Ophidianknight","Ophidianmage","Ophidianwarrior","Ophidianmatriarch", }, "1, 1, 1, 1, 1, 0"),
                            (0x400AB2CA, new string[]{ "Terathanavenger","Terathandrone","Terathanmatriarch","Terathanwarrior", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB2CB, new string[]{ "dragon","drake", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB2CC, new string[]{ "lichlord","lich", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB2CD, new string[]{ "daemon", }, "3"),
                            (0x400AB2CE, new string[]{ "Bird","Cat","Dog","Rat", }, "15, 15, 15, 15, 0, 0"),
                            (0x400AB2CF, new string[]{ "Cow", }, "7"),
                            (0x400AB2D0, new string[]{ "Cow", }, "7"),
                            (0x400AB2D1, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400AB2D2, new string[]{ "Chicken", }, "5"),
                            (0x400AB2D4, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400AB2E0, new string[]{ "Chicken", }, "5"),
                            (0x400AB2E1, new string[]{ "Bird","Cat","Dog","Rat", }, "7, 7, 7, 7, 0, 0"),
                            (0x400AB2E4, new string[]{ "Chicken", }, "5"),
                            (0x400AB2E6, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400AB2E7, new string[]{ "Bird","Cat","Dog","Rat", }, "8, 8, 8, 8, 0, 0"),
                            (0x400AB2E8, new string[]{ "Chicken:Sheep:Cow", }, "3"),
                            (0x400AB2EA, new string[]{ "Chicken:Sheep:Cow", }, "3"),
                            (0x400AB2EB, new string[]{ "Chicken:Sheep:Cow", }, "3"),
                            (0x400AB2ED, new string[]{ "Bird","Cat","Dog","Rat", }, "20, 20, 20, 20, 0, 0"),
                            (0x400AB2EE, new string[]{ "Sheep", }, "15"),
                            (0x400AB2F1, new string[]{ "Sheep", }, "15"),
                            (0x400AB2F2, new string[]{ "Sheep", }, "15"),
                            (0x400AB2F3, new string[]{ "Chicken", }, "2"),
                            (0x400AB2F4, new string[]{ "Chicken", }, "2"),
                            (0x400AB2F5, new string[]{ "Chicken", }, "2"),
                            (0x400AB2F6, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400AB2F7, new string[]{ "Chicken", }, "1"),
                            (0x400AB2F8, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400AB2F9, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400AB2FA, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400AB2FB, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400AB2FC, new string[]{ "Bird","Cat","Dog","Rat", }, "3, 3, 3, 3, 0, 0"),
                            (0x400AB2FD, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400AB2FE, new string[]{ "Chicken:Cow:Sheep", }, "5"),
                            (0x400AB2FF, new string[]{ "Chicken:Cow:Sheep", }, "5"),
                            (0x400AB300, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400AB301, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400AB302, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400AB304, new string[]{ "Bird","Cat","Dog","Rat", }, "10, 10, 10, 10, 0, 0"),
                            (0x400AB308, new string[]{ "Chicken", }, "10"),
                            (0x400AB30B, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400AB30E, new string[]{ "Bird","Cat","Dog","Rat", }, "6, 6, 6, 6, 0, 0"),
                            (0x400AB30F, new string[]{ "Bird","Cat","Dog","Rat", }, "6, 6, 6, 6, 0, 0"),
                            (0x400AB310, new string[]{ "Bird","Cat","Dog","Rat", }, "5, 5, 5, 5, 0, 0"),
                            (0x400AB311, new string[]{ "Bird","Cat","Dog","Rat", }, "4, 4, 4, 4, 0, 0"),
                            (0x400AB312, new string[]{ "Bird","Cat","Dog","Rat", }, "18, 18, 18, 18, 0, 0"),
                            (0x400AB313, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400AB314, new string[]{ "Chicken:Cow:Sheep", }, "5"),
                            (0x400AB317, new string[]{ "Chicken", }, "2"),
                            (0x400AB318, new string[]{ "Chicken", }, "1"),
                            (0x400AB319, new string[]{ "bird", }, "3"),
                            (0x400AB31B, new string[]{ "bird", }, "5"),
                            (0x400AB31C, new string[]{ "bird", }, "3"),
                            (0x400AB31D, new string[]{ "bird", }, "5"),
                            (0x400AB31E, new string[]{ "bird", }, "3"),
                            (0x400AB31F, new string[]{ "bird", }, "5"),
                            (0x400AB320, new string[]{ "Bird", }, "10"),
                            (0x400AB321, new string[]{ "Bird","Cat","Dog","Rat", }, "12, 12, 12, 12, 0, 0"),
                            (0x400AB322, new string[]{ "Bird","Cat","Dog","Rat", }, "6, 6, 6, 6, 0, 0"),
                            (0x400AB323, new string[]{ "Chicken:Sheep:Cow:Bull", }, "5"),
                            (0x400AB324, new string[]{ "Orderguard", }, "1"),
                            (0x400AB325, new string[]{ "Orderguard", }, "1"),
                            (0x400AB326, new string[]{ "Chaosguard", }, "1"),
                            (0x400AB327, new string[]{ "Chaosguard", }, "1"),
                            (0x400AB328, new string[]{ "Towncrier", }, "1"),
                            (0x400AB329, new string[]{ "Towncrier", }, "1"),
                            (0x400AB32A, new string[]{ "Towncrier", }, "1"),
                            (0x400AB32B, new string[]{ "Towncrier", }, "1"),
                            (0x400AB32C, new string[]{ "Towncrier", }, "1"),
                            (0x400AB32D, new string[]{ "Towncrier", }, "1"),
                            (0x400AB32E, new string[]{ "Towncrier", }, "1"),
                            (0x400AB330, new string[]{ "Towncrier", }, "1"),
                            (0x400AB331, new string[]{ "Towncrier", }, "1"),
                            (0x400AB332, new string[]{ "Towncrier", }, "1"),
                            (0x400AB333, new string[]{ "Towncrier", }, "1"),
                            (0x400AB334, new string[]{ "Towncrier", }, "1"),
                            (0x400AB335, new string[]{ "Towncrier", }, "1"),
                            (0x400AB336, new string[]{ "Towncrier", }, "1"),
                            (0x400AB338, new string[]{ "Towncrier", }, "1"),
                            (0x400AB339, new string[]{ "Towncrier", }, "1"),
                            (0x400AB33A, new string[]{ "Towncrier", }, "1"),
                            (0x400AB33B, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB33C, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB33D, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB33E, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB33F, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB341, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB342, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB343, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB344, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB345, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB346, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB347, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB349, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB34A, new string[]{ "Escortablemage:Seekerofadventure:Noble", }, "3"),
                            (0x400AB34C, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400AB34D, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400AB34E, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400AB34F, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400AB351, new string[]{ "Dreadspider","Fireelemental","Hellcat","Lavalizard","Lavasnake", }, "2, 1, 1, 1, 1, 0"),
                            (0x400AB352, new string[]{ "Herbalist","Mage", }, "2, 2, 0, 0, 0, 0"),
                            (0x400AB353, new string[]{ "jeweler", }, "1"),
                            (0x400AB355, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB357, new string[]{ "bowyer", }, "1"),
                            (0x400AB358, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB359, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB35A, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB35B, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB35C, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB35D, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB35E, new string[]{ "innkeeper", }, "1"),
                            (0x400AB360, new string[]{ "tinkerguildmaster", }, "1"),
                            (0x400AB361, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB363, new string[]{ "warriorguildmaster","hirefighter", }, "1, 2, 0, 0, 0, 0"),
                            (0x400AB364, new string[]{ "innkeeper", }, "1"),
                            (0x400AB365, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB366, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB367, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB368, new string[]{ "fisherman", }, "1"),
                            (0x400AB369, new string[]{ "scribe", }, "1"),
                            (0x400AB36A, new string[]{ "blacksmithguildmaster","blacksmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB36B, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB36C, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB36D, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB36E, new string[]{ "butcher", }, "1"),
                            (0x400AB36F, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB370, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB371, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB372, new string[]{ "scribe", }, "1"),
                            (0x400AB373, new string[]{ "jeweler", }, "1"),
                            (0x400AB374, new string[]{ "baker", }, "1"),
                            (0x400AB375, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB376, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB377, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB378, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB379, new string[]{ "bard","bardguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB37A, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB37B, new string[]{ "minerguildmaster", }, "1"),
                            (0x400AB37C, new string[]{ "innkeeper", }, "1"),
                            (0x400AB37D, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB37E, new string[]{ "mage", }, "1"),
                            (0x400AB37F, new string[]{ "towncrier", }, "1"),
                            (0x400AB380, new string[]{ "orderguard","hirefighter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB381, new string[]{ "farmer","rancher", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB382, new string[]{ "escortablemage", }, "1"),
                            (0x400AB383, new string[]{ "orderguard", }, "1"),
                            (0x400AB384, new string[]{ "hirefighter", }, "3"),
                            (0x400AB385, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB386, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB387, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB388, new string[]{ "innkeeper", }, "1"),
                            (0x400AB389, new string[]{ "thiefguildmaster", }, "1"),
                            (0x400AB38A, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB38B, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB38C, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB38D, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB38E, new string[]{ "fisherman", }, "1"),
                            (0x400AB38F, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB390, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB391, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB392, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB393, new string[]{ "fisherman", }, "1"),
                            (0x400AB394, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB396, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB397, new string[]{ "fisherman", }, "1"),
                            (0x400AB398, new string[]{ "fisherman", }, "1"),
                            (0x400AB399, new string[]{ "fisherman", }, "1"),
                            (0x400AB39A, new string[]{ "jeweler", }, "1"),
                            (0x400AB39B, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB39C, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB39E, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB39F, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3A0, new string[]{ "baker", }, "1"),
                            (0x400AB3A1, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3A2, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3A3, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3A4, new string[]{ "butcher", }, "1"),
                            (0x400AB3A6, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3A7, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3A8, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3A9, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB3AA, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3AB, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3AC, new string[]{ "fisherman", }, "1"),
                            (0x400AB3AD, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3AE, new string[]{ "scribe", }, "1"),
                            (0x400AB3AF, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3B0, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3B1, new string[]{ "innkeeper", }, "1"),
                            (0x400AB3B2, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3B3, new string[]{ "fisherguildmaster", }, "1"),
                            (0x400AB3B4, new string[]{ "innkeeper", }, "1"),
                            (0x400AB3B5, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3B6, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3B7, new string[]{ "baker", }, "1"),
                            (0x400AB3B8, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3B9, new string[]{ "baker", }, "1"),
                            (0x400AB3BA, new string[]{ "jeweler", }, "1"),
                            (0x400AB3BB, new string[]{ "fisherguildmaster", }, "1"),
                            (0x400AB3BC, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3BD, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB3BF, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3C0, new string[]{ "fisherman", }, "1"),
                            (0x400AB3C1, new string[]{ "minerguildmaster", }, "1"),
                            (0x400AB3C2, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3C3, new string[]{ "provisioner", }, "1"),
                            (0x400AB3C5, new string[]{ "cobbler", }, "1"),
                            (0x400AB3C6, new string[]{ "butcher", }, "1"),
                            (0x400AB3C7, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB3C8, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3CA, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3CB, new string[]{ "architect", }, "1"),
                            (0x400AB3CC, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3CD, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3CF, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB3D0, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3D1, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3D2, new string[]{ "minerguildmaster", }, "1"),
                            (0x400AB3D3, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3D4, new string[]{ "minerguildmaster", }, "1"),
                            (0x400AB3D5, new string[]{ "bard","bardguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3D6, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400AB3D7, new string[]{ "carpenter","realestatebroker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3D8, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3D9, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3DA, new string[]{ "innkeeper", }, "1"),
                            (0x400AB3DB, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3DC, new string[]{ "mageguildmaster", }, "1"),
                            (0x400AB3DE, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3DF, new string[]{ "butcher", }, "1"),
                            (0x400AB3E0, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3E1, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3E2, new string[]{ "baker", }, "1"),
                            (0x400AB3E3, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3E4, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3E5, new string[]{ "fisherman", }, "1"),
                            (0x400AB3E6, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3E7, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3E8, new string[]{ "innkeeper", }, "1"),
                            (0x400AB3E9, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3EA, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3EB, new string[]{ "innkeeper", }, "1"),
                            (0x400AB3EC, new string[]{ "shipwright","mapmaker", }, "1, 1"),
                            (0x400AB3ED, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB3EE, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3EF, new string[]{ "tanner", }, "1"),
                            (0x400AB3F1, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3F2, new string[]{ "bardguildmaster", }, "1"),
                            (0x400AB3F3, new string[]{ "jeweler", }, "1"),
                            (0x400AB3F4, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB3F5, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB3F7, new string[]{ "bowyer", }, "1"),
                            (0x400AB3F9, new string[]{ "butcher", }, "1"),
                            (0x400AB3FA, new string[]{ "furtrader", }, "1"),
                            (0x400AB3FB, new string[]{ "fisherman", }, "1"),
                            (0x400AB3FC, new string[]{ "scribe", }, "1"),
                            (0x400AB3FD, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3FE, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB3FF, new string[]{ "butcher", }, "1"),
                            (0x400AB400, new string[]{ "innkeeper", }, "1"),
                            (0x400AB401, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB402, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB403, new string[]{ "bardguildmaster", }, "1"),
                            (0x400AB404, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB405, new string[]{ "innkeeper", }, "1"),
                            (0x400AB406, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB407, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB408, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB409, new string[]{ "baker", }, "1"),
                            (0x400AB40A, new string[]{ "baker", }, "1"),
                            (0x400AB40B, new string[]{ "butcher", }, "1"),
                            (0x400AB40D, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400AB40E, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB410, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB411, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB413, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB414, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB415, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB416, new string[]{ "bowyer", }, "1"),
                            (0x400AB417, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB418, new string[]{ "fisherman", }, "1"),
                            (0x400AB419, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB41A, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB41C, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400AB41D, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB41E, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB41F, new string[]{ "innkeeper", }, "1"),
                            (0x400AB420, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB421, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB423, new string[]{ "fisherman", }, "1"),
                            (0x400AB424, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB425, new string[]{ "rangerguildmaster", }, "1"),
                            (0x400AB426, new string[]{ "innkeeper", }, "1"),
                            (0x400AB427, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB428, new string[]{ "fisherman", }, "1"),
                            (0x400AB429, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB42A, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB42B, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB42C, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB42E, new string[]{ "bowyer", }, "1"),
                            (0x400AB42F, new string[]{ "butcher", }, "1"),
                            (0x400AB430, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB431, new string[]{ "innkeeper", }, "1"),
                            (0x400AB433, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB434, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB435, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB436, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB437, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB438, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB439, new string[]{ "scribe", }, "1"),
                            (0x400AB43A, new string[]{ "jeweler", }, "1"),
                            (0x400AB43B, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB43C, new string[]{ "innkeeper", }, "1"),
                            (0x400AB43D, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB43E, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB43F, new string[]{ "tinkerguildmaster", }, "1"),
                            (0x400AB440, new string[]{ "butcher", }, "1"),
                            (0x400AB441, new string[]{ "fisherman", }, "1"),
                            (0x400AB442, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB443, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB444, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB445, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB447, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400AB448, new string[]{ "innkeeper", }, "1"),
                            (0x400AB449, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB44A, new string[]{ "baker", }, "1"),
                            (0x400AB44B, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB44C, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB44D, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400AB44E, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB44F, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB450, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB451, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB452, new string[]{ "minerguildmaster", }, "1"),
                            (0x400AB453, new string[]{ "bowyer", }, "1"),
                            (0x400AB454, new string[]{ "jeweler", }, "1"),
                            (0x400AB456, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB457, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB458, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB459, new string[]{ "baker", }, "1"),
                            (0x400AB45A, new string[]{ "fisherman", }, "1"),
                            (0x400AB45B, new string[]{ "innkeeper", }, "1"),
                            (0x400AB45C, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB45D, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB45E, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB460, new string[]{ "beekeeper", }, "1"),
                            (0x400AB461, new string[]{ "butcher", }, "1"),
                            (0x400AB462, new string[]{ "warriorguildmaster", }, "1"),
                            (0x400AB464, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB465, new string[]{ "fisherguildmaster", }, "1"),
                            (0x400AB466, new string[]{ "butcher","farmer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB468, new string[]{ "tinker","tinkerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB469, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB46B, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB46C, new string[]{ "innkeeper", }, "1"),
                            (0x400AB46E, new string[]{ "armorer","weaponsmith", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB470, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB473, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB474, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB477, new string[]{ "tavernkeeper","waiter","cook","barkeeper", }, "1, 1, 1, 1, 0, 0"),
                            (0x400AB479, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB47A, new string[]{ "scribe", }, "1"),
                            (0x400AB47B, new string[]{ "innkeeper", }, "1"),
                            (0x400AB47C, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB47D, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB47E, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB47F, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB480, new string[]{ "innkeeper", }, "1"),
                            (0x400AB481, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB482, new string[]{ "innkeeper", }, "1"),
                            (0x400AB485, new string[]{ "scribe", }, "1"),
                            (0x400AB487, new string[]{ "baker", }, "1"),
                            (0x400AB488, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB489, new string[]{ "herbalist","alchemist","customhairstylist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB48B, new string[]{ "bowyer", }, "1"),
                            (0x400AB48C, new string[]{ "tanner","furtrader", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB48D, new string[]{ "butcher", }, "1"),
                            (0x400AB48E, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB48F, new string[]{ "innkeeper", }, "1"),
                            (0x400AB490, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB491, new string[]{ "carpenter","architect","realestatebroker", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB492, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB493, new string[]{ "bowyer", }, "1"),
                            (0x400AB494, new string[]{ "shipwright","mapmaker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB495, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB496, new string[]{ "baker", }, "1"),
                            (0x400AB497, new string[]{ "provisioner","cobbler", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB498, new string[]{ "banker","minter", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB499, new string[]{ "blacksmith","blacksmithguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB49A, new string[]{ "innkeeper", }, "1"),
                            (0x400AB49C, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB49D, new string[]{ "tailor","weaver","tailorguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB49E, new string[]{ "healer","healerguildmaster", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB4A0, new string[]{ "mage","alchemist","mageguildmaster", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB4A1, new string[]{ "minter","banker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB4A2, new string[]{ "mageguildmaster","alchemist","mage", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB4A3, new string[]{ "tinkerguildmaster","tinker", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB4A4, new string[]{ "jeweler", }, "1"),
                            (0x400AB4A5, new string[]{ "animaltrainer", }, "1"),
                            (0x400AB4A6, new string[]{ "butcher", }, "1"),
                            (0x400AB4A7, new string[]{ "weaponsmith","armorer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB4A8, new string[]{ "customhairstylist","alchemist","herbalist", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB4A9, new string[]{ "mapmaker","shipwright", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB4AA, new string[]{ "tailorguildmaster","weaver","tailor", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB4AB, new string[]{ "fisherman", }, "1"),
                            (0x400AB4AC, new string[]{ "baker", }, "1"),
                            (0x400AB4AD, new string[]{ "innkeeper", }, "1"),
                            (0x400AB4AE, new string[]{ "healerguildmaster","healer", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB4AF, new string[]{ "realestatebroker","architect","carpenter", }, "1, 1, 1, 0, 0, 0"),
                            (0x400AB4B0, new string[]{ "cobbler","provisioner", }, "1, 1, 0, 0, 0, 0"),
                            (0x400AB4CC, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4CD, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4CE, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D0, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D1, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D2, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D3, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D4, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D5, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D6, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D7, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D8, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4D9, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4DA, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4DB, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4DC, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4DD, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4DE, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4DF, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E0, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E1, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E2, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E3, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E5, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E6, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E7, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E8, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4E9, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4EA, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4EB, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4EC, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4ED, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4EE, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4EF, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F0, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F1, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F2, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F3, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F4, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F5, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F7, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4F8, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4FA, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4FB, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4FC, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB4FD, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB501, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB502, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB503, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB505, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB50B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB50C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB50E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB50F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB510, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB511, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB512, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB514, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB515, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB516, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB517, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB518, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB519, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB51A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB51B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB51C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB51D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB51E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB51F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB520, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB521, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB522, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB523, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB525, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB526, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB527, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB528, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB529, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB52A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB52B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB52C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB52D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB52F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB530, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB531, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB532, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB533, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB534, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB535, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB536, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB537, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB538, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB539, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB53A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB53B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB53C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB53D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB53E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB53F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB540, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB541, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB542, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB543, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB544, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB545, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB546, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB547, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB548, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB54A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB54B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB54C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB54E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB54F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB550, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB552, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB553, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB555, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB556, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB557, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB558, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB559, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB55A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB55B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB55C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB55E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB55F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB560, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB561, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB562, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB563, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB564, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB565, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB566, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB567, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB568, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB569, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB56A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB56B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB56C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB56D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB56E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB56F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB570, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB571, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB572, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB573, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB574, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB575, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB576, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB578, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB57A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB57B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB57D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB57F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB580, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB582, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB583, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB584, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB585, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB586, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB587, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB588, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB589, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB58C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB58D, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB58E, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB58F, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB590, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB591, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB592, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB593, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB594, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB595, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB596, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB598, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB599, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB59A, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB59B, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB59C, new string[]{ "Boar:Cougar:Goat:Horse:Panther:Pig:Sheep","BlackBear:GrizzlyBear:BrownBear:TimberWolf:GreyWolf","WanderingHealer:EvilWanderingHealer","Bird:Eagle","GreatHart:Hind","Bull:Cow", }, "7, 5, 2, 2, 2, 2"),
                            (0x400AB59E, new string[]{ "Jukawarrior", }, "2"),
                            (0x400AB59F, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400AB5A1, new string[]{ "Golemcontroller","Golem", }, "4, 4, 0, 0, 0, 0"),
                            (0x400AB5A2, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400AB5A3, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400AB5A5, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400AB5A6, new string[]{ "Brigand","Jukalord","Jukamage","Jukawarrior", }, "4, 1, 1, 3, 0, 0"),
                            (0x400AB5A8, new string[]{ "Golem","Jukalord","Jukamage","Jukawarrior", }, "1, 1, 1, 3, 0, 0"),
                            (0x400AB5A9, new string[]{ "Jukalord","Jukamage","Jukawarrior", }, "1, 1, 3, 0, 0, 0"),
                            (0x400231DE, new string[]{ "EvilWanderingHealer","sheep", }, "1, 2"),
                            (0x4002EE36, new string[]{ "wildhuntwarrior","wildhuntmage", }, "1, 2, 3, 4"),
                            (0x40036BA1, new string[]{ "Shadowwyrm", }, "1, 1, 1, 1"),
                            };

                    foreach (var obj in tupleList)
                    {
                        if (World.FindItem(obj.serial) is Spawner spawner)
                        {
                            if (spawner.ModeMulti || spawner.ModeNeruns)
                            {
                                spawner.ObjectNamesRaw = new ArrayList(obj.NameList);
                                spawner.Counts = obj.counts;
                                patched++;
                            }
                            else
                                ;   // error (doesn't) get hit
                        }
                        else
                            missing++; // only one missing in my test, and I believe it was one of Boz's misconfigured spawners 
                    }
                }
                #endregion Re-add missing mobiles from ModeNeruns and ModeMulti spawners

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv95
        #region Patchv94
        private static int PatchV94(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV94;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Port all Broadcaster Controllers to new 'Spawner' model
                if (AllShards())
                {
                    #region Set the spawners of all linked items and mobiles as linked
                    foreach (Item item in World.Items.Values)
                        if (item.GetItemBool(ItemBoolTable.IsLinked))
                            if (item.Spawner != null)
                                item.Spawner.SetItemBool(ItemBoolTable.IsLinked, true);

                    foreach (Mobile mobile in World.Mobiles.Values)
                        if (mobile.GetMobileBool(Mobile.MobileBoolTable.IsLinked))
                            if (mobile.Spawner != null)
                                mobile.Spawner.SetItemBool(ItemBoolTable.IsLinked, true);
                    #endregion Set the spawners of all linked items and mobiles as linked

                    #region now, move all broadcasters to 'spawner model'
                    List<IEntity> entities = new List<IEntity>();
                    foreach (Item item in World.Items.Values)
                        if (item is Broadcaster bc)
                            if (bc.TargetMobile != null)
                            {
                                entities.Add(bc.TargetMobile);
                                if (bc.TargetMobile.Spawner != null)
                                {
                                    bc.TargetMobile.Spawner.SetItemBool(ItemBoolTable.IsLinked, true);
                                    bc.TargetSpawner = bc.TargetMobile.Spawner;
                                    bc.TargetMobile = null;
                                    patched++;
                                }

                            }
                            else if (bc.TargetItem != null)
                            {
                                entities.Add(bc.TargetItem);
                                if (bc.TargetItem.Spawner != null)
                                {
                                    bc.TargetSpawner.Spawner.SetItemBool(ItemBoolTable.IsLinked, true);
                                    bc.TargetSpawner = bc.TargetItem.Spawner;
                                    // don't null the bc.TargetItem here since a spawner is an item
                                    //  and they will share the IEntity m_Target
                                    patched++;
                                }
                            }
                    #endregion now, move all broadcasters to 'spawner model'

                    // resetting the mobile or item above will clear it's 'linked' flag, reset it here
                    foreach (var ent in entities)
                        if (ent is Item item)
                            item.SetItemBool(ItemBoolTable.IsLinked, true);
                        else if (ent is Mobile mobile)
                            mobile.SetMobileBool(Mobile.MobileBoolTable.IsLinked, true);
                }
                #endregion Port all Broadcaster Controllers to new 'Spawner' model

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv94
        #region Patchv93
        private static int PatchV93(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV93;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Turn on all beacons
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is NavBeacon nb)
                            nb.Active = true;
                }
                #endregion Turn on all beacons

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv93
        #region Patchv92
        // 
        private static int PatchV92(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV92;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Fix Stable Masters  - Breeders only / No Checks
                if (AllShards())
                {   // rerun patch to correct mobile/item linkage
                    patched += PatchV85(patchid: 0, utility: true);
                }
                #endregion Fix Stable Masters  - Breeders only / No Checks

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv92
        #region Patchv91
        private static int PatchV91(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV91;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Delete old invasion beacons
                if (AllShards())
                {
                    List<NavBeacon> to_delete = new();
                    foreach (Item item in World.Items.Values)
                        if (item is NavBeacon nb)
                        {
                            to_delete.Add(nb);
                            patched++;
                        }

                    foreach (NavBeacon nb in to_delete)
                        nb.Delete();
                }
                #endregion Delete old invasion beacons

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv91
        #region Patchv90
        private static int PatchV90(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV90;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch invasion beacons
                if (AllShards())
                {
                    List<NavBeacon> to_delete = new();
                    foreach (Item item in World.Items.Values)
                        if (item is NavBeacon nb)
                        {
                            nb.Journey = "britain_invasion";
                            nb.RegisterBeacon();
                            patched++;
                            if (nb.Map != Map.Felucca)
                            {
                                to_delete.Add(nb);
                                patched++;
                            }
                        }

                    foreach (NavBeacon nb in to_delete)
                        nb.Delete();
                }
                #endregion Patch invasion beacons

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv90
        #region Patchv89
        private static int PatchV89(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV89;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Find/Fix links
                if (AllShards())
                {   // rerun patch to correct mobile/item linkage
                    patched += PatchV87(patchid: 0, utility: true);
                }
                #endregion Find/Fix links

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion Patchv89
        #region Patchv88
        private static int PatchV88(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV88;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Find/Fix Enchanted Scrolls 
                if (AllShards())
                {
                    List<EnchantedScroll> needs_patch = new();
                    foreach (Item item in World.Items.Values)
                        if (item is EnchantedScroll es)
                            if (es.Item == null || es.Item is EnchantedScroll)
                            {
                                needs_patch.Add(es);
                            }
                            else if (es.Item.IsIntMapStorage != true)
                            {
                                es.Item.IsIntMapStorage = true;
                            }

                    List<Type> junk_types = new() { typeof(Dagger), typeof(SkinningKnife), typeof(Cleaver), typeof(HammerPick),
                        typeof(Hatchet), typeof(Maul), typeof(ButcherKnife), typeof(Club), typeof(Pitchfork), typeof(ShepherdsCrook)};
                    List<Item> got = new();
                    foreach (EnchantedScroll es in needs_patch)
                    {
                        Item item = null;
                        while ((item = ChestLoot(level: 5)) == null || junk_types.Contains(item.GetType()))
                            ;
                        es.Item = item;
                        got.Add(item);
                    }

                    ;
                }
                #endregion Find/Fix Enchanted Scrolls 

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static Item ChestLoot(int level)
        {
            Loot.ImbueLevel imbueLevel = Loot.TreasureMapLevelToImbueLevel(level);
            int[] minmax = Loot.ImbueLevelToMagicEnchantment(imbueLevel);
            Item item = null;

            if (Utility.Chance(.6))
            {
                item = Loot.RandomWeapon();
                if (item != null)
                {
                    // give the best loot with possible upgrade and hueing
                    item = Loot.ImbueWeaponOrArmor(noThrottle: true, item, Loot.ImbueLevel.Level5, upgrade_chance: 1, hueing: true);
                    (item as BaseWeapon).SetRandomMagicEffect(minmax[0], minmax[1]);
                }
            }
            else if (Utility.Chance(.4))
            {
                item = Loot.RandomArmorOrShield();
                if (item != null)
                {
                    // give the best loot with possible upgrade and hueing
                    item = Loot.ImbueWeaponOrArmor(noThrottle: true, item, Loot.ImbueLevel.Level5, upgrade_chance: 1, hueing: true);
                    (item as BaseArmor).SetRandomMagicEffect(minmax[0], minmax[1]);
                }
            }
            else if (Utility.Chance(.2))
            {
                if ((item = Loot.RandomClothingOrJewelry(must_support_magic: true)) != null)
                {
                    if (item is BaseClothing)
                        ((BaseClothing)item).SetRandomMagicEffect(minmax[0], minmax[1]);
                    else if (item is BaseJewel)
                        ((BaseJewel)item).SetRandomMagicEffect(minmax[0], minmax[1]);
                }
            }
            else if (Utility.Chance(.2))
            {
                if ((item = new Wand()) != null)
                    ((Wand)item).SetRandomMagicEffect(minmax[0], minmax[1]);
            }

            return item;
        }
        #endregion PatchV88
        #region Patchv87
        public static int PatchV87(int patchid, bool utility = false)
        {
            int patches = 0;
            PatchIndex bits = utility ? PatchIndex.None : PatchIndex.PatchV87;
            if ((!Patched(bits) || utility) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch link database
                if (AllShards())
                {
                    List<Mobile> mobiles_that_are_linked = new();
                    List<Item> items_that_are_linked = new();
                    List<IEntity> objects_that_are_linked = new();
                    // build lists of all the items and mobiles that are linked to
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is ITrigger || item is ITriggerable)
                        {
                            mobiles_that_are_linked.AddRange(Utility.GetLinksFrom(item, typeof(Mobile)).Cast<Mobile>().ToList());
                            items_that_are_linked.AddRange(Utility.GetLinksFrom(item, typeof(Item)).Cast<Item>().ToList());
                            objects_that_are_linked.AddRange(Utility.GetLinksFrom(item, typeof(IEntity)).Cast<IEntity>().ToList());
                        }
                    }

                    mobiles_that_are_linked = mobiles_that_are_linked.Distinct().ToList();
                    items_that_are_linked = items_that_are_linked.Distinct().ToList();

                    foreach (var ent in objects_that_are_linked)
                        if (ent is Item)
                        {
                            if (!items_that_are_linked.Contains(ent as Item))
                                items_that_are_linked.Add(ent as Item);
                        }
                        else if (ent is Mobile)
                        {
                            if (!mobiles_that_are_linked.Contains(ent as Mobile))
                                mobiles_that_are_linked.Add(ent as Mobile);
                        }

                    // now, loop through items and mobiles and set their 'linked' bit if they are linked to
                    int unlinked_items = 0;
                    int unlinked_mobiles = 0;
                    foreach (Item item in items_that_are_linked)
                    {
                        if (!item.GetItemBool(ItemBoolTable.IsLinked))
                        {
                            item.SetItemBool(ItemBoolTable.IsLinked, true);
                            unlinked_items++;
                        }
                        else
                            patched++;
                    }

                    foreach (Mobile mob in mobiles_that_are_linked)
                    {
                        if (!mob.GetMobileBool(Mobile.MobileBoolTable.IsLinked))
                        {
                            unlinked_mobiles++;
                            mob.SetMobileBool(Mobile.MobileBoolTable.IsLinked, true);
                        }
                        else
                            patched++;
                    }
                }
                #endregion Patch link database

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV87
        #region Patchv86
        private static int PatchV86(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV86;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Wipe spawner objects that are trying to spawn restricted objects (things from Angel Island Prison for instance)
                //  Don't need to do this on each restart since the spawner now disallows these objects
                if (AllShards())
                {
                    string bad_object = string.Empty;
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner)
                            if (!SpawnerGump.CheckRegion(spawner, spawner.ObjectNamesRaw, ref bad_object))
                            {
                                EchoOut(String.Format("Disabling spawner ({0}) spawning illicit object ({1}).", spawner, bad_object), ConsoleColor.Yellow);
                                spawner.ObjectNamesRaw = new ArrayList();
                                spawner.RemoveObjects();
                                spawner.Running = false;
                                patched++;
                            }
                }
                #endregion Wipe spawner objects that are trying to spawn restricted objects (things from Angel Island Prison for instance)

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV86
        #region Patchv85
        private static int PatchV85(int patchid, bool utility = false)
        {
            int patches = 0;
            PatchIndex bits = utility ? PatchIndex.None : PatchIndex.PatchV85;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Set Stable Masters to Breeders only, and no claim tickets
                if (AllShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is StableMaster sm)
                        {
                            sm.BreedersOnly = true;
                            sm.UseChecks = false;
                            patched++;
                        }
                }
                #endregion Set Stable Masters to Breeders only, and no claim tickets

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV85
        #region Patchv84
        private static int PatchV84(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV84;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Get rid of all legacy Reserved serials
                {
                    List<Item> reserved_serial_list = new();
                    List<Item> new_items_list = new();
                    foreach (Item item in World.Items.Values)
                        if (item.Serial >= 0x60000000)
                        {
                            reserved_serial_list.Add(item);
                            new_items_list.Add(new Item());
                        }

                    foreach (Item item in reserved_serial_list)
                    {
                        int serial = new_items_list[0].Serial;
                        new_items_list[0].Delete();
                        new_items_list.RemoveAt(0);
                        item.ReassignSerial(serial);
                        patched++;
                    }
                }
                #endregion Get rid of all legacy Reserved serials

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV84
        #region Patchv83
        private static int PatchV83(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV83;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation


                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV83
        #region Patchv82
        private static int PatchV82(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV82;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Allow mini-boss armor
                if (Core.SiegeII_CFG && Siege())
                {
                    // turn off these spawners as the rare loot is part of the 'mini-boss' loot
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running)
                            if (
                                spawner.Spawns("FleshRenderer")
                                || spawner.Spawns("AncientLich")
                                || spawner.Spawns("ArcticOgreLord")
                                || spawner.Spawns("AncientWyrm")
                                || spawner.Spawns("BoneDemon")
                                || spawner.Spawns("Balron")
                                )
                            {
                                spawner.RemoveObjects();
                                spawner.Running = false;
                                patched++;
                            }
                }
                #endregion Allow mini-boss armor

                #region Patch out old IsStabled bit
                if (AllShards())
                {
                    // clear the legacy notion of purely being 'stabled'
                    //foreach (Mobile m in World.Mobiles.Values)
                    //    if (m is BaseCreature bc)
                    //        if (bc.GetStable == CreatureBoolTable.None && bc.GetCreatureBool(CreatureBoolTable.__open3))
                    //        {   // CreatureBoolTable.IsAnyStabled => __open3
                    //            bc.SetCreatureBool(CreatureBoolTable.__open3, false);
                    //            patched++;
                    //        }
                }
                #endregion Patch out old IsStabled bit

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV82
        #region Patchv81
        private static int PatchV81(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV81;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch BaseMount ItemIDs

                Dictionary<Mobile, Mobile> mounted = new();
                int m_count = 0;
                int broken_ids = 0;
                int base_mounts = 0;
                foreach (Mobile m in World.Mobiles.Values)
                {
                    if (m is BaseMount)
                        base_mounts++;                          // how many we are checking

                    if (m.Mount != null && m.Mount is Mobile)   // m.Mount is not Mobile == EtherealLlama for instance
                    {   // dismount, and add to remount dictionary
                        m_count++;
                        mounted.Add(m, m.Mount as Mobile);
                        Mobile mount = (Mobile)m.Mount;
                        Dismount(m);
                        patched++;
                    }
                }

                // everyone has been dismounted
                // Clear the notion of InternamItem, but don't delete
                foreach (Mobile m in World.Mobiles.Values)
                {
                    if (m is BaseMount bm)
                    {
                        base_mounts++;                                              // how many we are checking
                        if (bm.InternalItem is MountItem)
                            bm.InternalItem.SetItemBool(Item.ItemBoolTable.Orphaned, true); // allows Cron Cleanup to delete this (MountItems are explicitly ignored.)
                        bm.InternalItem = null;                                     // clear the internal Item, but don't delete
                        int goodID = BaseMount.LookupItemID(bm.BodyValue);
                        if (bm.ItemID != goodID && goodID != 0)
                        {   // got a broken ID, hmm, patch!
                            bm.ItemID = goodID;
                            broken_ids++;
                            patched++;
                        }
                        else if (goodID == 0)
                            ;   // good, never hit
                        patched++;
                    }
                }

                // mount up all the riders
                foreach (var kvp in mounted)
                {
                    // mount up!
                    (kvp.Value as IMount).Rider = kvp.Key;
                    patched++;
                }

                #endregion Patch BaseMount ItemIDs

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV81
        #region Patchv80
        private static int PatchV80(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV80;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Recalc house deed prices for deeds on PlayerVendors (custom housing area)
                foreach (Mobile m in World.Mobiles.Values)
                    if (m is PlayerVendor pv && pv.IsStaffOwned)
                        patched += pv.RefreshDefaultPrices();
                #endregion Recalc house deed prices for deeds on PlayerVendors (custom housing area)

                #region Update pricing on 'for sale' signs

                // first grab all the static house signs
                List<HouseSign> signs = new List<HouseSign>();
                foreach (Item item in World.Items.Values)
                    if (item is HouseSign hs && hs.Structure is StaticHouse sh)
                        signs.Add(hs);

                const int ForSaleSign = 0xBD1;
                List<Item> toDelete = new();
                foreach (var sign in signs)
                {
                    List<Item> items = new List<Item>();
                    IPooledEnumerable eable = sign.Map.GetItemsInRange(sign.Location, range: 13);
                    foreach (Item thing in eable)
                        if (thing != null && thing.ItemID == ForSaleSign)
                            if (thing.Name is string name && name.Contains("price", StringComparison.OrdinalIgnoreCase))
                                items.Add(thing);
                    eable.Free();

                    // get the closest for sale sign
                    items.Sort((x, y) => x.GetDistanceToSqrt(sign).CompareTo(y.GetDistanceToSqrt(sign)));

                    foreach (Item thing in items)
                        if (thing != null && thing.ItemID == ForSaleSign)
                            if (thing.Name is string name && name.Contains("price", StringComparison.OrdinalIgnoreCase))
                            {
                                toDelete.Add(thing);
                                ForSaleSign fss = new();
                                fss.MoveToWorld(thing.Location, thing.Map);
                                StaticDeed temp = (StaticDeed)sign.Structure.GetDeed();
                                fss.Deed = temp;    // these signs dupe the deed, so we need to delete the temp one
                                temp.Delete();
                                patched++;
                            }
                }

                foreach (Item item in toDelete)
                    item.Delete();

                #endregion Update pricing on 'for sale' signs

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV80
        #region Patchv79
        private static int PatchV79(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV79;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                string exportfile = AngelIsland() ? "pets.ai.export" : "pets.siege.export";
                #region Begin Implementation

                #region Recreate lost pets                
                if (Siege() || AngelIsland())
                {
                    /* This bit of code synchronizes both the players notion of his pets, the global pet cache
                     * 1. removes pets that are not stabled from players pet list
                     * 2. removes pets that are not stabled from the global pet cache
                     * 3. StableImport all previously known 'good pets'
                     * 4. verify the configuration of the pet and add him to the global pet cache
                     */
                    // remove pets that are not stabled from the pet cache
                    {
                        foreach (Mobile mob in World.Mobiles.Values)
                            if (mob is PlayerMobile pm)
                            {
                                List<BaseCreature> list = new();
                                if (AnimalTrainer.Table.ContainsKey(pm))
                                {
                                    foreach (Mobile mob2 in AnimalTrainer.Table[pm])
                                        if (mob2 is BaseCreature pet)
                                            if (pet.IsAnyStabled == false)
                                                list.Add(pet);

                                    foreach (BaseCreature pet in list)
                                    {
                                        AnimalTrainer.Table[pm].Remove(pet);
                                        pet.ClearStabled();
                                        pet.ControlMasterGUID = 0;

                                        if (Mobile.PetCache.Contains(pet))
                                            Mobile.PetCache.Remove(pet);
                                    }
                                }
                            }
                    }

                    // cleanup the global pet cache directly
                    {
                        List<Mobile> removeList = new List<Mobile>();
                        foreach (Mobile mob3 in Mobile.PetCache)
                            if (mob3 is BaseCreature bc)
                                if (!bc.IsAnyStabled)
                                    removeList.Add(bc);

                        foreach (Mobile mob4 in removeList)
                            Mobile.PetCache.Remove(mob4);
                    }

                    // now add back all the previously known stabled pets
                    Commands.StableTransfer.StableImport_OnCommand(
                        new CommandEventArgs(World.GetSystemAcct(),
                        command: "StableImport",
                        argString: exportfile,
                        arguments: new string[] { exportfile }));

                    // Verify their configuration and add to global pet cache
                    {
                        int num_deleted = 0;
                        foreach (Mobile mob in World.Mobiles.Values)
                            if (mob is PlayerMobile pm)
                                if (AnimalTrainer.Table.ContainsKey(pm))
                                    if (AnimalTrainer.Table[pm] != null)
                                        foreach (Mobile mob2 in AnimalTrainer.Table[pm])
                                            if (mob2 is BaseCreature pet)
                                                if (pet.Deleted)
                                                {
                                                    num_deleted++; // error
                                                }
                                                else if (pet.IsAnyStabled)
                                                {
                                                    pet.ClearStabled();
                                                    pet.IsStableMasterStabled = true;
                                                    pet.ControlMasterGUID = pm.GUID;

                                                    if (!Mobile.PetCache.Contains(pet))
                                                        Mobile.PetCache.Add(pet);
                                                }
                                                else
                                                    ; // error!
                        EchoOut(String.Format("** {0} deleted pets **".ToUpper(), num_deleted), ConsoleColor.Magenta);
                    }
                }

                #endregion Recreate lost pets

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV79
        #region Patchv78
        private static int PatchV78(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV78;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Patch ControlMasterGUID for stabled pets
                if (AllShards())
                {
                    {   // verify all stabled pets have a valid GUID
                        foreach (Mobile m in World.Mobiles.Values)
                            if (m is BaseCreature bc && bc.IsAnyStabled) // ControlMaster will be null if stabled
                                if (bc.ControlMasterGUID == 0)
                                    ;
                    }


                    {   // verify all players have a GUID
                        foreach (Mobile m in World.Mobiles.Values)
                            if (m is PlayerMobile pm)
                                if (pm.GUID == 0)
                                {
                                    ;
                                }
                    }

                    {   // patch normal stabled pets GUIDS
                        foreach (Mobile m in World.Mobiles.Values)
                            if (m is PlayerMobile pm)
                                if (AnimalTrainer.Table.ContainsKey(pm))
                                    if (AnimalTrainer.Table[pm] != null)
                                        foreach (var pet in AnimalTrainer.Table[pm])
                                            if (pet is BaseCreature bc)
                                                if (bc.ControlMasterGUID != pm.GUID)
                                                {
                                                    bc.ControlMasterGUID = pm.GUID;
                                                    patched++;
                                                }
                    }

                    {   // patch stable master stabled pets GUIDS
                        foreach (var kvp in StableMaster.Table)
                            if (kvp.Key is PlayerMobile pm)
                                if (kvp.Value != null)
                                    foreach (var pet in kvp.Value)
                                        if (pet is BaseCreature bc)
                                            if (bc.ControlMasterGUID != pm.GUID)
                                            {
                                                bc.ControlMasterGUID = pm.GUID;
                                                patched++;
                                            }
                    }

                    {   // patch stable master stabled pets FLAGS
                        foreach (var kvp in StableMaster.Table)
                            if (kvp.Key is PlayerMobile pm)
                                if (kvp.Value != null)
                                    foreach (var pet in kvp.Value)
                                        if (pet is BaseCreature bc)
                                            if (bc.IsStableMasterStabled == false)
                                            {
                                                bc.IsStableMasterStabled = true;
                                                patched++;
                                            }
                    }

                    {   // patch elf stabler stabled pets GUIDS
                        foreach (var kvp in ElfStabler.Table)
                            if (kvp.Key is PlayerMobile pm)
                                if (kvp.Value != null)
                                    foreach (var pet in kvp.Value)
                                        if (pet is BaseCreature bc)
                                            if (bc.ControlMasterGUID != pm.GUID)
                                            {
                                                bc.ControlMasterGUID = pm.GUID;
                                                patched++;
                                            }
                    }

                    {   // patch elf stabler stabled pets FLAGS
                        foreach (var kvp in ElfStabler.Table)
                            if (kvp.Key is PlayerMobile pm)
                                if (kvp.Value != null)
                                    foreach (var pet in kvp.Value)
                                        if (pet is BaseCreature bc)
                                            if (bc.IsElfStabled == false)
                                            {
                                                bc.IsElfStabled = true;
                                                patched++;
                                            }
                    }

                }
                #endregion Patch ControlMasterGUID for stabled pets

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV78
        #region Patchv77
        private static int PatchV77(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV77;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Issue refunds to players that purchased houses at 10x (houses are now 3x)
                if (Siege())
                {
                    {   // HOUSES
                        int hash_counter = 2048;
                        LogHelper logger = new LogHelper("Housing refund.log", overwrite: false, sline: true);
                        foreach (Item item in World.Items.Values)
                            if (item is HouseSign sign && sign.Structure != null && sign.Structure.Owner != null)
                            {
                                if (sign.Structure.Owner.AccessLevel > AccessLevel.Player)
                                {
                                    logger.Log(string.Format("Skipping staff owned house for {0}, located at {1}", sign.Structure.Owner, sign.Structure.Location));
                                    continue;
                                }

                                HouseDeed hd = sign.Structure.GetDeed();
                                logger.Log(string.Format("Beginning refund for {0} located at {1}, Serial {2}.", sign.Structure.GetType().Name, sign.Structure.Location, sign.Structure.Serial));
                                logger.Log(string.Format("The Owner is {0}", sign.Structure.Owner));
                                if (hd == null)
                                {
                                    logger.Log(string.Format("** Unable to acquire a deed for this house, skipping. **".ToUpper()));
                                    continue;
                                }
                                logger.Log(string.Format("Base Price: {0}", hd.Price));
                                logger.Log(string.Format("Owner paid: {0}", hd.Price * 10));
                                logger.Log(string.Format("New price: {0}", hd.Price * 3));
                                int refund = (hd.Price * 10) - (hd.Price * 3);  // new 3x pricing
                                logger.Log(string.Format("Owner gets a refund of {0}", refund));

                                /*
                                 * Make Hue
                                 */
                                int hue = RandomSpecialHue(hd.Price + (hash_counter += 16));

                                /*
                                 * Make the checks
                                 * +16 to make the hue quite different
                                 */
                                int[] amounts = Utility.RandomNSumM(4, refund);     // amount for each of the 4 checks
                                DateTime[] valid_dates = new DateTime[4]            // dates these checks become valid
                                {
                                DateTime.UtcNow,
                                DateTime.UtcNow + TimeSpan.FromDays(7),
                                DateTime.UtcNow + TimeSpan.FromDays(14),
                                DateTime.UtcNow + TimeSpan.FromDays(21),
                                };
                                RefundCheck[] checks = new RefundCheck[4]           // construct the table of checks
                                {
                                new RefundCheck(amounts[0],valid_dates[0], hue, "for a house"),
                                new RefundCheck(amounts[1],valid_dates[1], hue, "for a house"),
                                new RefundCheck(amounts[2],valid_dates[2], hue, "for a house"),
                                new RefundCheck(amounts[3],valid_dates[3], hue, "for a house"),
                                };

                                System.Diagnostics.Debug.Assert(amounts.Sum() == refund);   // sanity

                                /*
                                 * Distribute the checks
                                 */
                                foreach (var check in checks)
                                {
                                    if (sign.Structure.Owner.BankBox != null)
                                        if (sign.Structure.Owner.BankBox.TryDropItem(World.GetSystemAcct(), check, sendFullMessage: false))
                                        {
                                            logger.Log(string.Format("A check worth {0} was deposited into {1}'s bank box", check.Worth, sign.Structure.Owner));
                                            patched++;
                                            continue;
                                        }
                                    if (sign.Structure.Owner.Backpack != null)
                                        if (sign.Structure.Owner.Backpack.TryDropItem(World.GetSystemAcct(), check, sendFullMessage: false))
                                        {
                                            logger.Log(string.Format("A check worth {0} was deposited into {1}'s backpack", check.Worth, sign.Structure.Owner));
                                            patched++;
                                            continue;
                                        }

                                    logger.Log(string.Format("Unable to deposit a check worth {0} for {1}", check.Worth, sign.Structure.Owner));
                                    ;
                                }
                            }
                        logger.Finish();
                    }
                    {   // HOUSE DEEDS
                        int hash_counter = 1024;
                        LogHelper logger = new LogHelper("House deed refund.log", overwrite: false, sline: true);
                        foreach (Item item in World.Items.Values)
                            if (item != null && !item.Deleted && item.GetType().IsAssignableTo(typeof(HouseDeed)))
                            {
                                Mobile parent_mobile = item.RootParent as Mobile;
                                Container parent_container = item.Parent as Container;

                                if (parent_mobile == null && parent_container == null)
                                {
                                    /*  We have a ton of this crap, ignore for now, but we need to clean all this stuff up
                                     * 1/21/2024 10:18:57 AM: Unknown condition: deed 0x4001D3A4 "LogCabinDeed", located at (0, 0, 0 Internal)
                                     * 1/21/2024 10:18:57 AM: Unknown condition: Created:1/21/2024 6:18:57 PM, LastMoved:1/21/2024 6:18:57 PM, LastAccessed:1/21/2024 6:18:57 PM, Map:Internal
                                     */
                                    if (item.LastAccessed.Year > 2024)
                                    {
                                        logger.Log(string.Format("Unknown condition: deed {0}, located at {1}", item, item.GetWorldLocation()));
                                        logger.Log(string.Format("Unknown condition: Created:{0}, LastMoved:{1}, LastAccessed:{2}, Map:{3}",
                                            item.Created, item.LastMoved, item.LastAccessed, item.Map));
                                    }
                                    continue;
                                }

                                if (parent_mobile != null && parent_mobile.AccessLevel > AccessLevel.Player)
                                {
                                    logger.Log(string.Format("Skipping staff owned house deed for {0}, located at {1}", parent_mobile, parent_mobile.Location));
                                    continue;
                                }

                                if (parent_mobile is PlayerVendor pv && (pv.IsStaffOwned || pv.Owner != null && pv.Owner.AccessLevel > AccessLevel.Player))
                                {   // too spammy
                                    //logger.Log(string.Format("Skipping deeds on a staff owned player vendor {0}, located at {1}", parent_mobile, parent_mobile.Location));
                                    continue;
                                }

                                if (parent_container is BankBox bx && bx.Parent == null)
                                {   // orphaned BB, Adam has some of there, ignore
                                    continue;
                                }

                                BaseMulti bm = null;
                                if (parent_container != null && (bm = BaseHouse.Find(parent_container.Location, parent_container.Map)) != null && bm is BaseHouse bh)
                                {   // ignore containers in staff houses
                                    if (bh.Owner != null && bh.Owner.AccessLevel > AccessLevel.Player)
                                        continue;
                                }

                                if (parent_mobile is BaseVendor bv)
                                {
                                    logger.Log(string.Format("Skipping deeds on a staff owned BaseVendor {0}, located at {1}", parent_mobile, parent_mobile.Location));
                                    continue;
                                }

                                HouseDeed hd = item as HouseDeed;
                                System.Diagnostics.Debug.Assert(hd != null);   // sanity
                                if (hd == null)
                                {
                                    logger.Log(string.Format("** Unable to cast deed to HouseDeed , skipping. **".ToUpper()));
                                    continue;
                                }

                                if (hd is TentBag || hd is SiegeTentBag)
                                {   // not doing these
                                    continue;
                                }

                                logger.Log(string.Format("Beginning refund for {0} located at {1}, Serial {2}.", hd.GetType().Name, hd.GetWorldLocation(), hd.Serial));

                                if (parent_container is BankBox bb)
                                    logger.Log(string.Format("The Owner is {0}'s {1}", bb.Parent, bb));
                                else
                                    logger.Log(string.Format("The Owner is {0}", (IEntity)parent_mobile ?? (IEntity)parent_container));

                                logger.Log(string.Format("Base Price: {0}", hd.Price));
                                logger.Log(string.Format("Owner paid: {0}", hd.Price * 10));
                                int refund = (hd.Price * 10);
                                logger.Log(string.Format("Owner gets a full refund of {0}", refund));

                                /*
                                 * Make Hue
                                 * +16 to make the hue quite different
                                 */
                                int hue = RandomSpecialHue(hd.Price + (hash_counter += 16));

                                /*
                                 * Make the checks
                                 */
                                int[] amounts = Utility.RandomNSumM(4, refund);     // amount for each of the 4 checks
                                DateTime[] valid_dates = new DateTime[4]            // dates these checks become valid
                                {
                                DateTime.UtcNow,
                                DateTime.UtcNow + TimeSpan.FromDays(7),
                                DateTime.UtcNow + TimeSpan.FromDays(14),
                                DateTime.UtcNow + TimeSpan.FromDays(21),
                                };
                                RefundCheck[] checks = new RefundCheck[4]           // construct the table of checks
                                {
                                new RefundCheck(amounts[0],valid_dates[0], hue, "for a house deed"),
                                new RefundCheck(amounts[1],valid_dates[1], hue, "for a house deed"),
                                new RefundCheck(amounts[2],valid_dates[2], hue, "for a house deed"),
                                new RefundCheck(amounts[3],valid_dates[3], hue, "for a house deed"),
                                };

                                System.Diagnostics.Debug.Assert(amounts.Sum() == refund);   // sanity

                                /*
                                 * Distribute the checks
                                 */
                                foreach (var check in checks)
                                {
                                    if (parent_mobile != null)
                                        if (parent_mobile.BankBox != null)
                                            if (parent_mobile.BankBox.TryDropItem(World.GetSystemAcct(), check, sendFullMessage: false))
                                            {
                                                logger.Log(string.Format("A check worth {0} was deposited into {1}'s bank box", check.Worth, parent_mobile));
                                                patched++;
                                                continue;
                                            }
                                    if (parent_container != null)
                                        if (true)
                                            if (parent_container.TryDropItem(World.GetSystemAcct(), check, sendFullMessage: false))
                                            {
                                                logger.Log(string.Format("A check worth {0} was deposited into container {1}, location {2}", check.Worth, parent_container, parent_container.GetWorldLocation()));
                                                patched++;
                                                continue;
                                            }

                                    logger.Log(string.Format("Unable to deposit a check worth {0} for {1}".ToUpper(), check.Worth, (IEntity)parent_mobile ?? (IEntity)parent_container));
                                }

                                hd.Delete();
                            }
                        logger.Finish();
                    }
                }
                #endregion Issue refunds to players that purchased houses at 10x (houses are now 3x)

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV77
        #region Patchv76
        private static int PatchV76(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV76;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Respawn hire fighters so they get their new title
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running)
                            if (spawner.Spawns("HireFighter"))
                            {
                                spawner.RemoveObjects();
                                spawner.ScheduleRespawn = true;
                                patched++;
                            }
                }
                #endregion Respawn hire fighters so they get their new title

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV76
        #region Patchv75
        private static int PatchV75(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV75;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Set all hire fighters clothes and item to Item.BoolTable.DeleteOnLift
                if (AllShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is HireFighter hf)
                            foreach (Item item in hf.Items)
                            {
                                item.SetItemBool(Item.ItemBoolTable.DeleteOnLift, true);
                                patched++;
                            }
                }
                #endregion Set all hire fighters clothes and item to Item.BoolTable.DeleteOnLift

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV75
        #region Patchv74
        private static int PatchV74(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV74;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Enable Static Housing
                if (AllShards())
                {
                    List<Point3D> list = new List<Point3D>() { new Point3D(1433, 1593, 20), new Point3D(1432, 1593, 20) };
                    foreach (var px in list)
                    {
                        // delete Sparkle 0x375A
                        List<Item> items = FindItemsAt(px, Map.Felucca, 2);
                        foreach (Item ix in items)
                            if (ix.ItemID == 0x375A)
                            {
                                ix.Delete();
                                patched++;
                            }
                        // enable teleporter and turn on sparkle
                        Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.Running = true;
                            tele.Sparkle = true;
                            patched++;
                        }
                    }
                }
                #endregion Enable Static Housing

                #region Township 
                if (AllShards())
                {
                    Township.TownshipSettings.MinstrelCharge = 100000;
                    patched++;
                }
                #endregion Township 

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV74
        #region Patchv73
        private static int PatchV73(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV73;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Unbless all the crap I asked to be unblessed
                if (AllShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                    {
                        if (m is Mobile && m.Blessed)
                        {
                            m.Blessed = false;
                            patched++;

                            if (m.Spawner is Spawner spawner)
                            {
                                if (spawner.Invulnerable == false)
                                {
                                    spawner.Invulnerable = true;
                                    patched++;
                                }
                            }
                        }
                    }


                }
                #endregion Unbless all the crap I asked to be unblessed

                #region Township 
                if (AllShards())
                {
                    Township.TownshipSettings.MinstrelCharge = 100000;
                    patched++;
                }
                #endregion Township 

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV73
        #region Patchv72
        private static int PatchV72(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV72;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Set all xmas trees, deeds, and motion controllers to RangeExit -1 (no stop on exit)
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is MusicMotionController mmc)
                        {
                            mmc.RangeExit = -1;
                            patched++;
                        }
                        else if (item is ChristmasTreeAddonDeed deed)
                        {
                            deed.RangeExit = -1;
                            patched++;
                        }
                        else if (item is ChristmasTreeAddon addon)
                        {
                            addon.RangeExit = -1;
                            patched++;
                        }
                    }
                }
                #endregion Set all xmas trees, deeds, and motion controllers to RangeExit -1 (no stop on exit)

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV72
        #region Patchv71
        private static int PatchV71(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV71;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Replace xmas trees and deeds with xml versions, and add music to them
                if (AllShards())
                {
                    patched += ReplaceLockdowns(new ReplaceEntry[]
                    {
                        new ReplaceEntry(typeof(HolidayDeed), -1, typeof(ChristmasTreeAddonDeed), null),
                        new ReplaceEntry(typeof(ChristmasTreeDeed), -1, typeof(ChristmasTreeAddonDeed), null),
                        new ReplaceEntry(typeof(HolidayTree), 0x0CD7, typeof(ChristmasTreeAddon), new object[] { 0 }),
                        new ReplaceEntry(typeof(HolidayTree), 0x1B7E, typeof(ChristmasTreeAddon), new object[] { 1 }),
                    });

                    // this exact music only available on Siege
                    List<Item> music = new();
                    object info = null;
                    List<string> names = new() {
                        ". . It's Beginning to Look a Lot Like Christmas",
                        ". . O Tannembaum",
                        ". . Deck the Halls",
                        ". . Christmas Time is Here",
                    };
                    foreach (var name in names)
                        if (MusicBox.FindSong(name.Split(), out info))
                            music.Add(((KeyValuePair<RolledUpSheetMusic, MusicInfo>)info).Key);

                    if (music.Count > 0)
                        foreach (Item item in World.Items.Values)
                        {
                            if (item is ChristmasTreeAddonDeed deed)
                            {
                                if (deed.SheetMusic == null)    // don't change existing music
                                    deed.SheetMusic = music[Utility.Random(music.Count)];
                                deed.DelayBetween = 3600 * 1000; // every hour
                                deed.DelayBetween += Utility.RandomList(Utility.Random(20), -Utility.Random(20)); // random offset from other trees in the area
                                deed.RangeEnter = 5;
                                deed.RangeExit = 15;
                                patched++;
                            }
                            else if (item is ChristmasTreeAddon addon)
                            {
                                if (addon.SheetMusic == null)   // don't change existing music
                                    addon.SheetMusic = music[Utility.Random(music.Count)];
                                addon.DelayBetween = 3600 * 1000; // every hour
                                addon.DelayBetween += Utility.RandomList(Utility.Random(20), -Utility.Random(20)); // random offset from other trees in the area
                                addon.RangeEnter = 5;
                                addon.RangeExit = 15;
                                patched++;
                            }
                        }
                }
                #endregion Replace xmas trees and deeds with xml versions, and add music to them

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV71
        #region Patchv70
        private static int PatchV70(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV70;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Replace xmas trees and deeds with xml versions, and add music to them
                if (SiegeStyleShards())
                {
                    patched += ReplaceLockdowns(new ReplaceEntry[]
                    {
                        new ReplaceEntry(typeof(HolidayDeed), -1, typeof(ChristmasTreeAddonDeed), null),
                        new ReplaceEntry(typeof(ChristmasTreeDeed), -1, typeof(ChristmasTreeAddonDeed), null),
                        new ReplaceEntry(typeof(HolidayTree), 0x0CD7, typeof(ChristmasTreeAddon), new object[] { 0 }),
                        new ReplaceEntry(typeof(HolidayTree), 0x1B7E, typeof(ChristmasTreeAddon), new object[] { 1 }),
                    });

                    List<Item> music = new();
                    object info = null;
                    List<string> names = new() {
                        ". . It's Beginning to Look a Lot Like Christmas",
                        ". . O Tannembaum",
                        ". . Deck the Halls",
                        ". . Christmas Time is Here",
                    };
                    foreach (var name in names)
                        if (MusicBox.FindSong(name.Split(), out info))
                            music.Add(((KeyValuePair<RolledUpSheetMusic, MusicInfo>)info).Key);

                    foreach (Item item in World.Items.Values)
                    {
                        if (item is ChristmasTreeAddonDeed deed)
                        {
                            deed.SheetMusic = music[Utility.Random(music.Count)];
                            deed.DelayBetween = 3600 * 1000; // every hour
                            deed.RangeEnter = 5;
                            deed.RangeExit = 15;
                            patched++;
                        }
                        else if (item is ChristmasTreeAddon addon)
                        {
                            addon.SheetMusic = music[Utility.Random(music.Count)];
                            addon.DelayBetween = 3600 * 1000; // every hour
                            addon.RangeEnter = 5;
                            addon.RangeExit = 15;
                            patched++;
                        }
                    }
                }
                #endregion Replace xmas trees and deeds with xml versions, and add music to them

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV70
        #region Patchv69
        private static int PatchV69(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV69;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Patch template mobile and item reference counts
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && !spawner.Deleted && spawner.TemplateEnabled)
                            if (spawner.TemplateMobile is Mobile m && !m.Deleted)
                            {
                                m.SpawnerTempRefCount = 1;
                                if (m.SpawnerTempMob == false)
                                    m.SpawnerTempMob = true;
                                patched++;
                            }
                            else if (spawner.TemplateItem is Item i && !i.Deleted)
                            {
                                i.SpawnerTempRefCount = 1;
                                if (i.SpawnerTempItem == false)
                                    i.SpawnerTempItem = true;
                                patched++;
                            }

                }
                #endregion Patch template mobile and item reference counts

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV69
        #region Patchv68
        private static int PatchV68(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV68;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Respawn world to fix creatures spawning underwater
                if (AllShards())
                    patched += TotalRespawn();
                #endregion Respawn world to fix creatures spawning underwater

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV68
        #region Patchv67
        protected class WHCfg
        {
            public Type m_type;
            public int m_int;
            public string m_name;
            public int m_control_master;
            public double m_magic_resist;
            public double m_tactics;
            public double m_wrestling;
            public WHCfg(Type type, int @int, string name, int master, double magic_resist, double tactics, double wrestling)
            {
                m_type = type;
                m_int = @int;
                m_name = name;
                m_control_master = master;
                m_magic_resist = magic_resist;
                m_tactics = tactics;
                m_wrestling = wrestling;
            }
        }
        private static int PatchV67(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV67;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Restore grandfathered war horses
                if (SiegeStyleShards())
                {
                    // data from "War Horse crib.log" (see nuke)
                    List<WHCfg> list = new() {
                        new WHCfg(typeof(CoMWarHorse),53,"a war horse",0x00004624,26.8,39.2,39.5),
                        new WHCfg(typeof(CoMWarHorse),51,"slut",0x000081CE,28.2,100,100),
                        new WHCfg(typeof(CoMWarHorse),53,"a war horse",0x00004624,26.6,35.9,39),
                        new WHCfg(typeof(CoMWarHorse),54,"a war horse",0x00000E03,25.7,33.4,36.8),
                        new WHCfg(typeof(CoMWarHorse),55,"a war horse",0x00000E03,26.9,33.7,32.5),
                        new WHCfg(typeof(CoMWarHorse),55,"a war horse",0x000235B9,29,36.7,33.3),
                        new WHCfg(typeof(CoMWarHorse),54,"house",0x000081CE,30.7,77.5,100),
                        new WHCfg(typeof(CoMWarHorse),53,"fest",0x000081CE,27.1,98.8,100),
                        new WHCfg(typeof(CoMWarHorse),54,"Atreyu",0x00004C50,31.1,100,90.8),
                        new WHCfg(typeof(CoMWarHorse),55,"Blue",0x0000BD48,27.3,31.4,41.3),
                    };

                    // find the owner, create the war horse, and configure, then force-stable
                    foreach (var cfg in list)
                        if (World.FindMobile((Serial)cfg.m_control_master) is PlayerMobile pm)
                        {
                            object o = Activator.CreateInstance(cfg.m_type);
                            if (o is CoMWarHorse pet)
                            {
                                // basics
                                pet.Controlled = true;
                                pet.ControlMaster = pm;
                                pet.Name = cfg.m_name;

                                // stats
                                pet.RawInt = cfg.m_int;

                                // skills
                                pet.SetSkill(SkillName.MagicResist, cfg.m_magic_resist);
                                pet.SetSkill(SkillName.Tactics, cfg.m_tactics);
                                pet.SetSkill(SkillName.Wrestling, cfg.m_wrestling);

                                // stable!
                                pet.ControlTarget = null;
                                pet.ControlOrder = OrderType.Stay;
                                pet.Internalize();

                                pet.SetControlMaster(null);
                                pet.SummonMaster = null;

                                pet.IsAnimalTrainerStabled = true;

                                if (AnimalTrainer.Table.ContainsKey(pm))
                                {
                                    if (!AnimalTrainer.Table[pm].Contains(pet))
                                        AnimalTrainer.Table[pm].Add(pet);
                                }
                                else
                                    AnimalTrainer.Table.Add(pm, new List<BaseCreature>() { pet });

                                pet.LastStableChargeTime = DateTime.UtcNow;

                                pet.SetCreatureBool(CreatureBoolTable.StableHold, true);
                                pet.StableBackFees = AnimalTrainer.UODayChargePerPet(pm);

                                patched++;
                            }
                        }
                }
                #endregion Restore grandfathered war horses

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV67
        #region Patchv66
        private static int PatchV66(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV66;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Wipe Factions and respawn all BaseVendor
                if (SiegeStyleShards())
                {
                    Factions.Generator.DegenerateResult result = Factions.Generator.DegenerateFactions();
                    patched += result.TotalCount();

                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is BaseVendor bv && bv.Spawner is Spawner spawner)
                            if (spawner.Running)
                            {
                                spawner.RemoveObjects();
                                spawner.ScheduleRespawn = true;
                                patched++;
                            }
                }
                #endregion Wipe Factions and respawn all BaseVendor

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV66
        #region Patchv65
        private static int PatchV65(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV65;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Respawn Real Estate Brokers
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running)
                            if (spawner.Spawns("RealEstateBroker"))
                            {
                                spawner.RemoveObjects();
                                spawner.ScheduleRespawn = true;
                                patched++;
                            }
                }
                #endregion Respawn Real Estate Brokers

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV65
        #region Patchv64
        private static int PatchV64(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV64;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Start decay on all angry miner camps
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                    {
                        if (item != null)
                        {
                            if (item.GetType() == typeof(MagicBox) && item is LockableContainer lc)
                            {
                                // no houses
                                if (BaseMulti.Find(item.Location, item.Map) != null || item.Parent != null)
                                    continue;

                                foreach (Item reward in lc.Items)
                                    if ((reward is AncientSmithyHammer || reward is GargoylesPickaxe) && Utility.RandomBool())
                                    {   // kick off decay
                                        lc.Locked = false;
                                        patched++;
                                    }
                            }
                        }
                    }
                }
                #endregion Start decay on all angry miner camps

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV64
        #region Patchv63
        private static int PatchV63(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV63;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Bring Town Criers home
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running)
                            if (spawner.Spawns("TownCrier"))
                            {
                                spawner.RemoveObjects();
                                spawner.ScheduleRespawn = true;
                                patched++;
                            }

                }
                #endregion Bring Town Criers home

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV63
        #region Patchv62
        private static int PatchV62(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV62;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Replace Large BODS with Small
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is LargeBOD lb)
                        {
                            Mobile sysact = World.GetSystemAcct();
                            if (sysact != null)
                            {
                                Nuke.SetAllSkills(sysact, 70.1);
                                SmallBOD bo = lb.System.ConstructSBOD(0, false, BulkMaterialType.None, 0, null, 0, 0);
                                bo.Randomize(sysact);
                                Nuke.SetAllSkills(sysact, 100.0);
                                Utility.ReplaceItem(new_item: bo, oldItem: item, copy_properties: false);
                                item.Delete();
                                patched++;
                            }
                        }
                }
                #endregion Replace Large BODS with Small

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV62
        #region Patchv61
        private static int PatchV61(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV61;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Farmables
                if (AllShards())
                {   // globally reduce these
                    CropManagementConsole.FarmableCotton = 0.1;
                    patched += CropManagementConsole.CottonPlots;
                    CropManagementConsole.FarmableFlax = 0.1;
                    patched += CropManagementConsole.FlaxPlots;

                    // add guard dogs
                    Spawner spawner = null;
                    foreach (Item item in World.Items.Values)
                        if (item is GridSpawner gs)
                            if (gs.Spawns("FarmableCotton") || gs.Spawns("FarmableFlax"))
                                if (AddSpawner(new Point3D(gs.X + 1, gs.Y + 1, gs.Z), new List<string>() { "FarmDog" }, coreSpawn: false, ref spawner, count: 1, homeRange: 10))
                                {
                                    spawner.MinDelay = TimeSpan.FromSeconds(18);
                                    spawner.MaxDelay = TimeSpan.FromSeconds(30);
                                    patched++;
                                }
                }
                #endregion Farmables

                #region Enable BODs
                if (SiegeStyleShards())
                {
                    BulkOrderControl.SystemEnabled = true; patched++;
                    BulkOrderControl.EnabledFlags |= BulkOrderFlags.Smith; patched++;
                    BulkOrderControl.EnabledFlags |= BulkOrderFlags.Tailor; patched++;
                    BulkOrderControl.LargeEnabled = false; patched++;
                    BulkOrderControl.GoldRewards = true; patched++;
                    BulkOrderControl.FameRewards = true; patched++;
                    BulkOrderControl.RewardsGump = false; patched++;
                    BulkOrderControl.OfferOnTurnIn = true; patched++;
                }
                #endregion Enable BODs

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV61
        #region Patchv60
        private static int PatchV60(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV60;

            if (!Patched(bits) && TestCenterShards(quiet: true) && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Enable Tree of Knowledge and kukui nut spawners
                if (TestCenterShards(quiet: true))
                {
                    EchoOut("Patching Test Center.", ConsoleColor.Green);

                    List<Point3D> list = new() { new Point3D(1069, 2260, 2), new Point3D(1070, 2262, 2) };
                    foreach (var px in list)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                            if (EnableSpawner(ref spawner))
                                patched++;
                    }
                    // turn on breeding
                    CoreAI.SetDynamicFeature(CoreAI.FeatureBits.BreedingEnabled);
                }
                #endregion Enable Tree of Knowledge and kukui nut spawners

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV60
        #region Patchv59
        private static int PatchV59(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV59;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Tag Legacy Magic Loot
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item != null && item.Deleted == false)
                            if (!item.PlayerCrafted && IsMagicLoot(item))
                            {
                                item.Origin = Genesis.Legacy;
                                patched++;
                            }
                }
                #endregion Tag Legacy Magic Loot

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static bool IsMagicLoot(Item item)
        {
            if (EnchantedScroll.IsValidType(item))
            {
                if (item is BaseWeapon bw && item is not BaseWand)
                {
                    if (bw.AccuracyLevel > WeaponAccuracyLevel.Regular || bw.DamageLevel > WeaponDamageLevel.Regular || bw.DurabilityLevel > WeaponDurabilityLevel.Regular)
                        return true;

                    if (bw.MagicCharges > 0 || bw.Slayer != SlayerName.None)
                        return true;
                }
                else if (item is BaseArmor ba)
                {
                    if (ba.ProtectionLevel > ArmorProtectionLevel.Regular || ba.DurabilityLevel > ArmorDurabilityLevel.Regular)
                        return true;

                    if (ba.MagicCharges > 0)
                        return true;
                }
                else if (item is BaseJewel bj)
                {
                    if (bj.MagicCharges > 0)
                        return true;
                }
                else if (item is BaseWand bwnd)
                {
                    if (bwnd.MagicCharges > 0)
                        return true;
                }
                else if (item is BaseClothing bc)
                {
                    if (bc.MagicCharges > 0)
                        return true;
                }
            }
            return false;
        }
        #endregion PatchV59
        #region Patchv58
        private static int PatchV58(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV58;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Mark Player Crafted items as Origin.Player
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item != null && item.Deleted == false)
                            if (item.PlayerCrafted)
                            {
                                item.Origin = Genesis.Player;
                                patched++;
                            }
                }
                #endregion Mark Player Crafted items as Origin.Player

                #region Total Respawn (pack enchanted scrolls)
                if (SiegeStyleShards())
                    patched += TotalRespawn();
                #endregion Total Respawn (pack enchanted scrolls)

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV58
        #region Patchv57
        private static int PatchV57(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV57;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Unbond pets
                if (SiegeStyleShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is BaseCreature bc && bc.Deleted == false && bc.IsBonded == true)
                        {
                            bc.IsBonded = false;
                            patched++;
                        }
                }
                #endregion Unbond pets


                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV57
        #region Patchv56
        private static int PatchV56(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV56;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Disable Pub15 Lizardman camps
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() { new Point3D(3000, 3590, 15), new Point3D(1847, 3088, 0) };
                    foreach (var px in list)
                        if (DisableSpawner(px))
                            patched++;
                }
                #endregion Disable Pub15 Lizardman camps

                #region Add Lizardman Camps
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && (spawner.Spawns("OrcCamp") || spawner.Spawns("RatCamp")))
                        {
                            List<string> list = new List<string>(spawner.ObjectNamesRaw.Cast<string>().ToList());
                            list = list.Select(s => s.Replace("Orccamp:Ratcamp", "OrcCamp:RatCamp:LizardmanCamp")).ToList();
                            list = list.Select(s => s.Replace("RatCamp:OrcCamp", "OrcCamp:RatCamp:LizardmanCamp")).ToList();
                            spawner.ObjectNamesRaw = new ArrayList(list);
                            spawner.RemoveObjects();
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                }
                #endregion Add Lizardman Camps

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV56
        #region Patchv55
        private static int PatchV55(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV55;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Disable Breeding / Followers Max
                if (SiegeStyleShards())
                {
                    CoreAI.ClearDynamicFeature(CoreAI.FeatureBits.BreedingEnabled);
                    patched++;

                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is PlayerMobile playerMobile && !playerMobile.Deleted)
                            playerMobile.FollowersMax = 8;
                }
                #endregion Disable Breeding / Followers Max

                #region Disable Tree of Knowledge and kukui nut spawners
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() { new Point3D(1069, 2260, 2), new Point3D(1070, 2262, 2) };
                    foreach (var px in list)
                        if (DisableSpawner(px))
                            patched++;
                }
                #endregion Disable Tree of Knowledge and kukui nut spawners

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV55
        #region Patchv54
        private static int PatchV54(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV54;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Enable Breeding / Followers Max
                if (SiegeStyleShards())
                {
                    CoreAI.SetDynamicFeature(CoreAI.FeatureBits.BreedingEnabled);
                    patched++;

                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is PlayerMobile playerMobile && !playerMobile.Deleted)
                            playerMobile.FollowersMax = 5;
                }
                #endregion Enable Breeding / Followers Max

                #region Enable Tree of Knowledge and kukui nut spawners
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() { new Point3D(1069, 2260, 2), new Point3D(1070, 2262, 2) };
                    foreach (var px in list)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                            if (EnableSpawner(ref spawner))
                                patched++;
                    }

                }
                #endregion Enable Tree of Knowledge and kukui nut spawners

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV54
        #region Patchv53
        private static int PatchV53(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV53;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Patch players that missed out of the Murder Reprieve, also log
                if (SiegeStyleShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is PlayerMobile pm && !pm.Deleted && pm.FactionPlayerState != null)
                            if ((pm.ShortTermMurders > 4 || pm.LongTermMurders > 4) && pm.GetPlayerBool(PlayerBoolTable.MurderReprieve) == false)
                            {
                                Factions.Faction.MurderReprieve(World.GetSystemAcct(), pm);
                                patched++;
                            }

                    LogHelper logger = new LogHelper("Murder Reprieve.log", false, true);
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is PlayerMobile pm && !pm.Deleted && pm.FactionPlayerState != null && pm.GetPlayerBool(PlayerBoolTable.MurderReprieve) == true)
                        {
                            if (pm.GetPlayerBool(PlayerBoolTable.MurderReprieveRescinded) == false)
                            {
                                logger.Log(string.Format("{0} : Joining this faction grants you a one-time murder reprieve.", pm));
                                logger.Log(string.Format("{0} : old STM:{1}, new STM:{2}", pm, pm.ReprieveShortTermMurders, pm.ShortTermMurders));
                                logger.Log(string.Format("{0} : old LTM:{1}, new LTM:{2}", pm, pm.ReprieveLongTermMurders, pm.LongTermMurders));
                            }
                            else
                            {
                                logger.Log(string.Format("{0} : Your reprieve has been lost for returning to your murderous ways", pm));
                                logger.Log(string.Format("{0} : current STM:{1}", pm, pm.ShortTermMurders));
                                logger.Log(string.Format("{0} : current LTM:{1}", pm, pm.LongTermMurders));
                            }
                        }
                    logger.Finish();
                }
                #endregion Patch players that missed out of the Murder Reprieve, also log

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV53
        #region Patchv52
        private static int PatchV52(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV52;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Enable Lizardman camps
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() { new Point3D(3000, 3590, 15), new Point3D(1847, 3088, 0) };
                    foreach (var px in list)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                            if (EnableSpawner(ref spawner))
                                patched++;
                    }
                }
                #endregion Enable Lizardman camps

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV52
        #region Patchv51
        private static int PatchV51(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV51;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;

                #region Begin Implementation

                #region Replace Barrels, Tubs, and Buckets with fillable ones
                List<KeyValuePair<int, Point3D>> placement = new();
                List<Spawner> spawners = new();
                List<int> interest = new()
                {
                    // barrels: empty, full
                    0xE77, 0x154D,
                    // tubs: empty, full
                    0xE83, 0xE7B,
                    // buckets: empty, full, static
                    0x14E0, 0x2004, 0xFFA
                };

                foreach (Item item in World.Items.Values)
                {
                    if (InWorld(item))
                    {
                        List<Item> items = FindItemsAt(item.Location, item.Map);
                        foreach (Item test_item in items)
                            if (test_item.Parent == null && !test_item.IsLockedDown && !test_item.IsSecure)
                                switch (test_item.ItemID)
                                {
                                    // barrels: full
                                    case 0x154D:
                                        FixDeco(interest, items);
                                        Spawner spawner = null;
                                        AddSpawner(test_item.Location, new List<string>() { "barrel" }, coreSpawn: false, ref spawner, count: 1, homeRange: 0);
                                        if (spawner != null)
                                        {
                                            Barrel barrel = new();
                                            if (barrel != null)
                                            {
                                                int quantity = Utility.RandomMinMax(5, barrel.MaxQuantity);
                                                spawner.SetProp = string.Format("Z {0};Quantity {1}", test_item.Z, quantity);
                                                spawner.MinDelay = TimeSpan.FromDays(1); spawner.MaxDelay = TimeSpan.FromDays(1.5);
                                                patched++;
                                                barrel.Delete();
                                            }
                                        }
                                        break;

                                    // tub: full
                                    case 0xE7B:
                                        FixDeco(interest, items);
                                        spawner = null;
                                        AddSpawner(test_item.Location, new List<string>() { "tub" }, coreSpawn: false, ref spawner, count: 1, homeRange: 0);
                                        if (spawner != null)
                                        {
                                            Tub tub = new();
                                            if (tub != null)
                                            {
                                                int quantity = Utility.RandomMinMax(5, tub.MaxQuantity);
                                                spawner.SetProp = string.Format("Z {0};Quantity {1}", test_item.Z, quantity);
                                                spawner.MinDelay = TimeSpan.FromDays(1); spawner.MaxDelay = TimeSpan.FromDays(1.5);
                                                patched++;
                                                tub.Delete();
                                            }
                                        }
                                        break;

                                    // bucket: full
                                    case 0x2004:
                                    case 0xFFA:
                                        FixDeco(interest, items);
                                        spawner = null;
                                        AddSpawner(test_item.Location, new List<string>() { "bucket" }, coreSpawn: false, ref spawner, count: 1, homeRange: 0);
                                        if (spawner != null)
                                        {
                                            Bucket bucket = new();
                                            if (bucket != null)
                                            {
                                                int quantity = Utility.RandomMinMax(5, bucket.MaxQuantity);
                                                // Z+1 here to lift the bucket out of the bushes
                                                spawner.SetProp = string.Format("Z {0};Quantity {1}", test_item.Z + 1, quantity);
                                                spawner.MinDelay = TimeSpan.FromDays(2); spawner.MaxDelay = TimeSpan.FromDays(2.5);
                                                patched++;
                                                bucket.Delete();
                                            }
                                        }
                                        break;

                                }
                    }
                }
                #endregion Replace Barrels, Tubs, and Buckets with fillable ones

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static void FixDeco(List<int> interest, List<Item> items)
        {
            foreach (Item item in items)
                if (interest.Contains(item.ItemID))
                    item.Delete();
        }
        #endregion PatchV51
        #region Patchv50
        private static int PatchV50(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV50;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Remove Adam from Watch List
                if (AllShards())
                    if (World.GetAdminAcct() is PlayerMobile pm)
                    {

                        pm.SetPlayerBool(PlayerBoolTable.Watched, false);
                        Accounting.Account acct = pm.Account as Accounting.Account;
                        if (acct != null)
                        {
                            acct.WatchExpire = DateTime.MinValue;
                            acct.Watched = false;
                            patched++;
                        }
                    }
                #endregion Remove Adam from Watch List

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV50
        #region Patchv49
        private static int PatchV49(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV49;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Remove all normal cotton plants and carrots from spawners
                if (AllShards())
                {
                    List<string> toRemove = new() { "carrot", "cottonplant" };
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running)
                            foreach (var ele in toRemove)
                                if (spawner.Spawns(ele))
                                {
                                    int index = 0;
                                    if ((index = spawner.IndexOf(ele)) != -1)
                                    {
                                        spawner.RemoveObjects();
                                        spawner.ScheduleRespawn = true;
                                        spawner.RemoveAtIndex(index);
                                    }
                                    if (index != -1)
                                        patches++;
                                }

                }
                #endregion Remove all normal cotton plants and carrots from spawners

                #region Load Farm Produce
                if (AllShards())
                {
                    patched += LoadGridSpawners();
                }
                #endregion Load Farm Produce

                #region Remove Adam from Watch List
                if (AllShards())
                    if (World.GetAdminAcct() != null)
                    {
                        Accounting.Account acct = World.GetAdminAcct().Account as Accounting.Account;
                        if (acct != null)
                        {
                            acct.Watched = false;
                            patched++;
                        }
                    }
                #endregion Remove Adam from Watch List

                #region Update treasure chest spawners that seem too safe
                if (AllShards())
                {
                    List<Spawner> spawners = new();
                    List<string> chestTypes = new() { "L2TreasureChest", "L3TreasureChest", "L4TreasureChest", "L5TreasureChest", "L6TreasureChest", };
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Map == Map.Felucca && spawner.Running)
                            foreach (string type in chestTypes)
                                if (spawner.Spawns(type))
                                    if (!spawners.Contains(spawner))
                                        spawners.Add(spawner);

                    // okay, now we have a list of spawners that spawn higher level chests
                    //  first, reset the respawn times
                    foreach (Spawner spawner in spawners)
                    {
                        spawner.MinDelay = TimeSpan.FromMinutes(60);
                        spawner.MaxDelay = TimeSpan.FromMinutes(80);
                        patched++;
                    }

                    // Now fag for review those that seem too safe
                    List<Spawner> dangerous = new();
                    foreach (Spawner test in spawners)
                    {
                        IPooledEnumerable eable = Map.Felucca.GetMobilesInRange(test.Location, 13);
                        foreach (Mobile m in eable)
                        {
                            if (m is BaseCreature bc && !bc.Controlled)
                                if (bc.FightMode.HasFlag(FightMode.All))
                                {   // seems aggressive
                                    dangerous.Add(test);
                                    break;
                                }
                        }
                        eable.Free();
                    }

                    //LogHelper logger = new LogHelper("safespawners.log", true, true, true);
                    //PlayerMobile pm = (PlayerMobile)World.GetAdminAcct();
                    //pm.JumpList = new ArrayList();
                    //pm.JumpIndex = 0;
                    var safe = spawners.Where(p => dangerous.All(p2 => p2 != p));
                    foreach (var spawner in safe)
                    {   // less risk, more delay
                        spawner.MinDelay = TimeSpan.FromDays(1.0);
                        spawner.MaxDelay = TimeSpan.FromDays(1.5);
                        //logger.Log("{" + "new Point3D" + spawner.Location.ToString() + "},");
                        //pm.JumpList.Add(spawner.Location);
                    }
                    //logger.Finish();

                    // less risk, add some fun!
                    Dictionary<Point3D, SpawnerAction> locations = new() {
                        {new Point3D(3130, 3409, -1), SpawnerAction.Sea},
                        {new Point3D(5715, 59, 5), SpawnerAction.MushroomTrap},
                        {new Point3D(5698, 60, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5724, 75, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5731, 91, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5702, 80, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5399, 1859, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5186, 598, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5413, 1932, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5325, 960, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5951, 216, 29), SpawnerAction.MushroomTrap},
                        {new Point3D(5228, 832, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5326, 785, 1), SpawnerAction.MushroomTrap},
                        {new Point3D(5151, 743, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5526, 45, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5448, 159, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5752, 101, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5833, 244, -3), SpawnerAction.MushroomTrap},
                        {new Point3D(5497, 626, 25), SpawnerAction.MushroomTrap},
                        {new Point3D(5498, 692, 20), SpawnerAction.MushroomTrap},
                        {new Point3D(5390, 963, 16), SpawnerAction.MushroomTrap},
                        {new Point3D(5757, 1332, -3), SpawnerAction.MushroomTrap},
                        {new Point3D(5457, 925, 20), SpawnerAction.MushroomTrap},
                        {new Point3D(5398, 982, 5), SpawnerAction.MushroomTrap},
                        {new Point3D(5957, 216, 22), SpawnerAction.MushroomTrap},
                        {new Point3D(5958, 216, 22), SpawnerAction.MushroomTrap},
                        {new Point3D(5319, 103, 15), SpawnerAction.GasTrap},
                        {new Point3D(5320, 103, 15), SpawnerAction.GasTrap},
                        {new Point3D(5154, 694, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(5245, 173, 15), SpawnerAction.GasTrap},
                        {new Point3D(5244, 173, 15), SpawnerAction.GasTrap},
                        {new Point3D(5243, 173, 15), SpawnerAction.GasTrap},
                        {new Point3D(5614, 1837, 0), SpawnerAction.MushroomTrap},
                        {new Point3D(1245, 852, 16), SpawnerAction.MushroomTrap},
                        {new Point3D(1246, 852, 16), SpawnerAction.MushroomTrap},
                    };

                    foreach (var kvp in locations)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(kvp.Key, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                        {
                            Spawner trapSpawner = new Spawner();
                            if (spawner.HomeRange == 0)
                                trapSpawner.HomeRange = 2; // if the chest is a fixed location, put the trap near it
                            else
                                trapSpawner.HomeRange = Math.Max(3, spawner.HomeRange);

                            // have the number of traps reflect the number of things we are protecting
                            trapSpawner.Count = (kvp.Value == SpawnerAction.MushroomTrap ? 3 : 1) * spawner.ObjectCount;

                            trapSpawner.SpawnerFlags = SpawnFlags.ClearPath;

                            if (kvp.Value == SpawnerAction.MushroomTrap)
                            {
                                trapSpawner.ObjectNamesRaw = new ArrayList() { "MushroomTrap" };
                                trapSpawner.SetProp = "PopOnce true";
                            }
                            else if (kvp.Value == SpawnerAction.GasTrap)
                            {
                                trapSpawner.ObjectNamesRaw = new ArrayList() { "GasTrap" };
                                trapSpawner.SetProp = "PopOnce true";
                            }
                            else if (kvp.Value == SpawnerAction.Sea)
                                trapSpawner.ObjectNamesRaw = new ArrayList() { "SeaSerpent" };

                            Point3D px = Spawner.GetSpawnPosition(Map.Felucca, kvp.Key, homeRange: trapSpawner.HomeRange, sflags: SpawnFlags.ClearPath, trapSpawner);
                            trapSpawner.MoveToWorld(px, Map.Felucca);
                            trapSpawner.ScheduleRespawn = true;
                            patched++;
                        }
                        else
                            ; // debug
                    }

                }
                #endregion Update treasure chest spawners that seem too safe

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static int LoadGridSpawners()
        {
            List<Spawner> list = new();
            List<string> reasons = null;
            SpawnerCapture.LoadSpawners(list, filename: "GridSpawners", ref reasons);
            if (list.Count > 0)
            {
                foreach (Spawner spawner in list)
                {
                    spawner.MoveToWorld(spawner.Location, map: spawner.Map);
                    spawner.ScheduleRespawn = true;
                }
            }
            return list.Count;
        }
        private enum SpawnerAction
        {
            None,
            Sea,
            MushroomTrap,
            GasTrap
        }
        #endregion PatchV49
        #region Patchv48
        private static int PatchV48(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV48;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Resolve spinning Township NPCs
                if (AllShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m != null && !m.Deleted && m is ITownshipNPC)
                            if (m is BaseCreature bc && bc.CantWalkLand)
                                bc.RangeHome = 0;
                }
                #endregion Resolve spinning Township NPCs

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV48
        #region Patchv47
        private static int PatchV47(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV47;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Remove all spawned rares
                if (SiegeStyleShards())
                {
                    List<Item> ToDelete = new();
                    foreach (Item item in World.Items.Values)
                        if (item is RaresSpawner raresSpawner && raresSpawner.Running)
                        {
                            IPooledEnumerable eable = Map.Felucca.GetItemsInRange(raresSpawner.Location, raresSpawner.HomeRange);
                            foreach (Item thing in eable)
                                if (thing != null && thing.Deleted == false)
                                    if (thing.GetFlag(LootType.Rare) || thing.GetItemBool(Item.ItemBoolTable.MustSteal))
                                        ToDelete.Add(thing);

                            eable.Free();
                        }
                        else if (item is Spawner spawner && spawner.Running && spawner.Name != null && spawner.Name.Contains("rares", StringComparison.OrdinalIgnoreCase))
                        {
                            Point3D px = spawner.Location;
                            foreach (Item thing in FindItemsAt(px, Map.Felucca, lenientZ: 5))
                                if (thing != null && thing.Deleted == false)
                                    if (spawner.Spawns(thing.GetType()))
                                        ToDelete.Add(thing);
                        }

                    patched += ToDelete.Count;
                    foreach (Item item in ToDelete)
                        item.Delete();
                }
                #endregion Remove all spawned rares

                #region Add stealable fruit baskets
                if (SiegeStyleShards())
                {
                    List<Item> ToDelete = new();
                    List<Point3D> list = new() {
                        new Point3D(3692, 1261, 24), new Point3D(1141, 1816, 6), new Point3D(1515, 1422, 21)};

                    // first delete the existing fruit baskets                    
                    foreach (var px in list)
                        foreach (Item thing in FindItemsAt(px, Map.Felucca, lenientZ: 2))
                            if (thing is FruitBasket)
                                ToDelete.Add(thing);

                    foreach (var thing in ToDelete)
                    {
                        thing.Delete();
                        patched++;
                    }

                    LogHelper logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (var px in list)
                    {
                        RaresSpawner spawner = new RaresSpawner();
                        spawner.MustSteal = true;
                        spawner.RareType = Loot.RareType.FruitBasket;
                        spawner.MinDelay = TimeSpan.FromHours(48);
                        spawner.MaxDelay = TimeSpan.FromHours(96);
                        spawner.HomeRange = 0;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        logger.Log(LogType.Item, spawner);
                        logger.Log(string.Format("MustSteal:{0}, RareType:{1}, MinDelay:{2}, MaxDelay:{3}, HomeRange:{4}",
                            spawner.MustSteal,
                            spawner.RareType,
                            spawner.MinDelay,
                            spawner.MaxDelay,
                            spawner.HomeRange
                            ));
                    }
                    logger.Finish();
                }
                #endregion Add stealable fruit baskets

                #region Cleanup
                // delete pots here (pots and fruit baskets at same location.)
                if (SiegeStyleShards())
                {
                    List<Item> ToDelete = new();
                    List<Point3D> list = new() {
                        new Point3D(1512, 1428, 21),new Point3D(1515, 1422, 21),
                    };
                    foreach (var px in list)
                        foreach (Item thing in FindItemsAt(px, Map.Felucca, lenientZ: 2))
                            if (thing != null && thing.Deleted == false && thing.ItemID == 0x9E3)
                                ToDelete.Add(thing);

                    foreach (var thing in ToDelete)
                    {
                        thing.Delete();
                        patched++;
                    }
                }
                #endregion Cleanup

                #region Enable Client Enforcement (Warning only)
                if (AllShards())
                {
                    CoreAI.ForceGMNCUO = true;
                    CoreAI.ForceGMNRZR = true;
                    CoreAI.WarnBadGMNCUO = true;
                    CoreAI.WarnBadGMNRZR = true;
                    patched += 4;
                }
                #endregion Enable Client Enforcement (Warning only)

                #region Cleanup OnSpawner items (will force decay)
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                    {
                        if (item != null && item.GetItemBool(Item.ItemBoolTable.OnSpawner))
                        {
                            item.SetItemBool(Item.ItemBoolTable.OnSpawner, false);
                            patched++;
                        }
                    }
                }
                #endregion Cleanup OnSpawner items (will force decay)

                #region Cleanup & Refresh Camps
                if (AllShards())
                {
                    patched += RefreshCamps();
                }
                #endregion Cleanup & Refresh Camps

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV47
        #region Patchv46
        private static int PatchV46(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV46;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Remove all spawned rares
                if (AllShards())
                {
                    List<Item> ToDelete = new();
                    foreach (Item item in World.Items.Values)
                        if (item is RaresSpawner raresSpawner && raresSpawner.Running)
                        {
                            IPooledEnumerable eable = Map.Felucca.GetItemsInRange(raresSpawner.Location, raresSpawner.HomeRange);
                            foreach (Item thing in eable)
                                if (thing != null && thing.Deleted == false)
                                    if (thing.GetFlag(LootType.Rare) || thing.GetItemBool(Item.ItemBoolTable.MustSteal))
                                        ToDelete.Add(thing);

                            eable.Free();
                        }
                        else if (item is Spawner spawner && spawner.Running && spawner.Name != null && spawner.Name.Contains("rares", StringComparison.OrdinalIgnoreCase))
                        {
                            Point3D px = spawner.Location;
                            foreach (Item thing in FindItemsAt(px, Map.Felucca, lenientZ: 5))
                                if (thing != null && thing.Deleted == false)
                                    if (spawner.Spawns(thing.GetType()))
                                        ToDelete.Add(thing);
                        }

                    patched += ToDelete.Count;
                    foreach (Item item in ToDelete)
                        item.Delete();
                }
                #endregion Remove all spawned rares

                #region Add stealable fruit baskets
                if (AllShards())
                {
                    List<Item> ToDelete = new();
                    List<Point3D> list = new() {
                        new Point3D(3692, 1261, 24), new Point3D(1141, 1816, 6), new Point3D(1515, 1422, 21)};

                    // first delete the existing fruit baskets                    
                    foreach (var px in list)
                        foreach (Item thing in FindItemsAt(px, Map.Felucca, lenientZ: 2))
                            if (thing is FruitBasket)
                                ToDelete.Add(thing);

                    foreach (var thing in ToDelete)
                    {
                        thing.Delete();
                        patched++;
                    }

                    LogHelper logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (var px in list)
                    {
                        RaresSpawner spawner = new RaresSpawner();
                        spawner.MustSteal = true;
                        spawner.RareType = Loot.RareType.FruitBasket;
                        spawner.MinDelay = TimeSpan.FromHours(48);
                        spawner.MaxDelay = TimeSpan.FromHours(96);
                        spawner.HomeRange = 0;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        logger.Log(LogType.Item, spawner);
                        logger.Log(string.Format("MustSteal:{0}, RareType:{1}, MinDelay:{2}, MaxDelay:{3}, HomeRange:{4}",
                            spawner.MustSteal,
                            spawner.RareType,
                            spawner.MinDelay,
                            spawner.MaxDelay,
                            spawner.HomeRange
                            ));
                    }
                    logger.Finish();
                }
                #endregion Add stealable fruit baskets

                #region Cleanup
                // delete pots here (pots and fruit baskets at same location.)
                if (AllShards())
                {
                    List<Item> ToDelete = new();
                    List<Point3D> list = new() {
                        new Point3D(1512, 1428, 21),new Point3D(1515, 1422, 21),
                    };
                    foreach (var px in list)
                        foreach (Item thing in FindItemsAt(px, Map.Felucca, lenientZ: 2))
                            if (thing != null && thing.Deleted == false && thing.ItemID == 0x9E3)
                                ToDelete.Add(thing);

                    foreach (var thing in ToDelete)
                    {
                        thing.Delete();
                        patched++;
                    }
                }
                #endregion Cleanup

                #region Enable Client Enforcement (Warning only)
                if (AllShards())
                {
                    CoreAI.ForceGMNCUO = true;
                    CoreAI.ForceGMNRZR = true;
                    CoreAI.WarnBadGMNCUO = true;
                    CoreAI.WarnBadGMNRZR = true;
                    patched += 4;
                }
                #endregion Enable Client Enforcement (Warning only)

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV46
        #region Patchv45
        private static int PatchV45(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV45;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Cleanup & Refresh Camps
                if (AllShards())
                {
                    patched += RefreshCamps();
                }
                #endregion Cleanup & Refresh Camps

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static int RefreshCamps()
        {
            int patched = 0;
            // delete all camps and respawn
            List<BaseCamp> list = new();
            foreach (var item in World.Items.Values)
                if (item is BaseCamp bc && bc.Deleted == false)
                    list.Add(bc);

            foreach (BaseCamp bc in list)
                bc.Delete();

            patched += list.Count;

            // now respawn
            foreach (Item item in World.Items.Values)
                if (item is Spawner spawner && spawner.Running == true && spawner.Spawns(typeof(BaseCamp)))
                {
                    spawner.ScheduleRespawn = true;
                    patched++;
                }

            // ask the Cron scheduler to respawn dynamic camps
            Timer.DelayCall(TimeSpan.FromSeconds(3.0), new TimerStateCallback(DoCronTick), new object[] { "DynamicCampSystem", null });
            return patched;
        }
        private static void DoCronTick(object state)
        {
            object[] aState = (object[])state;
            string command = (aState[0] != null) ? aState[0] as string : "";
            CommandEventArgs e = new(World.GetSystemAcct(), null, command, new string[] { command });
            Cron.Run_OnCommand(e);
        }
        #endregion PatchV45
        #region Patchv44
        private static int PatchV44(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV44;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Cleanup & Refresh Camps
                if (AllShards())
                {   // delete all camps and respawn
                    List<BaseCamp> list = new();
                    foreach (var item in World.Items.Values)
                        if (item is BaseCamp bc && bc.Deleted == false)
                            list.Add(bc);

                    foreach (BaseCamp bc in list)
                        bc.Delete();

                    patched += list.Count;

                    // now respawn
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns(typeof(BaseCamp)))
                        {
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                }
                #endregion Cleanup & Refresh Camps

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV44
        #region Patchv43
        private static int PatchV43(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV43;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Update Moongate Wizard's Spawners
                if (SiegeStyleShards())
                {
                    // DestinationFlags Moongate
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("MoonGateWizard"))
                        {
                            spawner.SetProp = "DestinationFlags MoongateTownship";
                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion Update Moongate Wizard's Spawners

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV43
        #region Patchv42
        private static int PatchV42(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV42;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Make System Character to Persist and Own stuff
                if (AllShards())
                {
                    PlayerMobile system = World.GetSystemAcct() as PlayerMobile;
                    Mobile AdamAnt = World.GetAdminAcct();
                    Guildstone prison = (Guildstone)FindOneItemAt(new Point3D(352, 838, 20), Map.Felucca, typeof(Guildstone));

                    // remove adam from guild
                    if (AdamAnt != null && AdamAnt.Guild != null)
                        ((Guild)AdamAnt.Guild).ResignMember(AdamAnt, force: true);
                    // make new system account guild master
                    if (prison.Guild != null)
                    {
                        ((Guild)prison.Guild).AddMember(system);
                        prison.Guildmaster = system;
                    }
                    patched++;
                }
                #endregion Make System Character to Persist and Own stuff

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV42
        #region Patchv41
        private static int PatchV41(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV41;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Make System Character to Persist and Own stuff
                if (AllShards())
                {
                    PlayerMobile system = World.GetSystemAcct() as PlayerMobile;
                    Mobile AdamAnt = World.GetAdminAcct();
                    Guildstone prison = (Guildstone)FindOneItemAt(new Point3D(352, 838, 20), Map.Felucca, typeof(Guildstone));

                    // remove adam from guild
                    if (AdamAnt != null && AdamAnt.Guild != null)
                        ((Guild)AdamAnt.Guild).ResignMember(AdamAnt, force: true);
                    // make new system account guild master
                    if (prison.Guild != null)
                    {
                        ((Guild)prison.Guild).AddMember(system);
                        prison.Guildmaster = system;
                    }
                    patched++;
                }
                #endregion Make System Character to Persist and Own stuff

                #region Cleanup Recycle Bin
                // we had a bug where after 10 days we were just orphaning the container on the internal map.
                if (AllShards())
                {
                    List<Item> list = new();
                    foreach (Item item in World.Items.Values)
                        if (item != null && item.Map == Map.Internal && !item.Movable && item.IsIntMapStorage && item.Parent == null)
                            if (item is StrongBackpack sbp)
                                if (DateTime.UtcNow > sbp.Created + TimeSpan.FromDays(10))
                                    // more than 10 days old, delete it
                                    list.Add(sbp);

                    foreach (Item item in list)
                        item.Delete();

                    patched += list.Count;

                }
                #endregion Cleanup Recycle Bin

                #region Cleanup & Refresh Camps
                if (AllShards())
                {   // Delete all Siege Tents (will be replaced with addons/multis)
                    List<SiegeTent> list = new();
                    foreach (var item in World.Items.Values)
                        if (item is BaseHouse bh && bh.Deleted == false && bh is SiegeTent st)
                            list.Add(st);

                    foreach (SiegeTent st in list)
                        st.Delete();

                    patched += list.Count;
                }

                if (SiegeStyleShards())
                {   // delete angry miner camp spawners (will be replaced with dynamic camps)
                    List<Spawner> list = new();
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("AngryMinerCampRare"))
                        {
                            list.Add(spawner);
                            patched++;
                        }

                    foreach (Spawner spawner in list)
                        spawner.Delete();
                }

                if (AllShards())
                {   // delete all camps and respawn
                    List<BaseCamp> list = new();
                    foreach (var item in World.Items.Values)
                        if (item is BaseCamp bc && bc.Deleted == false)
                            list.Add(bc);

                    foreach (BaseCamp bc in list)
                        bc.Delete();

                    patched += list.Count;

                    // now respawn
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("camp"))
                        {
                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion Cleanup & Refresh Camps

                #region Respawn Aligned Creatures
                if (AllShards())
                {
                    List<Spawner> seen = new();
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is BaseCreature bc && !bc.Deleted && bc.GuildAlignment != AlignmentType.None)
                            if (bc.Spawner != null && !bc.Spawner.Deleted && bc.Spawner.Running)
                                if (!seen.Contains(bc.Spawner))
                                {
                                    bc.Spawner.RemoveObjects();
                                    bc.Spawner.ScheduleRespawn = true;
                                    seen.Add(bc.Spawner);
                                    patched++;
                                }
                }
                #endregion Respawn Aligned Creatures

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV41
        #region Patchv40
        private static int PatchV40(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV40;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Cleanup & Refresh Camps
                if (AllShards())
                {
                    List<BaseCamp> list = new();
                    foreach (var item in World.Items.Values)
                        if (item is BaseCamp bc && bc.Deleted == false)
                            list.Add(bc);

                    foreach (BaseCamp bc in list)
                        bc.Delete();

                    patched += list.Count;

                    // now respawn
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("camp"))
                        {
                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion Cleanup & Refresh Camps

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV40
        #region Patchv39
        private static int PatchV39(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV39;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Cleanup & Refresh Camps
                if (AllShards())
                {
                    List<BaseCamp> list = new();
                    foreach (var item in World.Items.Values)
                        if (item is BaseCamp bc && bc.Deleted == false)
                            list.Add(bc);

                    foreach (BaseCamp bc in list)
                        bc.Delete();

                    patched += list.Count;

                    // now respawn
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("camp"))
                        {
                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion Cleanup & Refresh Camps

                #region Angry Miner Camps
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() {
                        new Point3D(2667, 103, 0), new Point3D(1268, 2648, 0), new Point3D(1831, 1021, 0)};

                    foreach (var px in list)
                    {
                        Spawner spawner = new Spawner();
                        spawner.ObjectNamesRaw.Add("AngryMinerCampRare");
                        spawner.MinDelay = TimeSpan.FromMinutes(45);
                        spawner.MaxDelay = TimeSpan.FromHours(1);
                        spawner.HomeRange = 0;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion Angry Miner Camps

                #region Plows
                if (AllShards())
                {
                    List<Point3D> list = new() {
                        new Point3D(1223, 1723, 0), new Point3D(3711, 2616, 20), new Point3D(676, 1009, 0)};

                    LogHelper logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (var px in list)
                    {
                        RaresSpawner spawner = new RaresSpawner();
                        spawner.MustSteal = true;
                        spawner.RareType = (px == new Point3D(676, 1009, 0)) ? Loot.RareType.PlowEast : Loot.RareType.PlowSouth;
                        spawner.MinDelay = TimeSpan.FromHours(48);
                        spawner.MaxDelay = TimeSpan.FromHours(96);
                        spawner.HomeRange = (px == new Point3D(676, 1009, 0)) ? 0 : 10;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        logger.Log(LogType.Item, spawner);
                        logger.Log(string.Format("MustSteal:{0}, RareType:{1}, MinDelay:{2}, MaxDelay:{3}, HomeRange:{4}",
                            spawner.MustSteal,
                            spawner.RareType,
                            spawner.MinDelay,
                            spawner.MaxDelay,
                            spawner.HomeRange
                            ));
                    }
                    logger.Finish();
                }
                #endregion Plows

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV39
        #region Patchv38
        private static int PatchV38(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV38;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Cleanup & Refresh Camps
                if (AllShards())
                {
                    List<BaseCamp> list = new();
                    foreach (var item in World.Items.Values)
                        if (item is BaseCamp bc && bc.Deleted == false)
                            list.Add(bc);

                    foreach (BaseCamp bc in list)
                        bc.Delete();

                    patched += list.Count;

                    // now respawn
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("camp"))
                        {
                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion Cleanup & Refresh Camps

                #region Set certain camp spawners to home range 0
                //  we will then manually move them manually to a location where they spawn correctly (not in trees etc.)
                if (SiegeStyleShards())
                {
                    foreach (var item in World.Items.Values)
                        if (item is BaseCamp bc && bc.Deleted == false)
                            if (bc is OrcCamp || bc is RatCamp || bc is LizardmanCamp)
                                if (bc.Spawner != null && bc.Spawner.Deleted == false)
                                {
                                    if (bc.Spawner.HomeRange != 0)
                                    {
                                        bc.Spawner.HomeRange = 0;
                                        patched++;
                                    }
                                }

                    // now move them to better locations that show all components
                    List<Point3D> list = new()
                    {
                        new Point3D (4480, 1439, 8),
                        new Point3D (4488, 1429, 8),
                        new Point3D (2103, 3371, 4),
                        new Point3D (2093, 3357, 0),
                        new Point3D (1152, 3471, 0),
                        new Point3D (1153, 3474, 0),
                        new Point3D (2349, 722, 0),
                        new Point3D (2337, 731, 0),
                        new Point3D (2548, 1173, 5),
                        new Point3D (2549, 1174, 5),
                        new Point3D (826, 662, 0),
                        new Point3D (824, 662, 0),
                        new Point3D (1064, 2488, 0),
                        new Point3D (1060, 2483, 0),
                        new Point3D (1858, 1082, 0),
                        new Point3D (1856, 1081, 0),
                        new Point3D (1530, 999, 0),
                        new Point3D (1544, 1005, 0),
                        new Point3D (788, 1894, 0),
                        new Point3D (789, 1892, 0),
                        new Point3D (1939, 1310, 0),
                        new Point3D (1936, 1309, 0),
                        new Point3D (1033, 1403, 0),
                        new Point3D (1023, 1410, 0)
                    };

                    for (int ix = 0; ix < list.Count; ix += 2)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(list[ix], Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                        {
                            spawner.MoveToWorld(list[ix + 1]);
                            spawner.Respawn();
                            patched++;
                        }
                    }

                    list = new()
                    {
                        new Point3D (3602, 2815, 29),
                        new Point3D (3610, 2813, 24),
                        new Point3D (3170, 672, 8),
                        new Point3D (3156, 678, 5)

                    };

                    for (int ix = 0; ix < list.Count; ix += 2)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(list[ix], Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                        {
                            spawner.MoveToWorld(list[ix + 1]);
                            spawner.Respawn();
                            patched++;
                        }
                    }
                }
                #endregion Set certain camp spawners to home range 0

                #region PatchAlignmentRegions
                if (AllShards())
                {
                    patched += PatchAlignmentRegions();

                    // now respawn lich
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("lich"))
                        {
                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion PatchAlignmentRegions

                #region Release items locked down on boats
                if (AllShards())
                {
                    Dictionary<Item, TownshipStone> items = new();
                    foreach (var tss in TownshipStone.AllTownshipStones)
                        if (tss is TownshipStone && tss.LockdownRegistry != null)
                            foreach (var kvp in tss.LockdownRegistry)
                                if (BaseBoat.FindBoatAt(kvp.Key) != null && tss.IsLockedDown(kvp.Key))
                                    items.Add(kvp.Key, tss);

                    foreach (var kvp in items)
                    {
                        kvp.Value.LockdownRegistry.Remove(kvp.Key);
                        kvp.Key.Movable = true;
                    }

                    patched += items.Count;
                }
                #endregion Release items locked down on boats

                #region Grandfather Herding
                if (SiegeStyleShards())
                {
                    List<PlayerMobile> pmList = new();
                    foreach (Mobile m in World.Mobiles.Values)
                        if (m is PlayerMobile pm)
                            if (pm.Skills[SkillName.Herding].Base > 70.0)
                                pmList.Add(pm);

                    foreach (PlayerMobile pm in pmList)
                    {
                        pm.SetPlayerBool(PlayerBoolTable.GrandfatheredHerding, true);
                        patched++;
                    }

                }
                #endregion Grandfather Herding

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #region PatchAlignmentRegions
        private static int PatchAlignmentRegions()
        {
            int added = 0;
            added += EnsureRegion("The Undead Crypts", Map.Felucca, RegionRuleset.Standard, new Rectangle2D(918, 664, 123, 185));
            added += EnsureRegion("The Orc Fort", Map.Felucca, RegionRuleset.Standard, new Rectangle2D(557, 1424, 179, 129));
            added += EnsureRegion("Wind Dungeon", Map.Felucca, RegionRuleset.Dungeon, new Rectangle2D(5120, 7, 248, 247));
            added += EnsureRegion("Yew Cemetery", Map.Felucca, RegionRuleset.Standard, new Rectangle2D(709, 1101, 30, 38));
            int patched = 0;
            patched += SetRegionAlignment("The Undead Crypts", Map.Felucca, AlignmentType.Undead);
            patched += SetRegionAlignment("The Orc Fort", Map.Felucca, AlignmentType.Orc);
            patched += SetRegionAlignment("Wind Dungeon", Map.Felucca, AlignmentType.Council);
            patched += SetRegionAlignment("Britain Graveyard", Map.Felucca, AlignmentType.Undead);
            patched += SetRegionAlignment("Moonglow Cemetary", Map.Felucca, AlignmentType.Undead);
            patched += SetRegionAlignment("Nujel'm Cemetery", Map.Felucca, AlignmentType.Undead);
            patched += SetRegionAlignment("Vesper Cemetery", Map.Felucca, AlignmentType.Undead);
            patched += SetRegionAlignment("Yew Cemetery", Map.Felucca, AlignmentType.Undead);
            return added + patched;
        }
        private static int EnsureRegion(string name, Map map, RegionRuleset ruleset, params Rectangle2D[] bounds)
        {
            Region region = Region.FindByName(name, map);
            if (region != null)
                return 0;
            StaticRegion sr = new StaticRegion("", name, map, typeof(WarriorGuard));
            for (int i = 0; i < bounds.Length; i++)
                sr.Coords.Add(new Rectangle3D(bounds[i].X, bounds[i].Y, sbyte.MinValue, bounds[i].Width, bounds[i].Height, byte.MaxValue));
            sr.Ruleset = ruleset;
            sr.PriorityType = RegionPriorityType.Medium;
            sr.Registered = true;
            StaticRegion.XmlDatabase.Add(sr);
            return 1;
        }
        private static int SetRegionAlignment(string name, Map map, AlignmentType alignment)
        {
            StaticRegion sr = Region.FindByName(name, map) as StaticRegion;
            if (sr == null)
                return 0;
            sr.GuildAlignment = alignment;
            return 1;
        }
        #endregion
        #endregion PatchV38
        #region Patchv37
        private static int PatchV37(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV37;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch Tower doors
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is BaseDoor bd && (bd.Z == 26 || bd.Z == 46) && bd.Facing == DoorFacing.SouthCW)
                        {
                            bd.Facing = DoorFacing.NorthCW;
                            patched++;
                        }
                }
                #endregion Patch Tower doors

                #region Enable Carpet Store
                if (SiegeStyleShards())
                {
                    Point3D px = new Point3D(2222, 1150, 0);
                    Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                        if (EnableSpawner(ref spawner))
                            patched++;
                }
                #endregion  Enable Carpet Store

                #region Spawn Bog creatures (for plant system)
                if (SiegeStyleShards())
                {
                    Point3D px = new Point3D(1163, 2885, 0);
                    Spawner spawner = null;
                    if (AddSpawner(px, new List<string>() { "Bogthing", "Bogling" }, coreSpawn: false, ref spawner, count: 1, homeRange: 30, force: true))
                    {
                        spawner.Distro = SpawnerModeAttribs.ModeMulti;
                        spawner.Counts = "2,5";
                        spawner.Concentric = true;
                        patched++;
                    }
                }
                #endregion Spawn Bog creatures (for plant system)

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV37
        #region Patchv36
        private static int PatchV36(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV36;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Update Moongate Wizard's Spawners
                if (SiegeStyleShards())
                {
                    // DestinationFlags Moongate
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("MoonGateWizard"))
                        {
                            spawner.SetProp = "DestinationFlags Moongate";
                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion Update Moongate Wizard's Spawners

                #region Nerun's Distro spawners to have correct override values
                if (SiegeStyleShards())
                {
                    List<Spawner> list = new();
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running && spawner.Distro == SpawnerModeAttribs.ModeNeruns)
                            if (spawner.MinDelay.TotalMinutes == 60 && spawner.MaxDelay.TotalMinutes == 80)
                                list.Add(spawner);

                    // Nerun's Distro file "Outdoors.map" has exactly 79 spawners that need this change.
                    //  Our simple enumeration above turned up exactly 79 such spawners. (No worry here about sucking in the wrong spawners)
                    foreach (Spawner spawner in list)
                        spawner.MaxDelay = TimeSpan.FromMinutes(60);

                    patched += list.Count;
                }
                #endregion Nerun's Distro spawners to have correct override values

                #region Increase Spawn Delay for our 'Gold Boxes'
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is FillableContainer fc && fc.ContentType == FillableContentType.Rare)
                        {   // double old delay
                            fc.MinDelay = TimeSpan.FromHours(12 * 2);
                            // triple old delay
                            fc.MaxDelay = TimeSpan.FromHours(24 * 3);
                            patched += 1;
                        }
                    }
                }
                #endregion Increase Spawn Delay for our 'Gold Boxes'

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV36
        #region Patchv35
        private static int PatchV35(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV35;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Add Rare FillableContainers
                if (AllShards())
                {
                    LogHelper logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is FillableContainer fc)
                        {   // if it is a 'gold box'
                            if (item.ItemID == 0xE80 || item.ItemID == 0x9A8)
                            {
                                // make sure there are no other 'Rare' gold boxes around
                                IPooledEnumerable eable = Map.Felucca.GetItemsInRange(item.Location, 20);
                                foreach (Item thing in eable)
                                    if (thing is FillableContainer fct && (thing.ItemID == 0xE80 || thing.ItemID == 0x9A8))
                                        if (fct.ContentType == FillableContentType.Rare)
                                        {
                                            eable.Free();
                                            // we found another FillableContainer spawning a rare, skip to the next item
                                            goto skip;
                                        }
                                eable.Free();

                                // look for base vendors nearby
                                eable = Map.Felucca.GetMobilesInRange(item.Location, 10);
                                foreach (Mobile vendor in eable)
                                    // needs to be around a vendor (to call guards)
                                    if (vendor is BaseVendor)
                                    {
                                        if (fc.ContentType == FillableContentType.None)
                                        {
                                            fc.ContentType = FillableContentType.Rare;
                                            fc.MinDelay = TimeSpan.FromHours(12);
                                            fc.MaxDelay = TimeSpan.FromHours(24);
                                            fc.MustSteal = true;
                                            logger.Log(LogType.Item, fc);
                                            logger.Log(string.Format("MustSteal:{0}, ContentType:{1}, MinDelay:{2}, MaxDelay:{3}",
                                                fc.MustSteal,
                                                fc.ContentType,
                                                fc.MinDelay,
                                                fc.MaxDelay
                                                ));
                                            patched++;
                                        }
                                        break;
                                    }
                                eable.Free();

                            skip:
                                continue;
                            }
                        }
                    }
                    logger.Finish();
                }
                #endregion Add Rare FillableContainers

                #region Respawn all Rares
                if (AllShards())
                {
                    patched += RespawnRares();
                }
                #endregion Respawn all Rares

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        public static int RespawnRares()
        {
            int count = 0;

            List<RaresSpawner> spawners = new();
            List<FillableContainer> fillableContainerList = new();
            foreach (Item item in World.Items.Values)
                if (item is RaresSpawner s && s.Deleted == false && s.Running == true)
                    spawners.Add(s);
                else if (item is FillableContainer fc && fc.Deleted == false)
                    fillableContainerList.Add(fc);

            foreach (RaresSpawner sp in spawners)
            {
                if (sp.Running)
                {
                    count++;
                    sp.RemoveObjects();
                    sp.Respawn();
                }
            }

            foreach (var fc in fillableContainerList)
            {
                count++;
                fc.TotalRespawn = true;
            }

            return count;
        }
        #endregion PatchV35
        #region Patchv34
        private static int PatchV34(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV34;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Move Spawner
                if (SiegeStyleShards())
                {// (2990, 845, 0) => (2994, 839, 0)
                    Spawner spawner = null;
                    if (MoveSpawner(new Point3D(2990, 845, 0), new Point3D(2994, 839, 0), ref spawner))
                    {
                        spawner.RemoveObjects();
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion Move Spawner

                #region Add Rares
                if (AllShards())
                {
                    #region delete existing deco
                    List<Point3D> list = new() {
                        new Point3D(1847, 2714, 16),new Point3D(3010, 3352, 21),
                    };

                    foreach (var px in list)
                        if (DeleteItem(px))
                            patched++;

                    #endregion delete existing deco

                    #region Add Crystalline Powder
                    list = new() {
                        new Point3D(5305, 87, 21), new Point3D(3010, 3352, 21), new Point3D(1847, 2714, 16)
                    };

                    LogHelper logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (var px in list)
                    {
                        RaresSpawner spawner = new RaresSpawner();
                        spawner.MustSteal = true;
                        spawner.RareType = Loot.RareType.CrystallinePowder;
                        spawner.MinDelay = TimeSpan.FromHours(12);
                        spawner.MaxDelay = TimeSpan.FromHours(24);
                        spawner.HomeRange = 0;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        logger.Log(LogType.Item, spawner);
                        logger.Log(string.Format("MustSteal:{0}, RareType:{1}, MinDelay:{2}, MaxDelay:{3}, HomeRange:{4}",
                            spawner.MustSteal,
                            spawner.RareType,
                            spawner.MinDelay,
                            spawner.MaxDelay,
                            spawner.HomeRange
                            ));
                    }
                    logger.Finish();

                    #endregion Add Crystalline Powder

                    #region Add Scarecrows
                    list = new() {
                        new Point3D(1222, 1722, 0), new Point3D(813, 2163, 0)
                    };

                    logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (var px in list)
                    {
                        RaresSpawner spawner = new RaresSpawner();
                        spawner.MustSteal = true;
                        spawner.RareType = Loot.RareType.ScarecrowEast;
                        spawner.MinDelay = TimeSpan.FromHours(12);
                        spawner.MaxDelay = TimeSpan.FromHours(24);
                        spawner.HomeRange = 0;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        logger.Log(LogType.Item, spawner);
                        logger.Log(string.Format("MustSteal:{0}, RareType:{1}, MinDelay:{2}, MaxDelay:{3}, HomeRange:{4}",
                            spawner.MustSteal,
                            spawner.RareType,
                            spawner.MinDelay,
                            spawner.MaxDelay,
                            spawner.HomeRange
                            ));
                    }
                    logger.Finish();

                    // add some crows
                    foreach (var px in list)
                    {
                        Spawner spawner = new Spawner();
                        spawner.ObjectNamesRaw.Add("crow");
                        spawner.MinDelay = TimeSpan.FromMinutes(5);
                        spawner.MaxDelay = TimeSpan.FromMinutes(15);
                        spawner.Count = 3;
                        spawner.HomeRange = 10;
                        spawner.MoveToWorld(new Point3D(px.X, px.Y + 1, px.Z), Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        // add some vegetables if needed
                        bool foundFood = false;
                        IPooledEnumerable eable = Map.Felucca.GetItemsInRange(px, 20);
                        foreach (Item item in eable)
                            if (item is Food food)
                            {
                                foundFood = true;
                                break;
                            }
                        eable.Free();

                        if (foundFood == false)
                        {
                            spawner = new Spawner();
                            spawner.ObjectNamesRaw.Add("pumpkin");
                            spawner.ObjectNamesRaw.Add("carrot");
                            spawner.MinDelay = TimeSpan.FromMinutes(5);
                            spawner.MaxDelay = TimeSpan.FromMinutes(10);
                            spawner.Count = 12;
                            spawner.HomeRange = 10;
                            spawner.MoveToWorld(new Point3D(px.X + 1, px.Y, px.Z), Map.Felucca);
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                    }
                    #endregion Add Scarecrows

                    #region Add Uncut Cloth
                    list = new() {
                        new Point3D(3762, 1268, 6), new Point3D(3665, 2576, 6)
                    };

                    logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (var px in list)
                    {
                        RaresSpawner spawner = new RaresSpawner();
                        spawner.MustSteal = true;
                        spawner.RareType = Loot.RareType.RareUncutCloth;
                        spawner.MinDelay = TimeSpan.FromHours(12);
                        spawner.MaxDelay = TimeSpan.FromHours(24);
                        spawner.HomeRange = 0;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        logger.Log(LogType.Item, spawner);
                        logger.Log(string.Format("MustSteal:{0}, RareType:{1}, MinDelay:{2}, MaxDelay:{3}, HomeRange:{4}",
                            spawner.MustSteal,
                            spawner.RareType,
                            spawner.MinDelay,
                            spawner.MaxDelay,
                            spawner.HomeRange
                            ));
                    }
                    logger.Finish();

                    #endregion Add Uncut Cloth

                    #region Add Bolt of Cloth
                    list = new() {
                        new Point3D(4459, 1068, 0), new Point3D(2953, 619, 0)
                    };

                    logger = new LogHelper(DataFolder("Rares Spawners.log"), false, true);
                    foreach (var px in list)
                    {
                        RaresSpawner spawner = new RaresSpawner();
                        spawner.MustSteal = true;
                        spawner.RareType = Loot.RareType.RareBoltOfCloth;
                        spawner.MinDelay = TimeSpan.FromHours(12);
                        spawner.MaxDelay = TimeSpan.FromHours(24);
                        spawner.HomeRange = 0;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.ScheduleRespawn = true;
                        patched++;

                        logger.Log(LogType.Item, spawner);
                        logger.Log(string.Format("MustSteal:{0}, RareType:{1}, MinDelay:{2}, MaxDelay:{3}, HomeRange:{4}",
                            spawner.MustSteal,
                            spawner.RareType,
                            spawner.MinDelay,
                            spawner.MaxDelay,
                            spawner.HomeRange
                            ));
                    }
                    logger.Finish();

                    #endregion Add Bolt of Cloth
                }
                #endregion Add Rares

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV34
        #region Patchv33
        private static int PatchV33(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV33;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Update Goodwill Crates
                if (AllShards())
                {
                    List<BaseContainer> list = new();
                    IPooledEnumerable eable = Map.Felucca.GetItemsInRange(new Point3D(1424, 1703, 7), 3);
                    foreach (Item item in eable)
                        if (item is BaseContainer bc)
                            list.Add(bc);

                    eable.Free();

                    foreach (var cont in list)
                        if (cont is SmallCrate sc)
                        {
                            GoodwillAsshat.SmallGoodwillCrate sbtc = new();
                            List<Item> items = new();
                            foreach (Item item in sc.Items)
                                items.Add(item);

                            foreach (Item item in items)
                            {
                                sc.RemoveItem(item);
                                sbtc.AddItem(item);
                            }

                            sbtc.ItemID = sc.ItemID;    // get the facing right
                            sbtc.Location = sc.Location;
                            sbtc.Map = sc.Map;
                            sbtc.Movable = sc.Movable;
                            sbtc.Name = sc.Name;
                            sc.Delete();
                            patched++;
                        }
                        else if (cont is MediumCrate mc)
                        {
                            GoodwillAsshat.SmallGoodwillCrate mbtc = new();
                            List<Item> items = new();
                            foreach (Item item in mc.Items)
                                items.Add(item);

                            foreach (Item item in items)
                            {
                                mc.RemoveItem(item);
                                mbtc.AddItem(item);
                            }

                            mbtc.ItemID = mc.ItemID;    // get the facing right
                            mbtc.Location = mc.Location;
                            mbtc.Map = mc.Map;
                            mbtc.Movable = mc.Movable;
                            mbtc.Name = mc.Name;
                            mc.Delete();
                            patched++;
                        }
                        else if (cont is LargeCrate lc)
                        {
                            GoodwillAsshat.SmallGoodwillCrate lbtc = new();
                            List<Item> items = new();
                            foreach (Item item in lc.Items)
                                items.Add(item);

                            foreach (Item item in items)
                            {
                                lc.RemoveItem(item);
                                lbtc.AddItem(item);
                            }

                            lbtc.ItemID = lc.ItemID;    // get the facing right
                            lbtc.Location = lc.Location;
                            lbtc.Map = lc.Map;
                            lbtc.Movable = lc.Movable;
                            lbtc.Name = lc.Name;
                            lc.Delete();
                            patched++;
                        }
                }
                #endregion Update Goodwill Crates

                #region Fruit Baskets
                if (AllShards())
                {
                    Point3D Yew = new Point3D(286, 986, 6);
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == true && spawner.Spawns("FruitBasket"))
                        {
                            if (spawner.Location != Yew)
                                spawner.SetProp = "movable false";

                            spawner.Respawn();
                            patched++;
                        }
                }
                #endregion Fruit Baskets

                #region Total Respawn (new decay strategy)
                if (AllShards())
                    patched += TotalRespawn();
                #endregion Total Respawn (new decay strategy)

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV33
        #region Patchv32
        private static int PatchV32(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV32;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Enable Sea Gypsies
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running == false && spawner.Spawns("SeaGypsy"))
                            if (EnableSpawner(ref spawner))
                                patched++;
                }
                #endregion Enable Sea Gypsies

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV32
        #region Patchv31
        private static int PatchV31(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV31;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region New Machine Hash Algo - wipe all existing
                if (AllShards())
                {
                    EchoOut("Updating Global Account Database...", ConsoleColor.Yellow);
                    foreach (Accounting.Account acct in Accounting.Accounts.Table.Values)
                    {
                        if (acct == null)
                            continue;

                        patched += acct.Machines.Count;
                        acct.ClearMachines();
                    }
                    EchoOut("Updating of Global Account Database complete", ConsoleColor.Yellow);
                }
                #endregion New Machine Hash Algo - wipe all existing

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV31
        #region Patchv30
        private static int PatchV30(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV30;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Prison Quest
                var px = new Point3D(311, 786, 0);
                Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                if (tele != null)
                {
                    tele.Delete();
                    patched++;
                }

                // add the PrisonLiaisonOfficer
                px = new Point3D(802, 1059, 0);
                Spawner spawner = null;
                if (AddSpawner(px, new List<string>() { "PrisonLiaisonOfficer" }, coreSpawn: false, ref spawner, count: 1, homeRange: 0, force: true))
                {
                    spawner.MobileDirection = Direction.East;
                    patched++;
                }

                // add the rare treasure chest
                px = new Point3D(222, 775, 5);
                TriggerSpawner trigger_spawner = null;
                if (AddTriggerSpawner(px, 0xCE1EB734, new List<string>() { "RareTreasureChest" }, coreSpawn: false, ref trigger_spawner, count: 1, homeRange: 0, force: true))
                {
                    patched++;
                }
                #endregion Prison Quest

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV30
        #region Patchv29
        private static int PatchV29(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV29;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch Dungeon Chest Levels
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && (spawner.Spawns("L5TreasureChest") || spawner.Spawns("L6TreasureChest")))
                        {
                            List<string> list = new List<string>(spawner.ObjectNamesRaw.Cast<string>().ToList());
                            list = list.Select(s => s.Replace("L5TreasureChest", "L4TreasureChest")).ToList();
                            list = list.Select(s => s.Replace("L6TreasureChest", "L4TreasureChest")).ToList();
                            spawner.ObjectNamesRaw = new ArrayList(list.Select(s => s.Replace("L6TreasureChest", "L4TreasureChest")).ToList());
                            patched++;
                        }
                }
                #endregion Patch Dungeon Chest Levels

                #region Patch Spawners, allow pets
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() { new Point3D(1987, 2062, -40), new Point3D(1988, 2062, -40), new Point3D(1989, 2062, -40) };
                    foreach (var px in list)
                    {
                        Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.Pets = true;
                            patched++;
                        }
                    }

                }
                #endregion Patch Spawners, allow pets

                #region Keys On The Ocean
                if (AllShards())
                {
                    bool info = false;
                    bool remove = true;

                    int iChecked = 0;
                    int iFound_felucca = 0;
                    int iFound_other = 0;
                    int iRepaired = 0;
                    List<Key> remove_list = new List<Key>();
                    List<Key> repaired_list = new List<Key>();
                    List<KeyRing> keyRings = new List<KeyRing>();
                    foreach (Item item in World.Items.Values)
                        if (item is KeyRing)
                            keyRings.Add(item as KeyRing);

                    foreach (Item item in World.Items.Values)
                    {
                        iChecked++;
                        if (item is Key)
                        {
                            Key key = item as Key;
                            if (key.Parent == null)
                            {
                                if (BaseHouse.FindHouseAt(key) == null)
                                {
                                    /*if (key.Map == Map.Internal && key.IsIntMapStorage)
                                    {
                                        ; // ignore, already on a keyring
                                    }
                                    else */
                                    {
                                        if (key.Map == Map.Felucca)
                                            iFound_felucca++;
                                        else
                                            iFound_other++;

                                        if (info)
                                            ;
                                        if (remove)
                                            remove_list.Add(key);
                                    }
                                }
                                // else, in a house. ignore
                            }
                            // else, has a parent. ignore
                        }
                        // else not a key
                    }

                    // repair
                    foreach (Key key in remove_list)
                        foreach (var keyring in keyRings)
                            if (keyring.IsKeyOnRing(key.KeyValue))
                            {
                                keyring.RemoveKey(key.KeyValue);
                                keyring.AddKey(key);
                                repaired_list.Add(key);
                                iRepaired++;
                                patched++;
                                break;
                            }

                    foreach (Key key in repaired_list)
                        remove_list.Remove(key);

                    if (remove)
                        foreach (Key key in remove_list)
                        {
                            key.Delete();
                            patched++;
                        }

                    LogHelper logger = new LogHelper("Keys On The Ocean.log", false, true);
                    logger.Log(LogType.Text, string.Format("{3} {0} orphaned keys, {1} of which are in Felucca, and {2} of which are on other maps.",
                        (iFound_other + iFound_felucca) - (info ? 0 : iRepaired), iFound_felucca, iFound_other, info ? "Found" : "Removed"));

                    logger.Log(LogType.Text, string.Format("{0} key/keyrings repaired.", iRepaired));
                    logger.Finish();
                }
                #endregion

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatchV29
        #region Patchv28
        private static int PatchV28(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV28;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Port Music Library from Angel Island to Siege
                if (SiegeStyleShards())
                {
                    // from Angel Island
                    Dictionary<int, ExpInfo> table = new() {
                    { 93233347, new ExpInfo("Dorundain",2000) },
                    { 662835438, new ExpInfo("Wagdog",2000) },
                    { -845254843, new ExpInfo("Wagdog",0) },
                    { -1035873931, new ExpInfo("Dorundain",5000) },
                    { -1721352356, new ExpInfo("Wagdog",500) },
                    { -638482194, new ExpInfo("Dorundain",5000) },
                    { -1733046116, new ExpInfo("random1",0) },
                    { -1308563267, new ExpInfo("Bravata",200) },
                    { 1701907019, new ExpInfo("Bravata",1000) },
                    { -1248138449, new ExpInfo("Chappelle4life3",6000) },
                    { 103000142, new ExpInfo("Wagdog",0) },
                    { 2116081743, new ExpInfo("Dorundain",1000) },
                    { 1174944509, new ExpInfo("Bravata",5000) },
                    { 681617492, new ExpInfo("Dorundain",5000) },
                    { -187482132, new ExpInfo("Chappelle4life3",500) },
                    { 992232335, new ExpInfo("Dorundain",5000) },
                    { -1366692645, new ExpInfo("Angel2",0) },
                    { 903223787, new ExpInfo("Wagdog",2000) },
                    { 220431633, new ExpInfo("Dorundain",0) },
                    { -1139706317, new ExpInfo("Dorundain",0) },
                    { 1812409723, new ExpInfo("Dorundain",2000) },
                    { -440882563, new ExpInfo("Dorundain",0) },
                    { 27770559, new ExpInfo("Dorundain",1000) },
                    { 644215459, new ExpInfo("Dorundain",2000) },
                    { 2083146414, new ExpInfo("Dorundain",1000) },
                    { 1784616072, new ExpInfo("Dorundain",2000) },
                    { -832981173, new ExpInfo("Dorundain",3000) },
                };

                    LogHelper logger = new LogHelper("RolledUpSheetMusicRepair.log", true, true, true);
                    foreach (KeyValuePair<RolledUpSheetMusic, MusicBox.MusicInfo> kvp in MusicBox.GlobalMusicRepository)
                    {
                        if (table.ContainsKey(kvp.Key.HashCode) && (kvp.Key.Owner == null || kvp.Key.Owner.Account == null))
                        {
                            Mobile owner = null;
                            Accounting.Account acct = null;
                            if (GetOwnerInfo(table[kvp.Key.HashCode], out owner, out acct))
                            {
                                kvp.Key.Owner = owner;
                                kvp.Value.Price = table[kvp.Key.HashCode].Price;
                                kvp.Value.Owner = owner;
                                logger.Log(LogType.Text,
                                string.Format("music track {0} repaired.", kvp.ToString()));
                                patched++;
                            }
                        }
                    }
                    logger.Finish();
                }
                #endregion Port Music Library from Angel Island to Siege

                #region Make spawners permanent
                if (SiegeStyleShards())
                {
                    Point3D px = new Point3D(1168, 2959, 0);
                    Spawner spawner = null;
                    if (MakeSpawnerPermanent(px, ref spawner))
                    {
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion Make spawners permanent

                #region Make teleporters permanent
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() {new Point3D(6027, 1452, 0),new Point3D(6027, 1453, 0),
                            new Point3D(5171, 1987, 2), new Point3D(5171, 1988, 2)};
                    Teleporter tele = null;
                    foreach (var px in list)
                        if (MakeTeleporterPermanent(px, ref tele))
                            patched++;
                }
                #endregion Make teleporters permanent

                #region Savage Paint
                if (SiegeStyleShards())
                {
                    // Remove old Cauldron
                    Point3D px = new Point3D(1175, 2960, 0);
                    foreach (Item item in FindItemsAt(px, Map.Felucca, lenientZ: 8))
                    {
                        if (item.ItemID == 0x975 /*Cauldron*/ || item.ItemID == 0x970 /*bubbling liquid*/)
                        {
                            item.Delete();
                            patched++;
                        }
                    }

                    // TribalPaintCauldron
                    new TribalPaintCauldron().MoveToWorld(px, Map.Felucca);
                    patched++;
                }
                #endregion Savage Paint

                #region Remove extra pentagram
                if (AllShards())
                {

                    IPooledEnumerable eable = Map.Felucca.GetItemsInRange(new Point3D(5692, 1346, 0), 5);
                    foreach (Item item in eable)
                        if (item is Spawner || item is BaseAddon || item is BaseContainer ||
                            item is StackedSpawnerConsole || item is Teleporter || item is BaseDoor ||
                            item is AddonComponent)
                            continue;
                        else
                        {
                            item.Delete();
                            patched++;
                        }
                    eable.Free();
                }
                #endregion Remove extra pentagram

                #region Moonglow Cemetery light level
                if (AllShards())
                {
                    for (int i = CustomRegionControl.Instances.Count - 1; i >= 0; i--)
                    {
                        CustomRegionControl crc = CustomRegionControl.Instances[i];
                        CustomRegion cr = crc.CustomRegion;
                        // note: Our spelling of Cemetery is incorrect
                        if (cr.Name.Equals("Moonglow Cemetary"))
                        {
                            cr.LightLevel = -1;
                            patched++;
                        }
                    }
                }
                #endregion Moonglow Cemetery light level

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static bool GetOwnerInfo(ExpInfo info, out Mobile m, out Accounting.Account acct)
        {
            m = null;
            acct = null;
            foreach (Accounting.Account current in Accounting.Accounts.Table.Values)
                if (current.Username.Equals(info.Username, StringComparison.OrdinalIgnoreCase))
                    for (int ix = 0; ix < 5; ix++)
                    {
                        Mobile @char = current[ix];
                        if (@char != null)
                        {
                            m = @char;
                            acct = current;
                            return true;
                        }
                    }

            return false;
        }
        #endregion PatchV28
        #region Patchv27
        private static int PatchV27(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV27;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Dungeon Despise
                if (SiegeStyleShards())
                {
                    Spawner spawner = null;
                    List<Point3D> list = null;

                    // enable these Pub15 spawners
                    list = new()
                    {   
                        // level 1
                        new Point3D(5452, 548, 56),
                        // level 2
                        new Point3D(5498, 672, 20), new Point3D(5473, 668, 20), new Point3D(5458, 685, 20), new Point3D(5441, 680, 20),
                        new Point3D(5397, 661, 20), new Point3D(5405, 691, 20), new Point3D(5388, 703, 15), new Point3D(5386, 689, 20),
                        new Point3D(5408, 724, 15), new Point3D(5422, 747, 5), new Point3D(5399, 753, 5), new Point3D(5456, 709, 15),
                        new Point3D(5442, 626, 30), new Point3D(5465, 611, 45), new Point3D(5499, 611, 47), new Point3D(5500, 563, 65),
                        new Point3D(5468, 531, 60), new Point3D(5454, 525, 61), new Point3D(5427, 531, 60), new Point3D(5473, 741, 5),
                        new Point3D(5504, 750, 5),new Point3D(5506, 714, 15), 
                        // level 3
                        new Point3D(5397, 859, 45), new Point3D(5396, 849, 45), new Point3D(5388, 851, 55), new Point3D(5395, 820, 60),
                        new Point3D(5399, 786, 65), new Point3D(5428, 781, 60), new Point3D(5456, 787, 60), new Point3D(5481, 802, 60),
                        new Point3D(5517, 815, 60), new Point3D(5518, 815, 60),new Point3D(5567, 787, 60), new Point3D(5610, 824, 60),
                        new Point3D(5518, 851, 45), new Point3D(5537, 887, 30), new Point3D(5561, 906, 30), new Point3D(5581, 893, 30),

                    };
                    foreach (var px in list)
                        if (EnableSpawner(px, ref spawner))
                            patched++;

                    // add a dead miners
                    list = new()
                    {
                        new Point3D(5421, 616, 45), new Point3D(5423, 545, 60), new Point3D(5402, 570, 60),
                    };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "DeadMiner" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                            patched++;

                    // cleanup these deco corpses, level 2 entrance .. just too much
                    list = new()
                    {
                        new Point3D(5511, 673, 20), new Point3D(5517, 673, 20), new Point3D(5519, 673, 20)
                    };
                    foreach (var px in list)
                    {
                        Corpse corpse = (Corpse)FindOneItemAt(px, Map.Felucca, typeof(Corpse), 2, false);
                        if (corpse != null)
                        {
                            corpse.Delete();
                            patched++;
                        }
                    }
                }
                #endregion Dungeon Despise

                #region Stone Crafter
                if (SiegeStyleShards())
                {
                    Point3D px = new Point3D(2499, 431, 15);
                    Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        AddSpawner(px, new List<string>() { "StoneCrafter" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 4);
                        patched++;
                    }
                }
                #endregion Stone Crafter

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }

        #endregion PatchV27
        #region Patchv26
        private static int PatchV26(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV26;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch 'blocking' bone piles at Dungeon Wrong entrance
                if (AllShards())
                {
                    List<Point3D> list = new() { new Point3D(2041, 217, 16), new Point3D(2040, 237, 12) };
                    foreach (var px in list)
                    {
                        Static @static = (Static)FindOneItemAt(px, Map.Felucca, ItemID: 8600, 2, false);
                        if (@static == null)
                        {
                            @static = new(8600);
                            @static.MoveToWorld(px, Map.Felucca);
                            patched++;
                        }
                    }
                }
                #endregion Patch 'blocking' bone piles at Dungeon Wrong entrance

                #region Add Ostards
                if (SiegeStyleShards())
                {   // Desert Ostards
                    Point3D px = new Point3D(1929, 866, -1);
                    Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        AddSpawner(px, new List<string>() { "DesertOstard" }, coreSpawn: true, spawner: ref spawner, count: 12, homeRange: 60);
                        spawner.Concentric = true;
                        patched++;
                    }

                    // Forest Ostards
                    px = new Point3D(704, 1057, 0);
                    spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        AddSpawner(px, new List<string>() { "ForestOstard" }, coreSpawn: true, spawner: ref spawner, count: 12, homeRange: 60);
                        spawner.Concentric = true;
                        patched++;
                    }

                    // Frenzied Ostards
                    px = new Point3D(2648, 2267, 15);
                    spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        AddSpawner(px, new List<string>() { "FrenziedOstard" }, coreSpawn: true, spawner: ref spawner, count: 12, homeRange: 60);
                        spawner.Concentric = true;
                        patched++;
                    }
                }
                #endregion Add Ostards

                #region Ridable Llamas!
                if (SiegeStyleShards())
                {
                    Point3D px = new Point3D(4418, 3683, 0);
                    Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        AddSpawner(px, new List<string>() { "RidableLlama" }, coreSpawn: true, spawner: ref spawner, count: 6, homeRange: 50);
                        spawner.Concentric = true;
                        patched++;
                    }
                }
                #endregion Ridable Llamas!

                #region Respawn SavageRiders
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running && spawner.Spawns(typeof(SavageRider)))
                            if (ScheduleRespawn(spawner))
                                patched++;

                }
                #endregion Respawn SavageRiders

                #region Yoar's Spawner Updates
                if (SiegeStyleShards())
                {
                    /*
                     * Moved from (1042, 1394, 0) to (1033, 1403, 0)
                     * Changed spawn name from "orccamp:ratmancamp" to "orccamp"
                     * Changed HomeRange from 1 to 0
                     */
                    Spawner spawner = null;
                    if (MoveSpawner(old_location: new Point3D(1042, 1394, 0), new_location: new Point3D(1033, 1403, 0), ref spawner))
                    {
                        spawner.ObjectNamesRaw = new ArrayList() { "OrcCamp" };
                        spawner.HomeRange = 0;
                        patched++;
                    }

                    /*
                     * 1058, 1375, 0 - replace with an orc spawner in the center of the fort
                     * 1059, 1376, 0 - this is a misc. harmful mob spawner inside the orc fort
                     */
                    List<Point3D> list = new() { new Point3D(1058, 1375, 0), new Point3D(1059, 1376, 0) };
                    foreach (var px in list)
                        if (DisableSpawner(px))
                            patched++;


                }
                #endregion Yoar's Spawner Updates

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }

        #endregion PatchV26
        #region Patchv25
        private static int PatchV25(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV25;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Respawn camp spawners
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner sp && sp.Running)
                            if (sp.Spawns(typeof(BaseCamp)))
                            {
                                sp.RemoveObjects();
                                sp.Respawn();
                                patched++;
                            }
                }
                #endregion Respawn camp spawners

                #region Destard Healer(s)
                if (Core.RuleSets.SiegeStyleRules())
                {
                    Spawner spawner = null;
                    Point3D px = new Point3D(1183, 2662, 5);
                    spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        spawner = new();
                        spawner.Distro = SpawnerModeAttribs.ModeMulti;
                        spawner.ObjectNamesRaw.Add("EvilWanderingHealer");
                        spawner.ObjectNamesRaw.Add("WanderingHealer");
                        spawner.Counts = "1,1";
                        spawner.HomeRange = 40;
                        spawner.WalkRange = -1;
                        spawner.Concentric = true;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }

        #endregion PatchV25
        #region Patchv24
        private static int PatchV24(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV24;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region PatchOracles
                if (SiegeStyleShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                    {
                        if (m is MoonGateWizard)
                        {
                            MoonGateWizard mgw = (MoonGateWizard)m;
                            bool hasPublicMoongate = false;
                            foreach (Item item in mgw.GetItemsInRange(7))
                            {
                                if (item is PublicMoongate)
                                {
                                    hasPublicMoongate = true;
                                    break;
                                }
                            }
                            if (hasPublicMoongate)
                            {
                                mgw.DestinationFlags = OracleFlag.Moongate; // we'll only gate to public moongates
                                mgw.UsePublicMoongates = true; // we'll put our gate on top of the public moongate
                                mgw.Cost = 150; // it costs 150 gp to purchase a gate
                                mgw.DangerCost = 0; // we're not going to dangerous locations, so this value is not used
                                mgw.RequiresFunds = true; // if they can't pay, we won't cast a gate
                                mgw.TwoWay = false; // our gate doesn't work from both directions
                                patched++;
                            }
                        }
                    }
                }
                #endregion PatchOracles
                #region Port Key 
                if (SiegeStyleShards())
                {
                    Point3D px = new Point3D(5863, 533, 15);
                    PortalManager pm = (PortalManager)FindOneItemAt(px, Map.Felucca, typeof(PortalManager), 2, false);
                    if (pm == null)
                    {
                        pm = new();
                        pm.Running = true;
                        pm.MoveToWorld(px, Map.Felucca);
                        patched++;
                    }
                }
                #endregion Port Key 

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }

        #endregion PatchV24
        #region Patchv23
        private static int PatchV23(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV23;

            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region turn on Moongate Wizards
                if (SiegeStyleShards())
                {
                    int before = CountMoonGateWizards();
                    MoonGateWizard.OracleGen_OnCommand(new CommandEventArgs());
                    int after = CountMoonGateWizards();
                    patched += after - before;
                }
                #endregion turn on Moongate Wizards

                #region Turn off Ice/Fire T2A exist
                if (AllShards())
                {
                    List<Point3D> list = new()
                    {   // ice
                        new Point3D(5203, 2327, 27),  new Point3D(5207, 2322, 27), new Point3D(5207, 2323, 26),
                        new Point3D(5874, 146, 27), new Point3D(5875, 146, 27), new Point3D(5876, 146, 27), new Point3D(5877, 146, 27),
                        // fire
                        new Point3D(5792, 1415, 41), new Point3D(5792, 1416, 41), new Point3D(5792, 1417, 41),
                        new Point3D(5757, 2909, 15), new Point3D(5757, 2908, 14), new Point3D(5757, 2907, 15) ,
                        };

                    foreach (var px in list)
                        if (DisableTeleporter(px))
                            patched++;
                }
                #endregion Turn off Ice/Fire T2A exist

                #region Map Cleanup
                if (AllShards())
                {
                    // teleportes in spirit spawn under stones
                    List<Point3D> list = new() { new Point3D(5748, 362, 2), new Point3D(5749, 362, 0), new Point3D(5750, 362, 3) };
                    foreach (var px in list)
                        if (DeleteTeleporter(px))
                            patched++;

                    // stone under floor (5750, 363, -1)
                    list = new() { new Point3D(5751, 363, 0), new Point3D(5750, 363, -1) };
                    foreach (var px in list)
                        if (DeleteItem(px))
                            patched++;
                }
                #endregion Map Cleanup

                #region Info on Wrong
                // https://www.uoguide.com/Wrong
                // https://web.archive.org/web/20010721225156if_/http://uo.stratics.com:80/
                // https://web.archive.org/web/20020606030919/http://uo.stratics.com/content/atlas/wrong.shtml
                #endregion

                #region Wrong Jail Cells
                if (SiegeStyleShards())
                {   // Imprisoned in the West Wing cells are inmates desperate for help escaping.
                    // https://www.uoguide.com/Wrong

                    // move this oddly placed teleporter
                    if (MoveItem(old_location: new Point3D(5733, 554, 20), new_location: new Point3D(5733 - 1, 554, 20)))
                        patched++;

                    // first disable treasure chests
                    List<Point3D> list = new() { 
                        // west wing
                        new Point3D(5650, 553, 20), new Point3D(5651, 558, 21), new Point3D(5660, 553, 20), 
                        // east wing
                        new Point3D(5725, 560, 20), new Point3D(5703, 521, 0) };
                    foreach (var px in list)
                        if (DisableSpawner(px))
                            patched++;

                    // disable these teleporters
                    list = new() { new Point3D(5741, 549, 12), new Point3D(5741, 550, 12),
                        new Point3D(5872, 532, 24), new Point3D(5867, 528, 15), new Point3D(5871, 531, 15), new Point3D(5870, 530, 15),
                        new Point3D(5871, 530, 15), new Point3D(5870, 531, 15), new Point3D(5867, 528, 15), new Point3D(5868, 528, 15),
                        new Point3D(5868, 529, 15), new Point3D(5867, 529, 15), new Point3D(5873, 533, 15), new Point3D(5872, 532, 24)};
                    foreach (var px in list)
                        if (DisableTeleporter(px))
                            patched++;

                    Spawner spawner = null;
                    list = new() { new Point3D(5852, 584, 15), new Point3D(5852, 570, 15) };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "DeadBrigandGuard" }, coreSpawn: true, spawner: ref spawner, count: 3, homeRange: 4))
                            patched++;

                    list = new() { new Point3D(5854, 553, 15) };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "DeadBrigandGuard" }, coreSpawn: true, spawner: ref spawner, count: 4, homeRange: 8))
                            patched++;

                    list = new() { new Point3D(5860, 542, 15) };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "WrongPrisonerLizardman" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 4))
                            patched++;

                    list = new() { new Point3D(5861, 546, 15) };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "WrongPrisonerLizardman" }, coreSpawn: true, spawner: ref spawner, count: 2, homeRange: 6))
                            patched++;

                    list = new() { new Point3D(5854, 551, 15), new Point3D(5852, 565, 15) };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "Lizardman" }, coreSpawn: true, spawner: ref spawner, count: 3, homeRange: 8))
                            patched++;

                    // Add 'Wrong Prisoners' (these are 'camps' that include a treasure chest)
                    list = new() { 
                        // west wing
                        new Point3D(5666, 560, 20), new Point3D(5659, 560, 20), new Point3D(5652, 560, 20),
                        // east wing
                        new Point3D(5726, 561, 20), new Point3D(5722, 561, 20), new Point3D(5718, 561, 20)
                    };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "WrongPrisonerNorth" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                            patched++;

                    // Add 'Wrong Prisoners' last meal
                    list = new() { 
                        // last meal
                        new Point3D(5691, 528, 0), new Point3D(5689, 525, 0),
                    };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "WrongPrisonerLastMeal" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                            patched++;

                    // Add 'Wrong Prisoners' time to die
                    list = new() { 
                        // last meal
                        new Point3D(5680, 523, 0), new Point3D(5675, 525, 0), new Point3D(5704, 523, 0), new Point3D(5705, 527, 0)
                    };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "WrongExecuteNoble" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                            patched++;

                    if (AddSpawner(new Point3D(5792, 544, 10), new List<string>() { "WrongExecuteController" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                        patched++;

                    list = new() { new Point3D(5825, 526, 0), new Point3D(5831, 523, 0) };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "WrongExecuteController" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                            patched++;

                    list = new() { new Point3D(5869, 554, 15), };
                    foreach (var px in list)
                        if (AddSpawner(px, new List<string>() { "DeadExecutioner" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                            patched++;

                    // disable these treasure chests
                    list = new() { new Point3D(5852, 593, 16), new Point3D(5864, 578, 15), new Point3D(5863, 545, 15) };
                    foreach (var px in list)
                        if (DisableSpawner(px))
                            patched++;

                    // delete these deco chests
                    list = new() { new Point3D(5786, 557, 10), new Point3D(5786, 556, 10),
                        new Point3D(5786, 555, 10), new Point3D(5786, 554, 10), new Point3D(5678, 529, 0),
                        new Point3D(5723, 559, 20), new Point3D(5727, 554, 20), new Point3D(5734, 549, 20), new Point3D(5718, 549, 20),
                        new Point3D(5669, 520, 0), new Point3D(5667, 549, 22), new Point3D(5648, 549, 22)};
                    foreach (var px in list)
                        while (DeleteItem(px))
                            patched++;

                    // hide these sparkles
                    list = new() { new Point3D(5867, 528, 15), new Point3D(5872, 532, 24) };
                    foreach (var px in list)
                        while (HideItem(px))
                            patched++;

                }
                #endregion

                #region Dungeon Wrong Spawners
                if (SiegeStyleShards())
                {
                    // enable P15 spawnerd
                    List<Point3D> list = new()
                    {
                        new Point3D(5825, 600, 1),  // giant rat
                        //new Point3D(5791, 545, 10),
                        //new Point3D(5790, 571, 10),
                        //new Point3D(5790, 579, 10),
                        //new Point3D(5789, 593, 10),
                    };
                    Spawner spawner = null;
                    foreach (var px in list)
                    {
                        if (EnableSpawner(px, ref spawner))
                        {
                            spawner.ScheduleRespawn = true;
                            SetSpawnerFlags(px, SpawnFlags.ClearPath);
                            patched++;
                        }
                    }

                    {   // disable treasure chest(s)
                        list = new List<Point3D>() {
                            new Point3D(5791, 579, 11), new Point3D(5791, 544, 10),new Point3D(5821, 529, 0),
                        };
                        foreach (var px in list)
                        {
                            if (DisableSpawner(px))
                                patched++;
                        }
                    }

                    // add prisoners (Wrong Prisoner West)
                    { // 
                        list = new List<Point3D>() {
                            new Point3D(5790, 555, 10), new Point3D(5790, 563, 10),new Point3D(5790, 571, 10),
                            new Point3D(5790, 579, 10),new Point3D(5790, 587, 10),new Point3D(5790, 594, 10)
                        };
                        foreach (var px in list)
                        {
                            // first disable, move x-1 of an existing spawner
                            if (DisableSpawner(px))
                            {
                                patched++;
                                if (MoveSpawner(old_location: px, new_location: new Point3D(px.X - 1, px.Y, px.Z), ref spawner))
                                    patched++;
                            }

                            // now Add
                            if (AddSpawner(px, new List<string>() { "WrongPrisonerWest" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 0))
                            {
                                patched++;
                            }
                        }
                    }

                    // add executioners
                    {
                        //Point3D px = new Point3D(5793, 544, 10);
                        //AddSpawner(px, new List<string>() { "Executioner" }, coreSpawn: true, count: 2, homeRange: 7);
                        //SetSpawnerFlags(px, SpawnFlags.ClearPath);
                        //patched++;

                        // enable these guys
                        /*Point3D px = new Point3D(5828, 529, 0);
                        if (EnableSpawner(px, ref spawner))
                        {
                            spawner.ScheduleRespawn = true;
                            SetSpawnerFlags(px, SpawnFlags.ClearPath);
                            patched++;
                        }*/
                    }

                    // rebuild golems and golem controllers
                    {
                        {   // disable Nerun's spawner at (5790, 544, 10)
                            Point3D px = new Point3D(5790, 544, 10);
                            foreach (Item item in FindItemsAt(px, Map.Felucca, lenientZ: 2))
                            {
                                if (item is Spawner s && s.Distro == SpawnerModeAttribs.ModeNeruns)
                                {
                                    DisableSpawner(s);
                                    patched++;
                                }
                            }
                        }

                        // add lizardmen
                        {
                            Point3D px = new Point3D(5822, 577, 0);
                            AddSpawner(px, new List<string>() { "LizardMan" }, coreSpawn: false, spawner: ref spawner, count: 2, homeRange: 6);
                        }
                    }
                }
                #endregion Dungeon Wrong Spawners

                #region RazorInstrument
                if (AllShards())
                {   // Make RazorInstrument(LootType.UnStealable | LootType.UnLootable) so that is newbied for reds too
                    foreach (Item item in World.Items.Values)
                        if (item is RazorInstrument ri)
                        {
                            ri.LootType = LootType.UnStealable | LootType.UnLootable;
                            patched++;
                        }
                }
                #endregion RazorInstrument

                #region Orc fort stuffs
                if (SiegeStyleShards())
                {
                    #region Delete extra Orc fort Addon
                    List<Point3D> list = new List<Point3D>() {
                        new Point3D(2075, 1243, 0), // the fort itself
                        new Point3D(2077, 1234, 0), // door 1
                        new Point3D(2078, 1234, 0), // door 2
                        new Point3D(2056, 1251, 5), // door 3
                        new Point3D(2065, 1251, 5), // door 4
                        new Point3D(2065, 1250, 5), // door 5
                        new Point3D(2062, 1239, 0), // door 6
                        new Point3D(2062, 1238, 0), // door 7
                        new Point3D(2066, 1235, 5), // door 8
                        new Point3D(2068, 1231, 5), // door 9
                        new Point3D(2094, 1234, 0), // orc camp
                        new Point3D(2108, 1227, 7), // cave left 1
                        new Point3D(2108, 1227, 7), // cave left 2
                        new Point3D(2109, 1227, 7),  // cave right
                        new Point3D(2108, 1228, 25), // torch
                        new Point3D(2108, 1228, 0),  // teleporter
                    };
                    foreach (var px in list)
                    {
                        Item fort = (Item)FindOneItemAt(px, Map.Felucca, typeof(Item), 2, false);
                        if (fort != null)
                        {
                            fort.Delete();
                            patched++;
                        }
                    }
                    #endregion Delete extra Orc fort Addon

                    {
                        // (5334, 2004, 0) // Add teleporter 
                        Point3D px = new Point3D(5334, 2004, 0);
                        Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele == null)
                        {
                            tele = new Teleporter();
                            tele.PointDest = new Point3D(6126, 1411, 15);
                            tele.MoveToWorld(px, Map.Felucca);
                            patched++;
                        }
                    }

                    {
                        list = new()
                        {
                        new Point3D(6125, 1411, 15), // teleporter
                        new Point3D(6126, 1411, 15), // teleporter
                        new Point3D(6127, 1411, 15), // teleporter
                        };
                        foreach (var px in list)
                        {
                            Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                            if (tele != null)
                            {
                                tele.PointDest = new Point3D(5334, 2004, 0);
                                patched++;
                            }
                        }
                    }

                    {
                        // (6141, 1430, 4) // repoint teleporter 
                        Point3D px = new Point3D(6141, 1430, 4);
                        Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.PointDest = new Point3D(6138, 1409, 2);
                            patched++;
                        }
                    }

                    {
                        // (6140, 1430, 4) // repoint teleporter 
                        Point3D px = new Point3D(6140, 1430, 4);
                        Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.PointDest = new Point3D(6137, 1409, 2);
                            patched++;
                        }
                    }

                    {
                        // (6137, 1409, 2) // repoint teleporter 
                        Point3D px = new Point3D(6137, 1409, 2);
                        Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.PointDest = new Point3D(6140, 1430, 4);
                            patched++;
                        }
                    }

                    {
                        // (6138, 1409, 2) // repoint teleporter 
                        Point3D px = new Point3D(6138, 1409, 2);
                        Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.PointDest = new Point3D(6141, 1430, 4);
                            patched++;
                        }
                    }
                }
                #endregion Orc fort stuffs

                #region PatchRegionFlags
                if (AllShards())
                {
                    List<StaticRegion> allSaveRegions = new List<StaticRegion>(StaticRegion.XmlDatabase);
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.Load(StaticRegion.DataFileName);
                    XmlElement xmlRoot = xmlDoc["StaticRegions"];
                    foreach (XmlElement xmlElem in xmlRoot.GetElementsByTagName("region"))
                    {
                        if (xmlElem.GetAttribute("type") != "StaticRegion")
                            continue;
                        StaticRegion dataRegion = new StaticRegion();
                        dataRegion.Load(xmlElem);
                        int indexOf = allSaveRegions.FindIndex(r => r.Map == dataRegion.Map && r.Name.ToLower() == dataRegion.Name.ToLower());
                        if (indexOf != -1)
                        {
                            StaticRegion saveRegion = allSaveRegions[indexOf];
                            saveRegion.EnableHousing = dataRegion.EnableHousing;
                            saveRegion.EnableStuckMenu = dataRegion.EnableStuckMenu;
                            saveRegion.CanUsePotions = dataRegion.CanUsePotions;
                            saveRegion.CanRessurect = dataRegion.CanRessurect;
                            saveRegion.EnableMusic = dataRegion.EnableMusic;
                            allSaveRegions.RemoveAt(indexOf);
                            patched++;
                        }
                    }

                    /*      Yoar � Today at 2:18 PM
                            Oh and Vesper cemetery is missing a region altogether, But I remember it was possible to place there 
                            Might be a good idea to add a region there
                     */
                }
                #endregion PatchRegionFlags

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static int CountMoonGateWizards()
        {
            int count = 0;

            foreach (Item item in World.Items.Values)
                if (item is Spawner spawner)
                    if (spawner.Spawns("MoonGateWizard") && spawner.Running)
                        count++;

            //foreach (Mobile m in World.Mobiles.Values)
            //if (m is MoonGateWizard)
            //count++;
            return count;
        }
        #endregion PatchV23
        #region PatchV22
        private static int PatchV22(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatchV22;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region NOT AT THIS TIME
#if false
                #region Tracking - Customization
                /*
                 * - Tracking remains to be difficulty based. The rate at which you can track a player depends on your Tracking + Detect Hidden skills vs their Hiding + Stealth skills.
                 * - The tracking range at 20 tracking has been reduced from 12 tiles to 10 tiles.
                 * - The tracking range at GM tracking has been increased from 20 tiles to 50 tiles.
                 */
                if (SiegeStyleShards())
                {
                    CoreAI.TrackRangeBase = 0.0;
                    CoreAI.TrackRangePerSkill = 0.5;
                    CoreAI.TrackRangeMin = 10;
                    CoreAI.TrackDifficulty = true;
                }
                #endregion tracking

                #region RevealSpellDifficulty - Customization
                /*  RevealSpellDifficulty
                 * - As before, the Reveal spell will always reveal players that hid using the Invisibility spell.
                 * - However, the Reveal spell will no longer always reveal players that hid using the Hiding skill. Instead, the rate at which you reveal these players depends on your Magery + Detect Hidden skills vs their Hiding + Stealth skills.
                 */
                if (AngelIsland())
                    CoreAI.RevealSpellDifficulty = true;
                if(SiegeStyleShards())
                    CoreAI.RevealSpellDifficulty = false;
                #endregion
#endif
                #endregion NOT AT THIS TIME

                #region Add random spawn to this island
                if (SiegeStyleShards())
                {
                    Spawner spawner = null;
                    if (AddSpawner(new Point3D(1283, 528, 30), new List<string>() { "bird", "pig", "rabbit" }, coreSpawn: false, spawner: ref spawner, count: 8, homeRange: 20))
                        patched++;
                }
                #endregion Add random spawn to this island

                #region Add Phoenix
                if (SiegeStyleShards())
                {
                    var px = new Point3D(5950, 1316, 9);
                    Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        spawner = new Spawner();
                        spawner.ObjectNamesRaw.Add("Phoenix");
                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        spawner.MoveToWorld(px, Map.Felucca);
                        patched++;
                    }
                }
                #endregion Add Phoenix

                #region Disable more T2A teleporters
                // (6025, 1344, -26), (6025, 1345, -26), (6025, 1346, -26)
                if (AllShards())
                {
                    List<Point3D> list = new() { new Point3D(6025, 1344, -26), new Point3D(6025, 1345, -26), new Point3D(6025, 1346, -26) };
                    foreach (var px in list)
                    {
                        DisbleTeleporter(px);
                        patched++;
                    }
                }
                #endregion Disable more T2A teleporters

                #region Magic Wand Drop Chance
                if (SiegeStyleShards())
                    CoreAI.MagicWandDropChance = 0.02;
                else
                    CoreAI.MagicWandDropChance = 0.00;
                patched++;
                #endregion Magic Wand Drop Chance

                #region Enable various Pub15 Spawners
                if (SiegeStyleShards())
                {
                    Spawner spawner = null;
                    // (1891, 1085, 2), concentric, allshards
                    if (EnableSpawner(new Point3D(1891, 1085, 2), ref spawner))
                    {
                        spawner.Concentric = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                    // (1856, 1076, 0) enable only
                    if (EnableSpawner(new Point3D(1856, 1076, 0), ref spawner))
                    {
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                    // (1871, 1076, 0) move to (1858, 1082, 0)
                    if (MoveSpawner(old_location: new Point3D(1871, 1076, 0), new_location: new Point3D(1858, 1082, 0), ref spawner))
                    {
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                    // (2073, 864, 0) allshards
                    if (EnableSpawner(new Point3D(2073, 864, 0), ref spawner))
                    {
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                    // (2109, 865, 0) concentric, allshards
                    if (EnableSpawner(new Point3D(2109, 865, 0), ref spawner))
                    {
                        spawner.Concentric = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                    // (2110, 864, 0) concentric, allshards
                    if (EnableSpawner(new Point3D(2110, 864, 0), ref spawner))
                    {
                        spawner.Concentric = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                    // (2111, 862, 0) enable
                    if (EnableSpawner(new Point3D(2111, 862, 0), ref spawner))
                    {
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                    // Dupe (2109, 865, 0), move to (2169, 869, 0)
                    if (DupeSpawner(at: new Point3D(2109, 865, 0), to: new Point3D(2169, 869, 0), ref spawner))
                    {
                        if (EnableSpawner(new Point3D(2169, 869, 0), ref spawner, "Supplemental"))
                            patched++;
                    }
                    // Dupe (2110, 864, 0) (2169, 867, 0)
                    if (DupeSpawner(at: new Point3D(2110, 864, 0), to: new Point3D(2169, 867, 0), ref spawner))
                    {
                        if (EnableSpawner(new Point3D(2169, 867, 0), ref spawner, "Supplemental"))
                            patched++;
                    }
                }
                #endregion

                #region Horde Minions
                //  turn off spawner, remove objects
                if (DisableSpawner(new Point3D(3621, 2814, 21)))
                    patched++;
                #endregion Horde Minions

                #region Move buc's spawner
                if (SiegeStyleShards())
                {
                    // from 2816 3499 0
                    // to (2817, 3504, 0)
                    Spawner spawner = null;
                    if (MoveSpawner(old_location: new Point3D(2816, 3499, 0), new_location: new Point3D(2817, 3504, 0), ref spawner))
                        patched++;
                }
                #endregion Move buc's spawner

                #region Patch all UOSpawnMap Spawners
                if (AllShards())
                {
                    string area = "Area";
                    List<Spawner> spawner_list = new();
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spnr)
                            if ((spnr.Name != null && spnr.Name.Contains(area, StringComparison.OrdinalIgnoreCase)) || spnr.Source.Contains(area, StringComparison.OrdinalIgnoreCase))
                                spawner_list.Add(spnr);

                    // normalize
                    Dictionary<int, List<Spawner>> spawner_area_designation = new();
                    foreach (Spawner spnr in spawner_list)
                    {
                        int designation = 0;
                        string text = spnr.Name + " " + spnr.Source;
                        string[] tokens = text.Split(new char[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries);
                        int index = Array.FindIndex(tokens, t => t.Equals(area, StringComparison.OrdinalIgnoreCase));
                        if (index >= 0 && index < tokens.Length - 1)
                        {
                            designation = int.Parse(tokens[index + 1]);
                            if (spawner_area_designation.ContainsKey(designation))
                                spawner_area_designation[designation].Add(spnr);
                            else
                                spawner_area_designation.Add(designation, new List<Spawner>() { spnr });
                        }
                    }

                    foreach (var kvp in spawner_area_designation)
                    {
                        int id = 1;
                        foreach (Spawner target in kvp.Value)
                        {
                            target.Name = null;
                            target.Source = area + " " + string.Format("{0}, {1} of {2}", kvp.Key, id++, kvp.Value.Count);
                            target.CoreSpawn = true;
                            target.Distro = SpawnerModeAttribs.ModeLegacy;
                            target.ModeAI = false;
                            target.ModeNeruns = false;
                            target.Shard = ShardConfig.Core;
                            target.SpawnerFlags = target.SpawnerFlags | SpawnFlags.Concentric;
                            patched++;
                        }
                    }
                }
                #endregion Patch all UOSpawnMap Spawners

                #region Area 30 Spawn
                if (SiegeStyleShards())
                {   // remove manually placed spawners (and we will update our real Area 30 spawner to do the right thing)
                    List<Point3D> list = new() {
                        new Point3D(2019, 947, 0),
                        new Point3D(2004, 977, 0),
                        new Point3D(2034, 977, 0),
                        new Point3D(2064, 977, 0),
                        new Point3D(2004, 1007, 0),
                        new Point3D(2034, 1007, 0),
                        new Point3D(2064, 1007, 0),
                        new Point3D(1974, 1022, 0),
                        new Point3D(2004, 1037, 0),
                        new Point3D(2034, 1037, 0),
                        new Point3D(2064, 1037, 0),
                        new Point3D(2049, 1067, 0),
                     };
                    // delete temporary spawners
                    foreach (Point3D px in list)
                    {
                        DeleteSpawner(px);
                        patched++;
                    }

                    // okay, now fix our Area 30 spawner
                    // 
                    Spawner spawner = (Spawner)FindOneItemAt(new Point3D(2034, 1012, 0), Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                    {
                        spawner.RemoveObjects();
                        spawner.ObjectNamesRaw.Clear();
                        spawner.ObjectNamesRaw.Add("lizardman");
                        spawner.ObjectNamesRaw.Add("alligator");
                        spawner.ObjectNamesRaw.Add("snake");
                        spawner.Count = 24; // was 12
                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion Area 30 Spawn

                #region Region Fix for IsTownRegion
                if (AllShards())
                {
                    foreach (StaticRegion sr in StaticRegion.XmlDatabase)
                    {
                        if (Array.IndexOf(m_TownNames, sr.Name) != -1 || (sr.IsGuarded && CountVendors(sr) >= 5))
                        {
                            sr.UseTownRules = true;
                            patched++;
                        }
                    }
                }
                #endregion Region Fix for IsTownRegion

                #region Region Fix enter/exit messages
                if (AllShards())
                {
                    foreach (StaticRegion sr in StaticRegion.XmlDatabase)
                    {
                        if (sr.UseTownRules || sr.IsDungeonRules || sr.IsJailRules || sr.IsAngelIslandRules || sr.IOBZone)
                        {
                            sr.ShowEnterMessage = true;
                            sr.ShowExitMessage = true;
                            patched++;
                        }
                    }
                }
                #endregion Region Fix enter/exit messages

                #region More Buc's Spawners
                if (SiegeStyleShards())
                {
                    Spawner spawner = null;
                    // Scribe
                    Point3D px = new Point3D(2746, 2116, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "Scribe" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 4))
                        patched++;

                    // Shipwright
                    px = new Point3D(2734, 2252, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "Shipwright" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 4))
                        patched++;

                    // Tinker
                    px = new Point3D(2635, 2082, 10);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "Tinker" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 4))
                        patched++;

                    // Herbalist
                    px = new Point3D(2778, 2131, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "Herbalist" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 4))
                        patched++;
                }
                #endregion  More Buc's Spawners

                #region Delete orphaned keys
                if (SiegeStyleShards())
                {
                    List<Key> key_list = new List<Key>();
                    List<KeyRing> ring_list = new List<KeyRing>();
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is Key key && !key.Deleted)
                        {
                            if (key.Map == Map.Internal && key.RootParent == null)
                                if (key.IsIntMapStorage == true)
                                {
                                    key_list.Add(key);
                                }
                        }

                        if (item is KeyRing keyring && !keyring.Deleted)
                        {
                            ring_list.Add(keyring);
                        }
                    }

                    int orphans = 0;
                    int loved = 0;
                    bool found = false;
                    List<Key> orphaned_key_list = new List<Key>();
                    foreach (Key key in key_list)
                    {
                        found = false;
                        foreach (KeyRing keyring in ring_list)
                        {
                            if (keyring.IsKeyOnRing(key.Serial))
                            {   // not an orphan
                                loved++;
                                found = true;
                                break;
                            }
                        }
                        if (!found)
                        {
                            orphans++;
                            patched++;
                            orphaned_key_list.Add(key);
                        }
                    }

                    foreach (Key key in orphaned_key_list)
                        key.Delete();
                }
                #endregion Delete orphaned keys

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        private static bool DisbleTeleporter(Point3D px)
        {
            Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
            if (tele != null)
                tele.Running = false;

            return (tele != null);
        }
        private static int CountVendors(Region region)
        {
            if (region.Map == null)
                return 0;
            int count = 0;
            foreach (Rectangle3D rect in region.Coords)
            {
                Rectangle2D rect2D = new Rectangle2D(rect.Start, rect.End);
                foreach (Mobile m in region.Map.GetMobilesInBounds(rect2D))
                {
                    if (m is BaseVendor)
                    {
                        BaseVendor vendor = (BaseVendor)m;
                        if (vendor.IsActiveSeller && vendor.Spawner != null && region.Contains(vendor.Spawner.Location))
                            count++;
                    }
                }
            }
            return count;
        }
        private static readonly string[] m_TownNames = new string[]
            {
                "Britain",
                "Britannia Royal Zoo",
                "Cove",
                "Delucia",
                "Jhelom",
                "Magincia",
                "Minoc",
                "Moonglow",
                "Nujel'm",
                "Ocllo",
                "Papua",
                "Serpent's Hold",
                "Skara Brae",
                "Trinsic",
                "Vesper",
                "Wind",
                "Yew",
            };
        #endregion PatchV22
        #region BetaReadyV21
        private static int BetaReadyV21(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV21;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Bring to home
                if (SiegeStyleShards())
                {
                    foreach (Mobile mob in World.Mobiles.Values)
                        if (mob is BaseCreature bc && !bc.Deleted && bc.Spawner != null)
                            if (bc.Map != null && bc.Map != Map.Internal && bc.Spawner.Map != null && bc.Spawner.Map != Map.Internal)
                                if (bc.Spawner.Distro == SpawnerModeAttribs.ModeLegacy)
                                    if (bc.Home != bc.Spawner.Location)
                                    {
                                        bc.Home = bc.Spawner.Location;
                                        bc.MoveToWorld(bc.Spawner.Location, bc.Spawner.Map);
                                        patched++;
                                    }
                }
                #endregion Bring to home

                #region Add Spawners To Deceit
                if (SiegeStyleShards())
                {
                    // two lich two lichlord here
                    Point3D px = new Point3D(5311, 748, -20);
                    Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        // do we need classification here?
                        // UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false, uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                        spawner = new();
                        spawner.Distro = SpawnerModeAttribs.ModeMulti;
                        spawner.ObjectNamesRaw.Add("lich");
                        spawner.ObjectNamesRaw.Add("lichlord");
                        spawner.Counts = "2,2";
                        spawner.HomeRange = 8;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }

                    // one lichlord here
                    px = new Point3D(5267, 691, 0);
                    spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        // do we need classification here?
                        // UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false, uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                        spawner = new();
                        spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        spawner.ObjectNamesRaw.Add("lichlord");
                        spawner.Count = 1;
                        spawner.HomeRange = 4;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }

                    // two lich here
                    px = new Point3D(5264, 656, 0);
                    spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner == null)
                    {
                        // do we need classification here?
                        // UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false, uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                        spawner = new();
                        spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        spawner.ObjectNamesRaw.Add("lich");
                        spawner.Count = 2;
                        spawner.HomeRange = 5;
                        spawner.WalkRange = 8;
                        spawner.MoveToWorld(px, Map.Felucca);
                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion Add Spawners To Deceit

                #region Update Buc's Spawners
                if (SiegeStyleShards())
                {
                    Spawner spawner = null;
                    // mages
                    Point3D px = new Point3D(2747, 2116, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "mage" }, coreSpawn: true, spawner: ref spawner, count: 2, homeRange: 4))
                        patched++;

                    // evil healers
                    px = new Point3D(2707, 2147, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "evilHealer" }, coreSpawn: true, spawner: ref spawner, count: 2, homeRange: 4))
                        patched++;

                    // Alchemists
                    px = new Point3D(2779, 2131, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "alchemist" }, coreSpawn: true, spawner: ref spawner, count: 2, homeRange: 4))
                        patched++;

                    // Animal trainer 
                    px = new Point3D(2715, 2211, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "animalTrainer" }, coreSpawn: true, spawner: ref spawner, count: 1, homeRange: 4))
                        patched++;

                    // Tailor 
                    px = new Point3D(2755, 2219, 0);
                    if (DeleteSpawner(px))
                        patched++;
                    if (AddSpawner(px, new List<string>() { "tailor" }, coreSpawn: true, spawner: ref spawner, count: 2, homeRange: 4))
                        patched++;
                }

                #endregion Update Buc's Spawners

                #region Allow Pets on Wind Teleporters
                if (SiegeStyleShards())
                {
                    Point3D px = new Point3D(5191, 152, 0);
                    Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                    if (tele != null)
                        tele.Pets = true;

                    px = new Point3D(5200, 71, 17);
                    tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                    if (tele != null)
                        tele.Pets = true;

                    px = new Point3D(5217, 18, 15);
                    tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                    if (tele != null)
                        tele.Pets = true;
                }
                #endregion Allow Pets on Wind Teleporters

                #region Patch TownshipStone Registration
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is TownshipStone ts)
                        {
                            ts.Registered = true;
                            patched++;
                        }
                }
                #endregion Patch TownshipStone Registration

                #region Make Ilshenar EventConfirmationSungate's permanent
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() { new Point3D(1362, 1105, -26), new Point3D(1365, 1105, -26) };
                    foreach (Point3D px in list)
                    {
                        EventConfirmationSungate sungate = (EventConfirmationSungate)FindOneItemAt(px, Map.Ilshenar, typeof(EventConfirmationSungate), 2, false);
                        if (sungate != null)
                        {
                            sungate.DurationOverride = true;
                            sungate.Duration = TimeSpan.FromHours(8000);
                            sungate.Countdown = TimeSpan.FromSeconds(5);
                        }
                    }
                }
                #endregion Make Ilshenar EventConfirmationSungate's permanent

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }

        #endregion BetaReadyV21
        #region BetaReadyV20
        private static int BetaReadyV20(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV20;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Fixes to Fire Temple
                if (SiegeStyleShards())
                {
                    // enable area 48 spawner                        
                    Spawner spawner = (Spawner)FindOneItemAt(new Point3D(4595, 3572, 75), Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                    {
                        // reclassify here as 'all shards'
                        UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        spawner.Running = true;
                        spawner.HomeRange = 9;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }

                    // disable Nerun's spawner
                    List<Item> spawners = (List<Item>)FindItemsAt(new Point3D(4595, 3576, 30), Map.Felucca);
                    foreach (Item it in spawners)
                        if (it is Spawner s && s.Distro == SpawnerModeAttribs.ModeNeruns)
                        {
                            s.Running = false;
                            s.RemoveObjects();
                            patched++;
                        }

                    // set Nerun's to ClearPath
                    spawners = (List<Item>)FindItemsAt(new Point3D(4569, 3572, 30), Map.Felucca);
                    foreach (Item it in spawners)
                        if (it is Spawner s && s.Distro == SpawnerModeAttribs.ModeNeruns)
                        {
                            s.SpawnerFlags = spawner.SpawnerFlags | SpawnFlags.ClearPath;
                            s.RemoveObjects();
                            s.ScheduleRespawn = true;
                            patched++;
                        }

                    // disable Nerun's spawner
                    spawners = (List<Item>)FindItemsAt(new Point3D(4620, 3572, 30), Map.Felucca);
                    foreach (Item it in spawners)
                        if (it is Spawner s && s.Distro == SpawnerModeAttribs.ModeNeruns)
                        {
                            s.Running = false;
                            s.RemoveObjects();
                            patched++;
                        }

                    // enable area 48 spawner
                    spawner = (Spawner)FindOneItemAt(new Point3D(4592, 3570, 30), Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                    {
                        // reclassify here as 'all shards'
                        UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }

                    // enable pub15 spawner
                    spawner = (Spawner)FindOneItemAt(new Point3D(4620, 3567, 30), Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                    {
                        // reclassify here as 'all shards'
                        UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        spawner.Running = true;
                        spawner.SpawnerFlags = spawner.SpawnerFlags | SpawnFlags.ClearPath;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }

                    // set Nerun's spawner to ClearPath 
                    spawners = (List<Item>)FindItemsAt(new Point3D(4597, 3608, 30), Map.Felucca);
                    foreach (Item it in spawners)
                        if (it is Spawner s && s.Distro == SpawnerModeAttribs.ModeNeruns)
                        {
                            s.SpawnerFlags = spawner.SpawnerFlags | SpawnFlags.ClearPath;
                            s.RemoveObjects();
                            s.ScheduleRespawn = true;
                            patched++;
                        }
                }
                #endregion Fixes to Fire Temple

                #region Update All Spawner Graphics (on/off)
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner)
                        {
                            spawner.UpdateDisplay();
                            patched++;
                        }
                }
                #endregion Update All Spawner Graphics (on/off)

                #region All existing guards' spawners should be ClearPath
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Running && spawner.Spawns(typeof(BaseGuard)))
                        {
                            spawner.SpawnerFlags = spawner.SpawnerFlags | SpawnFlags.ClearPath;
                            spawner.RemoveObjects();
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                }
                #endregion Update All Spawner Graphics (on/off)

                #region Add Item Blocker at Yew Orc Fort
                if (AllShards())
                {
                    NoDropTarget ndt = (NoDropTarget)FindOneItemAt(new Point3D(634, 1492, 0), Map.Felucca, typeof(NoDropTarget), 2, false);
                    if (ndt == null)
                    {
                        ndt = new NoDropTarget();
                        ndt.MoveToWorld(new Point3D(634, 1492, 0), Map.Felucca);
                        patched++;
                    }
                }
                #endregion Add Item Blocker at Yew Orc Fort

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #endregion BetaReadyV20
        #region BetaReadyV19
        private static int BetaReadyV19(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV19;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Turn on Hire Fighters in Jhelom fighting pit
                if (SiegeStyleShards())
                {
                    Spawner spawner = (Spawner)FindOneItemAt(new Point3D(1399, 3742, -21), Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                    {
                        // reclassify here as 'all shards'
                        UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        spawner.Running = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion Turn on Hire Fighters in Jhelom fighting pit

                #region Replace Fire Gargoyles with regular
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                    {
                        bool bChanged = false;
                        if (item is Spawner spawner && spawner is PushBackSpawner pbs)
                            if (spawner.Spawns("FireGargoyle"))
                            {
                                for (int ix = 0; ix < spawner.ObjectNamesRaw.Count; ix++)
                                    if (spawner.ObjectNamesRaw[ix] is string s && !string.IsNullOrEmpty(s) && s.Equals("FireGargoyle", StringComparison.OrdinalIgnoreCase))
                                    {
                                        bChanged = true;
                                        spawner.ObjectNamesRaw[ix] = s.Replace("FireGargoyle", "Gargoyle");
                                        patched++;
                                    }

                                if (bChanged)
                                    spawner.ScheduleRespawn = true;
                            }
                    }
                }
                #endregion Replace Fire Gargoyles with regular

                #region Solens
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new List<Point3D>() { new Point3D(1942, 3261, 2), new Point3D(3217, 500, 0) };
                    foreach (Point3D px in list)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                        {
                            spawner.Running = false;
                            spawner.RemoveObjects();
                            patched++;
                        }
                    }
                }
                #endregion Solens
                #region Disable Keyword Teles
                if (SiegeStyleShards())
                {
                    List<Point3D> list = new() { new Point3D(5736, 3196, 10), new Point3D(5974, 2697, 35),
                        new Point3D(5974, 2697, 35), new Point3D(5267, 2757, 35)};
                    foreach (var pt in list)
                    {
                        Teleporter tele = (Teleporter)FindOneItemAt(pt, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.Running = false;
                            patched++;
                        }
                    }
                }
                #endregion Disable Keyword Teles
                #region Replace Sea Horses
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner spawner && spawner.Spawns(type: typeof(SeaHorse)))
                        {
                            int index = SpawnerIndexOf(spawner, "seahorse");
                            List<string> names = spawner.ObjectNamesParsed;
                            names = names.ConvertAll(d => d.ToLower());
                            List<string> raw = spawner.ObjectNamesRaw.Cast<string>().ToList();
                            List<string> core = new() { "dolphin", "seaserpent", "waterelemental", "deepseaserpent", "kraken" };
                            var result = core.Where(p => !names.Any(p2 => p2.Equals(p)));
                            if (result.Count() > 0)
                                // give them what's not in the list
                                foreach (string name in result)
                                {
                                    string temp = spawner.ObjectNamesRaw[index] as string;
                                    temp = temp.Replace("seahorse", name, StringComparison.OrdinalIgnoreCase);
                                    spawner.ObjectNamesRaw[index] = temp;
                                    spawner.RemoveObjects();
                                    spawner.ScheduleRespawn = true;
                                    patched++;
                                    break;
                                }
                            else
                            {
                                // select something at random
                                string temp = spawner.ObjectNamesRaw[index] as string;
                                int str_index = Utility.RandomMinMaxScaled(0, core.Count - 1);
                                temp = temp.Replace("seahorse", core[str_index], StringComparison.OrdinalIgnoreCase);
                                spawner.ObjectNamesRaw[index] = temp;
                                spawner.RemoveObjects();
                                spawner.ScheduleRespawn = true;
                                patched++;
                            }
                        }
                }
                #endregion Replace Sea Horses
                #region Add Trainer Chests to all Banks
                if (SiegeStyleShards())
                {
                    List<BaseContainer> containers = new();
                    foreach (Mobile m in World.Mobiles.Values)
                    {
                        if (m is Banker || m is Minter && m.Map == Map.Felucca)
                        {
                            IPooledEnumerable eable = m.GetItemsInRange(20);
                            foreach (Item item in eable)
                                if (item is BaseContainer bc && !containers.Contains(bc))
                                    containers.Add(item as BaseContainer);
                            eable.Free();
                        }
                    }

                    foreach (BaseContainer bc in containers)
                    {
                        if (!bc.Movable && bc is not DungeonTreasureChest && bc is MetalChest || bc is WoodenChest)
                        {
                            Spawner spawner = new Spawner();
                            spawner.GraphicID = bc.ItemID;  // need to get the correct 'flip' direction
                            spawner.ObjectNamesRaw.Add("L0TreasureChest");
                            spawner.HomeRange = 0;
                            spawner.MaxDelay = TimeSpan.FromMinutes(10);
                            spawner.MinDelay = TimeSpan.FromMinutes(5);
                            spawner.MoveToWorld(bc.Location, Map.Felucca);
                            spawner.ScheduleRespawn = true;
                            // reclassify here as 'all shards'
                            UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                                uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                            bc.Delete();
                            patched++;
                        }
                    }
                }
                #endregion Add Trainer Chests to all Banks

                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #endregion BetaReadyV19
        #region BetaReadyV18
        private static int BetaReadyV18(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV18;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Reset all MachineInfo
#if false
                if (AllShards())
                {   // We discovered a few people colliding with matching machine info.
                    //  It should be impossible. I must assume that some early version of MachineInfo
                    //  placed some non unique seed in several accounts whereby causing this error.
                    //  A hacker could also cause this by faking the machine info =\
                    EchoOut("Updating Global Account Database...", ConsoleColor.Yellow);
                    foreach (Accounting.Account current in Accounting.Accounts.Table.Values)
                    {
                        //current.HardwareInfo = null;
                        //current.HardwareHash = 0;
                        //current.HardwareHashRaw = 0;
                        //current.Machines.Clear();
                        //current.Machines.Add(0);
                        //current.Flags &= ~Account.AccountFlag.ExceedsMachineInfoLimit;
                        //AccountsDatabase.SaveAccount(current);
                        patched++;
                    }
                    EchoOut("Updating of Global Account Database complete", ConsoleColor.Yellow);
                }
#endif
                #endregion Reset all MachineInfo
                #region Establish Area Peace Settings
                if (SiegeStyleShards())
                {   // 12s max
                    /*CoreAI.AreaPeaceCrowdSize = 6;
                    CoreAI.AreaPeaceDelayBase = 1.0;
                    CoreAI.AreaPeaceDelayBonus = 3.0;
                    CoreAI.AreaPeaceSoloBonus = 2.0;*/
                    // 6s max, one creature, 100 skill
                    CoreAI.AreaPeaceDelayBase = 1.0;
                    CoreAI.AreaPeaceDelayBonus = 2.0;
                    CoreAI.AreaPeaceCrowdSize = 6;
                    CoreAI.AreaPeaceSoloBonus = 1.0;
                    patched++;
                }
                //(1276, 1486, 7)
                #endregion Establish Area Peace Settings
                #region Remove orphaned oven
                if (SiegeStyleShards())
                {
                    AddonComponent addon = (AddonComponent)FindOneItemAt(new Point3D(1276, 1486, 7), Map.Felucca, typeof(AddonComponent), 2, false);
                    if (addon != null)
                    {
                        addon.Delete();
                        patched++;
                    }
                }
                #endregion Remove orphaned oven
                #region Covetous Mountain Pass Teleporters
                if (SiegeStyleShards())
                {
                    Teleporter tele = (Teleporter)FindOneItemAt(new Point3D(5393, 1959, 0/*1*/), Map.Felucca, typeof(Teleporter), 2, false);
                    if (tele != null)
                    {
                        tele.Z = 1;
                        patched++;
                    }
                    tele = (Teleporter)FindOneItemAt(new Point3D(5394, 1959, 0/*3*/), Map.Felucca, typeof(Teleporter), 2, false);
                    if (tele != null)
                    {
                        tele.Z = 3;
                        patched++;
                    }
                }
                #endregion Covetous Mountain Pass Teleporters
                #region Respawn dungeon chests
                if (AllShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (item is Spawner sp && sp.Spawns("TreasureChest"))
                        {
                            sp.ScheduleRespawn = true;
                            patched++;
                        }
                }
                #endregion Respawn dungeon chests
                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #endregion BetaReadyV18
        #region BetaReadyV17
        private static int BetaReadyV17(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV17;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Replace 'deck tile' with feather
                if (Core.RuleSets.SiegeStyleRules())
                {
                    List<Item> list = new();
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is null || item.Deleted)
                            continue;
                        if (item is MountItem && item.Parent is Backpack)
                        {   // prison wasn't dismounting players, so it dropped the MountItem in their backpack.
                            list.Add(item);
                        }
                    }

                    foreach (Item item in list)
                    {
                        ReplaceItem(new Feather(), item, copy_properties: false);
                        item.Delete();
                    }
                }
                #endregion Replace 'deck tile' with feather
                #region Replace AI Stingers with an AISouvenir
                if (Core.RuleSets.SiegeStyleRules())
                {
                    List<Item> list = new();
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is null || item.Deleted)
                            continue;
                        if (item is AIStinger)
                        {   // see if they are still in prison
                            if (item.RootParent is PlayerMobile pm && pm.PrisonInmate == true)
                                continue;
                            // otherwise, it shouldn't be out there
                            list.Add(item);
                        }
                    }

                    foreach (Item item in list)
                    {
                        ReplaceItem(AITeleportHelper.AISouvenir(), item, copy_properties: false);
                        item.Delete();
                    }
                }
                #endregion Replace AI Stingers with an AISouvenir
                #region Patch All Ankhs
                if (AllShards())
                {
                    patched += Ankhs.PatchAllAnkhs();
                }
                #endregion Patch All Ankhs
                #region Britain Farms Patch
                if (SiegeStyleShards())
                {
                    BritainFarmsPatch();
                    patched++;
                }
                #endregion Britain Farms Patch
                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #region BritainFarmsPatch
        private static void BritainFarmsPatch()
        {
            StaticRegion britain = Region.FindByName("Britain", Map.Felucca) as StaticRegion;
            int indexOf = -1;
            for (int i = 0; i < britain.Coords.Count && indexOf == -1; i++)
            {
                Rectangle3D rect = britain.Coords[i];
                if (rect.Start.X == 1093 && rect.Start.Y == 1538 && rect.Width == 292 && rect.Height == 369)
                    indexOf = i;
            }
            if (indexOf == -1)
            {
                //e.Mobile.SendMessage("Failed to generate Britain Farms region.");
                return;
            }
            // save Britain region as XML
            XmlDocument xmlDoc = new XmlDocument();
            XmlElement xmlElem = xmlDoc.CreateElement("region");
            xmlElem.SetAttribute("type", britain.GetType().Name);
            britain.Save(xmlElem);
            // create new Britain Farms region
            StaticRegion britainFarms = new StaticRegion("", "Britain Farms", Map.Felucca, typeof(WarriorGuard));
            // load Britain Farms region from XML
            britainFarms.Load(xmlElem);
            StaticRegion.XmlDatabase.Add(britainFarms);
            // adjust props
            britainFarms.ShowEnterMessage = false;
            britainFarms.ShowExitMessage = false;
            britainFarms.GoLocation = new Point3D(1321, 1751, 10);
            // adjust areas
            britain.Registered = false;
            britain.Coords.RemoveAt(indexOf);
            britain.Coords.Add(new Rectangle3D(1296, 1560, sbyte.MinValue, 89, 136, byte.MaxValue));
            britain.Coords.Add(new Rectangle3D(1284, 1706, sbyte.MinValue, 101, 211, byte.MaxValue));
            britain.Registered = true;
            britainFarms.Registered = false;
            britainFarms.Coords.Clear();
            britainFarms.Coords.Add(new Rectangle3D(1093, 1538, sbyte.MinValue, 203, 168, byte.MaxValue));
            britainFarms.Coords.Add(new Rectangle3D(1093, 1706, sbyte.MinValue, 191, 201, byte.MaxValue));
            britainFarms.Registered = true;
            // add region controller
            bool hasController = false;
            foreach (Item item in Map.Felucca.GetItemsInRange(new Point3D(5429, 1167, 0), 0))
            {
                if (item is StaticRegionControl)
                    hasController = true;
                break;
            }
            if (!hasController)
            {
                StaticRegionControl src = new StaticRegionControl();
                src.StaticRegion = britainFarms;
                src.MoveToWorld(new Point3D(5429, 1167, 0), Map.Felucca);
            }
            //e.Mobile.SendMessage("Successfully generated Britain Farms region.");
        }
        #endregion
        #endregion BetaReadyV17
        #region BetaReadyV16
        private static int BetaReadyV16(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV16;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Fix missing tiles in Covetous
                if (AllShards())
                {
                    List<Point3D> list = new() { new Point3D(5592, 1840, -3), new Point3D(5592, 1841, -3), new Point3D(5592, 1842, -3) };
                    foreach (var pt in list)
                    {
                        Static tile = new(0x7A3);
                        tile.MoveToWorld(pt, Map.Felucca);
                        patched++;
                    }
                }
                #endregion Fix missing tiles in Covetous
                #region Revert Hythloth 'directional' teleporters
                #region More Info
                /* 
                 * Don't really understand the problem here, it's not obvious. But I suspect it has to do 
                 * with both teleporters having the same directionality, and perhaps how the mobile is facing.
                 * We will punt for now, for launch.
                 */
                #endregion More Info
                if (AllShards())
                {
                    List<Point3D> list = new() { new Point3D(4723, 3813, 0), new Point3D(4722, 3813, 0) , new Point3D(4721, 3813, 0) ,
                    new Point3D(5906, 16, 64), new Point3D(5905, 16, 64), new Point3D(5904, 16, 64)};
                    foreach (var pt in list)
                    {
                        Teleporter tele = (Teleporter)FindOneItemAt(pt, Map.Felucca, typeof(Teleporter), 2, false);
                        if (tele != null)
                        {
                            tele.Directional = false;
                            patched++;
                        }
                    }
                }
                #endregion Revert Hythloth 'directional' teleporters
                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #endregion BetaReadyV16
        #region BetaReadyV15
        private static int BetaReadyV15(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV15;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Skill Gain Bonus
                if (SiegeStyleShards())
                {
                    SkillGainSystem.Bonus = 0.0;
                    patched++;
                }
                #endregion
                #region Respawn World
                // changed SBInfo for Architect to remove custom houses
                if (SiegeStyleShards())
                {
                    patched += TotalRespawn();
                }
                #endregion Respawn World
                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #endregion BetaReadyV15
        #region BetaReadyV14
        private static int BetaReadyV14(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV14;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Outcasts guild stone
                // we have a new model for 'too many accounts' on our shards
                // Blocking on EventSink_GameLogin just hangs the client (Both CUO and OSI.)You can only gracefully
                //  We instead log in the abhorrent account into prison, make the mortal, and add them to this outcast guild
                if (AllShards())
                {
                    Mobile gm = World.GetAdminAcct();
                    Guild guild = new Guild(gm, "The Outcasts", "ToC");

                    if (gm.Guild != null)
                        ((Guild)gm.Guild).ResignMember(gm);

                    gm.Guild = guild;
                    gm.GuildTitle = "Guildmaster";
                    Guildstone gs = new Guildstone(guild);
                    guild.Guildstone = gs;
                    gs.FixedGuildmaster = true; // guild master does not change
                    gs.GuildAlignment = AlignmentType.Outcast;
                    gs.GuildWarRing = true;     // at war with everyone
                    gs.NoResign = true;         // you cannot resign
                    gs.IsStaffOwned = true;     // so cron does not delete this guild stone not in a house
                    gs.IsNoCountingGuild = true;// cannot report murder
                    gs.MoveToWorld(new Point3D(352, 838, 20), Map.Felucca);
                    patched++;
                }
                #endregion Outcasts guild stone
                #region Death Trap
                if (AllShards())
                {
                    List<Point3D> list = new() { new Point3D(354, 834, 0) };
                    foreach (var pt in list)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(pt, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner == null)
                        {
                            spawner = new Spawner();
                            spawner.ObjectNamesRaw.Add("rottingcorpse");
                            spawner.Count = 3;
                            spawner.HomeRange = 2;
                            spawner.MoveToWorld(pt, Map.Felucca);
                            // reclassify here as 'all shards'
                            UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                                uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                            spawner.Running = true;
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                    }
                }
                #endregion Death Trap
                #region explosion potions
                if (SiegeStyleShards())
                {   // point based vs mobile based
                    CoreAI.ExplosionPotionTargetMethod = EPTM.PointBased;
                }
                #endregion explosion potions
                #region Trees to protect orc fort
                if (SiegeStyleShards())
                {
                    Server.Engines.Plants.PlantAddon tree = new Server.Engines.Plants.PlantAddon("tree1");
                    tree.MoveToWorld(new Point3D(615, 1464, 0), Map.Felucca);
                    tree = new Server.Engines.Plants.PlantAddon("tree2");
                    tree.MoveToWorld(new Point3D(613, 1486, 0), Map.Felucca);
                    tree = new Server.Engines.Plants.PlantAddon("ohiitree");
                    tree.MoveToWorld(new Point3D(613, 1477, 0), Map.Felucca);
                }
                #endregion Trees to protect orc fort
                #region Respawn World
                if (AllShards())
                {
                    patched += TotalRespawn();
                }
                #endregion Respawn World
                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #endregion BetaReadyV14
        #region BetaReadyV13
        private static int BetaReadyV13(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV13;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Hide Bob Champ (and other champ maint.) (Siege)
                if (SiegeStyleShards())
                {   // (1392, 3785)+(7, 8)
                    IPooledEnumerable eable = Map.Felucca.GetItemsInBounds(new Rectangle2D(1392, 3785, 7, 8));

                    foreach (Item item in eable)

                        if (item is not null && item.Deleted == false)
                        {
                            item.Visible = false;
                            item.Z -= 5;
                        }
                    // disable all seasonal champs
                    ResetChampsWorker(bits, ref patched);
                }
                #endregion Hide Bob Champ (and other champ maint.) (Siege)
                #region  CoreManagementConsole, we need to set MeleePoisonSkillFactor false
                if (SiegeStyleShards())
                    CoreAI.ClearDynamicFeature(CoreAI.FeatureBits.MeleePoisonSkillFactor);
                #endregion  CoreManagementConsole, we need to set MeleePoisonSkillFactor false
                #region Patch New member names (Siege)
                if (SiegeStyleShards())
                {
                    foreach (BaseGuild g in BaseGuild.List.Values)
                    {
                        Guild guild = g as Guild;
                        if (guild != null)
                        {
                            if (guild.Abbreviation.Contains("Cob", StringComparison.OrdinalIgnoreCase))
                            {   // the current guild master cannot be voted out
                                guild.FixedGuildmaster = true;
                                foreach (var mem in guild.Members)
                                {   // guildmaster can-change her own title later as she sees fit.
                                    (mem as Server.Mobiles.PlayerMobile).GuildTitle = "Citizen";
                                    patched++;
                                }
                            }
                        }
                    }
                }
                #endregion Patch New member names  (Siege)
                #region Turn off Moongate Wizards (Siege)
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (IsFelucca(item) && item is Spawner s)
                        {
                            if (s.Spawns("MoonGateWizard"))
                            {
                                s.Running = false;
                                s.RemoveObjects();
                                patched++;
                            }
                        }
                }
                #endregion Turn off Moongate Wizards (Siege)
                #region Turn on banker in Cove (Siege)
                if (SiegeStyleShards())
                {
                    // (2227, 1199, 0)
                    // (2227, 1198, 0)
                    List<Point3D> list = new() { new Point3D(2227, 1199, 0), new Point3D(2227, 1198, 0) };
                    foreach (var pt in list)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(pt, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                        {
                            // reclassify here as 'all shards'
                            UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                                uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                            spawner.Running = true;
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                    }
                }
                #endregion Turn on banker in Cove (Siege)
                #region Turn off Jukas
                // Jukas appeared in Ultima Online's third expansion. Electronic Arts sponsored a launch party for the expansion on April 6, 2001. 
                //  So they are 'in era' However, the Siege folks say they weren't on Siege, or at least in Wrong.
                //  https://www.uoguide.com/Ultima_Online:_Third_Dawn
                //  https://www.uoguide.com/Juka
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                        if (IsFelucca(item) && item is Spawner s)
                        {
                            if (s.Spawns("juka"))
                            {
                                s.Running = false;
                                s.RemoveObjects();
                                patched++;
                            }
                        }
                }
                #endregion Turn off Jukas
                #region Add Nightmare in Covetous level 2
                if (SiegeStyleShards())
                {
                    // (5584, 2012, 0)
                    List<Point3D> list = new() { new Point3D(5584, 2012, 0) };
                    foreach (var pt in list)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(pt, Map.Felucca, typeof(Spawner), 2, false);
                        if (spawner != null)
                        {
                            // reclassify here as 'all shards'
                            UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                                uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                            spawner.Running = true;
                            spawner.ScheduleRespawn = true;
                            patched++;
                        }
                    }
                }
                #endregion Add Nightmare in Covetous level 2
                #region Respawn World
                if (AllShards())
                {
                    TotalRespawn();
                }
                #endregion Respawn World
                #endregion End Implementation
                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }
            return patches;
        }
        #endregion BetaReadyV13
        #region BetaReadyV12
        private static int BetaReadyV12(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV12;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region New Player Starting Area and New Guild (Siege)
                if (SiegeStyleShards())
                {
                    CoreAI.ClearDynamicFeature(CoreAI.FeatureBits.NewPlayerStartingArea);
                    // New guild is now on
                    //CoreAI.ClearDynamicFeature(CoreAI.FeatureBits.NewPlayerGuild);
                    patched += 1;
                }
                #endregion New Player Starting Area and New Guild (Siege)
                #region Convert unusual chests to dungeon chests (Siege)
                if (SiegeStyleShards())
                {
                    Mute();
                    patched += UnusualContainerSpawner.WipeContainerCache();
                    patched += UnusualContainerSpawner.RebuildContainerCache();
                    Unmute();
                }
                #endregion Convert unusual chests to dungeon chests (Siege)
                #endregion End Implementation

                EchoOut(String.Format("{1} patched with {0} objects updated", patched, GetPatchName(bits)), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion BetaReadyV12
        #region BetaReadyV11
        private static int BetaReadyV11(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV11;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Wind Solen Spawners
                if (SiegeStyleShards())
                {
                    // turn off this spawner. Siege folks complain it wasn't there 'back in the day'
                    Spawner spawner = (Spawner)FindOneItemAt(new Point3D(1359, 893, 0), Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                    {
                        spawner.Running = false;
                        spawner.RemoveObjects();
                        patched++;
                    }
                }
                #endregion Wind Solen Spawners
                #region Orc goodies (Siege Only)
                if (SiegeStyleShards())
                {
                    // spinning wheel south addon (674, 1200, 0)
                    SpinningwheelSouthAddon swsa = (SpinningwheelSouthAddon)FindOneItemAt(new Point3D(674, 1200, 0), Map.Felucca, typeof(SpinningwheelSouthAddon), 2, false);
                    if (swsa == null)
                    {
                        swsa = new();
                        swsa.MoveToWorld(new Point3D(674, 1200, 0), Map.Felucca);
                        patched++;
                    }

                    // loom south addon (677, 1200, 1)
                    LoomSouthAddon lsa = (LoomSouthAddon)FindOneItemAt(new Point3D(677, 1200, 1), Map.Felucca, typeof(LoomSouthAddon), 2, false);
                    if (lsa == null)
                    {
                        lsa = new();
                        lsa.MoveToWorld(new Point3D(677, 1200, 1), Map.Felucca);
                        patched++;
                    }
                }
                #endregion Orc goodies (Siege Only)
                #region Evil Orcs! (Siege Only)
                if (SiegeStyleShards())
                {
                    // record items before
                    List<Item> before = Before(Map.Felucca);
                    // stuff

                    Generate(Path.Combine(Core.DataDirectory, "Decoration/Felucca"),
                        DecoMode.add, file: "*.cfg", listOnly: false, types: new Type[] { typeof(BaseAddon) }, maps: new Map[] { Map.Felucca });
                    Generate(Path.Combine(Core.DataDirectory, "Decoration/Britannia"),
                        DecoMode.add, file: "*.cfg", listOnly: false, types: new Type[] { typeof(BaseAddon) }, maps: new Map[] { Map.Felucca });

                    // record items after
                    List<Item> after = After(Map.Felucca);

                    // what's the delta?
                    patched += Delta(before, after).Count;
                }
                #endregion Evil Orcs! (Siege Only)
                #region Mount Speed
                if (SiegeStyleShards())
                {
                    //  On AI this is 2 because there are no mounts.
                    //  On Siege, we need this to be 4 for mounted players (twice as fast.)
                    SecurityManagementConsole.FwdMaxStepsMount = 4;
                    patched++;
                }
                #endregion MountSpeed
                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV11 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion BetaReadyV11
        #region BetaReadyV10
        private static int BetaReadyV10(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV10;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                /*
                 * We accidentally patched with this empty.
                 * Dummy patch
                 */
                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV10 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion BetaReadyV10
        #region BetaReadyV9
        private static int BetaReadyV9(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV9;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Wipe Factions
                if (SiegeStyleShards())
                {
                    /*patched += unknown*/
                    patched += Factions.Generator.DegenerateFactions().TotalCount();
                }
                #endregion Wipe Factions
                #region KinMigrate
                if (AllShards())
                {
                    patched += KinMigrate();
                }
                #endregion KinMigrate
                #region Spawners
                if (SiegeStyleShards())
                {
                    // set this spawner to 'Dummy' .. can't be killed
                    Spawner spawner = (Spawner)FindOneItemAt(new Point3D(1416, 1700, 1), Map.Felucca, typeof(Spawner), 2, false);
                    if (spawner != null)
                    {
                        spawner.Dummy = true;
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }
                #endregion Spawners
                #region Addons
                if (AllShards())
                {   // wipe the old tree farm signs from brit farms
                    List<Rectangle2D> list = new() {
                        new Rectangle2D(1185, 1809,31, 31),
                        new Rectangle2D(1176, 1672,32, 24),
                        new Rectangle2D(1208, 1712,32, 24),
                    };
                    List<Item> garbage = new();
                    foreach (var rct in list)
                    {
                        IPooledEnumerable eable = Map.Felucca.GetItemsInBounds(rct);
                        foreach (Item item in eable)
                        {
                            if (item is AddonComponent)
                                garbage.Add(item);
                        }
                        eable.Free();
                    }

                    foreach (var item in garbage)
                    {
                        item.Delete();
                        patched++;
                    }
                }

                #endregion Addons
                #region Covetous teleporter
                if (AllShards())
                {
                    // missing on tp here
                    Teleporter teleporter = (Teleporter)FindOneItemAt(new Point3D(5615, 1998, 0), Map.Felucca, typeof(Teleporter), 2, false);
                    if (teleporter != null)
                    {
                        teleporter = (Teleporter)Utility.Dupe(teleporter);
                        teleporter.Y += 1;
                        teleporter.Z = 4;
                        teleporter.MoveToWorld(teleporter.Location, teleporter.Map);
                        patched++;
                    }
                }
                #endregion Covetous teleporter
                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV9 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #region KinMigrate
        private static int KinMigrate()
        {
            int count = 0;
            foreach (BaseGuild g in BaseGuild.List.Values)
            {
                Guild guild = g as Guild;
                if (guild != null && guild.IOBAlignment != IOBAlignment.None)
                {
                    AlignmentType alignment = AlignmentType.None;
                    switch (guild.IOBAlignment)
                    {
                        case IOBAlignment.Council: alignment = AlignmentType.Council; break;
                        case IOBAlignment.Pirate: alignment = AlignmentType.Pirate; break;
                        case IOBAlignment.Brigand: alignment = AlignmentType.Brigand; break;
                        case IOBAlignment.Orcish: alignment = AlignmentType.Orc; break;
                        case IOBAlignment.Savage: alignment = AlignmentType.Savage; break;
                        case IOBAlignment.Undead: alignment = AlignmentType.Undead; break;
                        case IOBAlignment.Good: alignment = AlignmentType.Militia; break;
                    }
                    if (alignment != AlignmentType.None)
                    {
                        DateTime nextChangeTime = guild.NextTypeChange;
                        guild.IOBAlignment = IOBAlignment.None;
                        guild.Alignment = alignment;
                        guild.NextTypeChange = nextChangeTime;
                        count++;
                    }
                }
            }
            return count;
        }
        #endregion KinMigrate
        #endregion BetaReadyV9
        #region BetaReadyV8
        private static int BetaReadyV8(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV8;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Teleporter maintenance (All Shards)
                if (AllShards())
                {   // make all dungeon exits/entrances directional
                    patched += DirectionalDungeonTPs();

                    // remove these covetous teleporters
                    List<Point3D> list = new() { new Point3D(2544, 850, 0), new Point3D(2545, 850, 0), new Point3D(2546, 850, 0) };
                    foreach (Point3D px in list)
                    {
                        Teleporter teleporter = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (teleporter != null)
                        {
                            teleporter.Delete();
                            patched++;
                        }
                    }

                    // manually fix these Ice dungeon teleporters
                    list.Clear();
                    list.AddRange(new List<Point3D>() { new Point3D(5874, 146, 27), new Point3D(5875, 146, 27), new Point3D(5876, 146, 27), new Point3D(5877, 146, 27) });
                    foreach (Point3D px in list)
                    {
                        Teleporter teleporter = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
                        if (teleporter != null)
                        {
                            teleporter.Direction = Direction.North;
                            teleporter.Directional = true;
                            patched++;
                        }
                    }
                }
                if (AngelIsland())
                {
                    // bad z on this guy
                    Teleporter teleporter = (Teleporter)FindOneItemAt(new Point3D(5882, 243, 0), Map.Felucca, typeof(Teleporter), 2, false);
                    if (teleporter != null)
                    {
                        teleporter.Z++;
                        patched++;
                    }

                    teleporter = (Teleporter)FindOneItemAt(new Point3D(5187, 639, 0), Map.Felucca, typeof(Teleporter), 2, false);
                    if (teleporter != null)
                    {
                        teleporter = (Teleporter)Utility.Dupe(teleporter);
                        teleporter.MoveToWorld(new Point3D(5186, 639, 0), Map.Felucca);
                        patched++;
                    }
                }
                #endregion Teleporter maintenance (All Shards)
                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV8 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        /*private static int EnableSpawner(Point3D px)
        {
            Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
            if (spawner != null)
            {
                // reclassify here as 'all shards'
                UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                    uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                spawner.Running = true;
                return 1;
            }
            return 0;
        }*/
        #region DirectionalDungeonTPs
        private static int DirectionalDungeonTPs()
        {
            HashSet<Teleporter> grouped = new HashSet<Teleporter>();
            List<List<Teleporter>> groups = new List<List<Teleporter>>();
            foreach (Item item in World.Items.Values)
            {
                Teleporter tp = item as Teleporter;
                if (tp != null && IsDungeonEnterExitTeleporter(tp) && !grouped.Contains(tp))
                {
                    List<Teleporter> group = new List<Teleporter>();
                    List<Teleporter> toProcess = new List<Teleporter>();
                    toProcess.Add(tp);
                    while (toProcess.Count != 0)
                    {
                        Teleporter cur = toProcess[0];
                        group.Add(cur);
                        grouped.Add(cur);
                        FindNeighbors(cur, toProcess, grouped);
                        toProcess.RemoveAt(0);
                    }
                    if (group.Count > 1)
                        groups.Add(group);
                }
            }
            int patched = 0;
            List<Teleporter> failed = new List<Teleporter>();
            foreach (List<Teleporter> group in groups)
            {
                DirectionalScore[] dirScores = new DirectionalScore[4];
                dirScores[0].Dir = Direction.North;
                dirScores[1].Dir = Direction.East;
                dirScores[2].Dir = Direction.South;
                dirScores[3].Dir = Direction.West;
                foreach (Teleporter tp in group)
                {
                    if (IsBlocked(new Point3D(tp.X, tp.Y - 1, tp.Z), tp.Map))
                        dirScores[0].Score++;
                    if (IsBlocked(new Point3D(tp.X + 1, tp.Y, tp.Z), tp.Map))
                        dirScores[1].Score++;
                    if (IsBlocked(new Point3D(tp.X, tp.Y + 1, tp.Z), tp.Map))
                        dirScores[2].Score++;
                    if (IsBlocked(new Point3D(tp.X - 1, tp.Y, tp.Z), tp.Map))
                        dirScores[3].Score++;
                }
                Array.Sort(dirScores);
                if (dirScores[0].Score == dirScores[1].Score)
                {
                    // we can't decide in which direction the TPs should work
                    failed.Add(group[0]);
                    foreach (Teleporter tp in group)
                    {
                        tp.Direction = (Direction)0;
                        tp.Directional = false;
                    }
                    continue;
                }
                Direction dir = dirScores[0].Dir;
                foreach (Teleporter tp in group)
                {
                    tp.Direction = dir;
                    tp.Directional = true;
                    patched++;
                }
            }

            return patched;
        }
        private static void FindNeighbors(Teleporter tp, List<Teleporter> list, HashSet<Teleporter> ignore)
        {
            FindTeleportersAt(new Point3D(tp.X, tp.Y - 1, tp.Z), tp.Map, list, ignore);
            FindTeleportersAt(new Point3D(tp.X + 1, tp.Y, tp.Z), tp.Map, list, ignore);
            FindTeleportersAt(new Point3D(tp.X, tp.Y + 1, tp.Z), tp.Map, list, ignore);
            FindTeleportersAt(new Point3D(tp.X - 1, tp.Y, tp.Z), tp.Map, list, ignore);
        }
        private static void FindTeleportersAt(Point3D loc, Map map, List<Teleporter> list, HashSet<Teleporter> ignore)
        {
            foreach (Item item in map.GetItemsInRange(loc, 0))
            {
                Teleporter tp = item as Teleporter;
                if (!ignore.Contains(tp) && tp != null && Utility.IsDungeonTeleporter(tp) && Math.Abs(loc.Z - tp.Z) <= 7)
                    list.Add(tp);
            }
        }
        private static bool IsBlocked(Point3D loc, Map map)
        {
            int surfaceZ;
            if (map.GetTopSurface(new Point3D(loc.X, loc.Y, loc.Z + 7), out surfaceZ) == null)
                return true;
            if (surfaceZ < loc.Z - 7)
                return true;
            if (!map.CanFit(loc.X, loc.Y, surfaceZ, 16, false, false, true))
                return true;
            return false;
        }
        private struct DirectionalScore : IComparable<DirectionalScore>
        {
            public Direction Dir;
            public int Score;
            public int CompareTo(DirectionalScore other)
            {
                return other.Score.CompareTo(Score);
            }
        }
        #endregion DirectionalDungeonTPs
        #endregion BetaReadyV8
        #region BetaReadyV7
        private static int BetaReadyV7(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV7;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Map stuffs
                if (SiegeStyleShards())
                {
                    Teleporter teleporter = (Teleporter)FindOneItemAt(new Point3D(5882, 243, 1), Map.Felucca, typeof(Teleporter), 2, false);
                    if (teleporter != null)
                    {   // z was off .. fix now
                        teleporter.Location = new Point3D(5882, 243, 1);
                        patched++;
                    }
                }
                if (AllShards())
                {   // disable trinsic passage to T2A
                    Teleporter teleporter = (Teleporter)FindOneItemAt(new Point3D(1629, 3320, 0), Map.Felucca, typeof(Teleporter), 2, false);
                    if (teleporter != null)
                    {
                        teleporter.Running = false;
                        patched++;
                    }
                }
                #endregion Map stuffs
                #region Solen Caves
                // note: green thorns were handled in code
                if (AllShards())
                {
                    patched += DisableSolenCaveSpawners();
                    patched += DisableTelesFromToSolenCaves();
                }
                #endregion Solen Caves
                #region Library books at WBB (AllShards)
                {
                    WebBook webBook = null;
                    if (AllShards())
                    {
                        webBook = (WebBook)FindOneItemAt(new Point3D(1415, 1688, 6), Map.Felucca, typeof(WebBook), 2, false);
                        if (webBook != null)
                        {
                            webBook.Description = "News";
                            webBook.URL = "https://game-master.net/news.html";
                            webBook.Name = Core.Server;
                            patched++;
                        }
                        webBook = (WebBook)FindOneItemAt(new Point3D(1414, 1688, 6), Map.Felucca, typeof(WebBook), 2, false);
                        if (webBook != null)
                        {
                            webBook.Description = "Discord";
                            webBook.URL = "https://discord.gg/GwRuSV9vAb";
                            webBook.Name = Core.Server;
                            patched++;
                        }
                        webBook = (WebBook)FindOneItemAt(new Point3D(1414, 1687, 6), Map.Felucca, typeof(WebBook), 2, false);
                        if (webBook != null)
                        {
                            webBook.Description = "Wiki";
                            webBook.URL = "https://game-master.net/aiwiki/index.php?title=Main_Page";
                            webBook.Name = Core.Server;
                            patched++;
                        }
                        webBook = (WebBook)FindOneItemAt(new Point3D(1414, 1686, 6), Map.Felucca, typeof(WebBook), 2, false);
                        if (webBook != null)
                        {
                            webBook.Description = "Beginner Info";
                            webBook.URL = "https://game-master.net/aiwiki/index.php?title=Beginners_Guide";
                            webBook.Name = Core.Server;
                            patched++;
                        }
                        webBook = (WebBook)FindOneItemAt(new Point3D(1414, 1685, 6), Map.Felucca, typeof(WebBook), 2, false);
                        if (webBook != null)
                        {
                            webBook.Description = "FAQ";
                            webBook.URL = "https://game-master.net/aiwiki/index.php?title=FAQ";
                            webBook.Name = Core.Server;
                            patched++;
                        }
                        webBook = (WebBook)FindOneItemAt(new Point3D(1415, 1685, 6), Map.Felucca, typeof(WebBook), 2, false);
                        if (webBook != null)
                        {
                            webBook.Description = "Tutorials";
                            webBook.URL = "https://game-master.net/aiwiki/index.php?title=Video_Tutorials";
                            webBook.Name = Core.Server;
                            patched++;
                        }
                    }
                }
                #endregion Library books at WBB
                #region Orc goodies (Siege Only)
                if (SiegeStyleShards())
                {
                    // spinning wheel south addon (674, 1200, 0)
                    SpinningwheelSouthAddon swsa = new();
                    swsa.MoveToWorld(new Point3D(674, 1200, 0), Map.Felucca);
                    // loom south addon (677, 1200, 1)
                    LoomSouthAddon lsa = new();
                    lsa.MoveToWorld(new Point3D(677, 1200, 1), Map.Felucca);
                    // provisioner spawner (682, 1203, 0)
                    Spawner provisioner = new();
                    provisioner.ObjectNamesRaw.Add("Provisioner");
                    provisioner.MoveToWorld(new Point3D(682, 1203, 0), Map.Felucca);
                    // reclassify here as 'all shards'
                    UpdateSpawnerDesignationaAndLog(provisioner, coreSpawn: false,
                        uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                }
                #endregion Orc goodies (Siege Only)
                // do last since it respawns
                #region Patch Mobile Activation
                if (AllShards())
                {   // We changed the way mobiles get deactivated. 
                    //  A respawn is needed to deactivate all mobiles that should be so
                    TotalRespawn();
                }
                #endregion Patch Mobile Activation
                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV7 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static int DisableSolenCaveSpawners()
        {
            int count = 0;
            foreach (Item item in World.Items.Values)
            {
                if (item == null || item.Deleted == true || item.Map == Map.Internal)
                    continue;
                if (item is Spawner spawner && spawner.Running == true)
                    if (Utility.World.SolenCaves.Contains(spawner.Location))
                    {
                        spawner.RemoveObjects();
                        spawner.Running = false;
                        count++;
                    }
            }
            return count;
        }
        private static int DisableTelesFromToSolenCaves()
        {
            int count = 0;
            foreach (Item item in World.Items.Values)
            {
                if (item == null || item.Deleted == true || item.Map == Map.Internal)
                    continue;
                if (item is Teleporter tele && tele.Running == true)
                    if (TeleporterFromTo(tele, new List<Rectangle2D>() { Utility.World.SolenCaves }, new List<Rectangle2D>() { Utility.World.SolenCaves }))
                    {
                        tele.Running = false;
                        count++;
                    }
            }

            return count;
        }
        #endregion BetaReadyV7
        #region BetaReadyV6
        private static int BetaReadyV6(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV6;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation
                #region Rares
                if (SiegeStyleShards())
                {
                    List<Point3D> rare_spawners = new()
                        {
                            new Point3D(5192, 584, 0),
                            new Point3D(5301, 593, 0),
                            new Point3D(286, 986, 6),
                            new Point3D(1134, 2220, 46),
                            new Point3D(1133, 2220, 66),
                            new Point3D(3788, 1121, 30),
                            new Point3D(2636, 2081, 16),
                            new Point3D(2685, 2065, 35),
                            new Point3D(5949, 220, 34),
                            new Point3D(3656, 2510, 0),
                            new Point3D(5946, 216, 29),
                            new Point3D(5649, 1404, 22),
                            new Point3D(1397, 3809, 0), // Toolkit 
                            new Point3D(554, 2187, 6), // WhiteChessmen 
                            new Point3D(1931, 2795, 3), // BlackChessmen 
                            new Point3D(5804, 141, -5), // Rocks 
                            new Point3D(5168, 566, 6), // CandleLarge 
                            new Point3D(955, 709, 20), // FruitBasket 
                            new Point3D(5575, 1829, 6), // CandleLarge 
                            new Point3D(5582, 1829, 6), // CandleLarge
                        };

                    foreach (Point3D px in rare_spawners)
                    {
                        Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 0, false);
                        if (spawner != null)
                        {
                            // reclassify here as 'all shards'
                            UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                                uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                            // while we're here, call it a "Rares Spawner"
                            spawner.Name = "Rares Spawner";
                            spawner.Running = true;
                            spawner.Respawn();
                            patched++;
                        }
                    }
                }
                #endregion Rares
                #region Control Slots
                if (SiegeStyleShards())
                {
                    foreach (Mobile m in World.Mobiles.Values)
                    {
                        if (m is null || m is not PlayerMobile) continue;
                        // remove control slots
                        (m as PlayerMobile).FollowersMax = 16;
                        patched++;
                    }
                }
                #endregion Control Slots
                #region Spawn trainer chests in banks, and all other dungeon chests
                if (SiegeStyleShards())
                {
                    foreach (Item item in World.Items.Values)
                    {
                        if (item == null || item.Map != Map.Felucca) continue;
                        if (item is Spawner spawner && spawner.ModeNeruns == false && spawner.Running == false)
                        {
                            if (spawner.Spawns("TreasureChest"))
                            {
                                UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                                uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                                spawner.Running = true;
                                spawner.Respawn();
                                patched++;
                            }
                        }
                    }
                }
                #endregion Spawn trainer chests in banks, and all other dungeon chests
                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV6 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion BetaReadyV6
        #region BetaReadyV5
        private static int BetaReadyV5(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV5;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                int patched = 0;
                #region Begin Implementation

                #region Siege
                if (SiegeStyleShards())
                {
                    #region T2A blocker deco
                    List<KeyValuePair<int, Point3D>> patch_list = new()
                    {
                        new KeyValuePair<int,Point3D>(2121, new Point3D(5767, 2906, 15)),
                        new KeyValuePair<int,Point3D>(1, new Point3D(5767, 2907, 15)),
                        new KeyValuePair<int,Point3D>(2094, new Point3D(5767, 2907, 15)),
                        new KeyValuePair<int,Point3D>(2121, new Point3D(5767, 2908, 15)),
                        new KeyValuePair<int,Point3D>(2121, new Point3D(5767, 2905, 15)),
                        new KeyValuePair<int,Point3D>(2121, new Point3D(5767, 2909, 15)),
                        new KeyValuePair<int,Point3D>(2121, new Point3D(5767, 2904, 15)),
                        new KeyValuePair<int,Point3D>(2121, new Point3D(5767, 2910, 15)),
                        new KeyValuePair<int,Point3D>(2121, new Point3D(5767, 2911, 13)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5761, 2911, 23)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5760, 2912, 33)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5761, 2912, 33)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5762, 2912, 33)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5763, 2912, 33)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5764, 2912, 33)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5765, 2912, 33)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5766, 2912, 33)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5767, 2912, 33)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5218, 2331, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5216, 2333, 29)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5216, 2333, 29)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5218, 2333, 29)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5218, 2333, 29)),
                        new KeyValuePair<int,Point3D>(7038, new Point3D(5219, 2332, 29)),
                        new KeyValuePair<int,Point3D>(7038, new Point3D(5222, 2323, 28)),
                        new KeyValuePair<int,Point3D>(7038, new Point3D(5223, 2325, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5218, 2329, 30)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5218, 2329, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5221, 2332, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5221, 2330, 30)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5221, 2330, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5221, 2328, 30)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5221, 2328, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5221, 2327, 28)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5221, 2327, 28)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5221, 2325, 28)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5221, 2325, 28)),
                        new KeyValuePair<int,Point3D>(4962, new Point3D(5222, 2325, 29)),
                        new KeyValuePair<int,Point3D>(4963, new Point3D(5221, 2331, 29)),
                        new KeyValuePair<int,Point3D>(4964, new Point3D(5220, 2333, 28)),
                        new KeyValuePair<int,Point3D>(4965, new Point3D(5219, 2330, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5218, 2327, 30)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5218, 2327, 30)),
                        new KeyValuePair<int,Point3D>(4962, new Point3D(5219, 2333, 27)),
                        new KeyValuePair<int,Point3D>(4967, new Point3D(5221, 2329, 31)),
                        new KeyValuePair<int,Point3D>(4967, new Point3D(5224, 2325, 31)),
                        new KeyValuePair<int,Point3D>(4964, new Point3D(5224, 2328, 28)),
                        new KeyValuePair<int,Point3D>(7038, new Point3D(5221, 2326, 28)),
                        new KeyValuePair<int,Point3D>(4967, new Point3D(5222, 2324, 31)),
                        new KeyValuePair<int,Point3D>(4967, new Point3D(5221, 2324, 30)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5221, 2322, 29)),
                        new KeyValuePair<int,Point3D>(8612, new Point3D(5221, 2320, 46)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5222, 2334, 30)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5222, 2334, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5199, 2335, 32)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5199, 2335, 32)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5199, 2337, 27)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5198, 2336, 30)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5198, 2336, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5204, 2333, 31)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5205, 2334, 32)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5205, 2334, 32)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5204, 2335, 30)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5204, 2335, 30)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5206, 2335, 29)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5200, 2334, 33)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5205, 2336, 28)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5205, 2336, 28)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5204, 2337, 28)),
                        new KeyValuePair<int,Point3D>(3287, new Point3D(5204, 2337, 28)),
                        new KeyValuePair<int,Point3D>(3286, new Point3D(5200, 2338, 27)),


                    };

                    foreach (var unit in patch_list)
                    {
                        if (unit.Key < 2) continue;
                        Static @static = new Static(unit.Key);
                        if (@static == null) continue;
                        @static.MoveToWorld(unit.Value, Map.Felucca);
                    }
                    #endregion T2A blocker deco

                    #region Fire dungeon blockers
                    Blocker blocker;
                    blocker = new Blocker();
                    blocker.MoveToWorld(new Point3D(5759, 2911, 23), Map.Felucca);
                    blocker = new Blocker();
                    blocker.MoveToWorld(new Point3D(5760, 2911, 23), Map.Felucca);
                    for (int ix = 5762; ix <= 5767; ix++)
                    {
                        blocker = new Blocker();
                        blocker.MoveToWorld(new Point3D(ix, 2911, 25), Map.Felucca);
                    }
                    #endregion Fire dungeon blockers
                }
                #endregion  Siege

                #region all shards
                #region Add moongate wizards to Fire and Ice dungeon entrances
                if (AllShards())
                {   // fire
                    Spawner spawner = new Spawner();
                    spawner.ObjectNamesRaw.Add("moongatewizard");
                    spawner.MoveToWorld(new Point3D(5761, 2908, 15), Map.Felucca);
                    spawner.Respawn();
                    // ice
                    spawner = new Spawner();
                    spawner.ObjectNamesRaw.Add("moongatewizard");
                    spawner.MoveToWorld(new Point3D(5213, 2321, 29), Map.Felucca);
                    spawner.Respawn();
                }
                #endregion Add moongate wizards to Fire and Ice dungeon entrances
                #endregion  all shards

                #region Siege
                #region spawner cleanup
                if (SiegeStyleShards())
                {
                    int found = 0;
                    List<Item> garbagecan = new List<Item>();
                    foreach (Item item in World.Items.Values)
                    {
                        if (item == null || item.Map != Map.Felucca || item.Deleted) continue;

                        // while we're here, get rid of all the stacked spawner consoles
                        if (item is StackedSpawnerConsole)
                        {
                            garbagecan.Add(item);
                            patched++;
                        }
                        else if (item is Spawner spawner && spawner.ModeNeruns == true)
                        {
                            found++;

                            // find the surface on which we should be placed
                            int ceiling = Utility.HardCeiling(spawner.Map, spawner.X, spawner.Y, spawner.Z);
                            // move the spawner up/down
                            if (Math.Abs(spawner.Z - ceiling) <= 10)
                            {
                                patched++;
                                spawner.Z = ceiling;
                                // now jiggle - de-stack
                                // also, sometimes we're on like a display case, avoid if we can.
                                if (!spawner.Spawns("camp")) // don't jiggle camps. These seem to be specifically placed to 'fit'
                                    spawner.Location = Jiggle(spawner.Map, spawner.Location, spawner);
                                spawner.Respawn();
                            }
                            else
                            {   // seems like the z is fine. In that case, we just jiggle it
                                if (!spawner.Spawns("camp"))
                                {
                                    patched++;
                                    spawner.Location = Jiggle(spawner.Map, spawner.Location, spawner);
                                }
                            }

                        }
                    }

                    // delete consoles
                    foreach (Item garbage in garbagecan)
                        garbage.Delete();
                }
                #endregion spawner cleanup
                #endregion Siege

                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV5 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static Point3D Jiggle(Map map, Point3D point, object o)
        {
            for (int ix = 0; ix < 16; ix++)
            {
                point = Spawner.GetSpawnPosition(map, point, 2, SpawnFlags.None, o);
                if (SpawnerAtLocation(map, point) == false)
                    break;
                else
                    ;
            }

            return point;
        }
        private static bool SpawnerAtLocation(Map map, Point3D point)
        {
            Spawner spawner = (Spawner)FindOneItemAt(point, map, typeof(Spawner), 0, false);
            if (spawner != null)
                return true;

            return false;
        }
        #endregion BetaReadyV5
        #region BetaReadyV4
        private static int BetaReadyV4(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV4;
            if (!Patched(bits) && AllShards())
            {
                int patched = 0;
                #region Begin Implementation

                #region broken tile
                Static tile = new Static(0x53D);
                tile.MoveToWorld(new Point3D(5924, 41, 44), Map.Felucca);
                patched++;
                #endregion broken tile

                #region broken stairs in Hythloth level 3

                #region add missing floor tiles
                tile = new Static(0x53F);
                tile.MoveToWorld(new Point3D(5926, 171, 22), Map.Felucca);
                patched++;

                tile = new Static(0x53F);
                tile.MoveToWorld(new Point3D(5926, 172, 22), Map.Felucca);
                patched++;

                tile = new Static(0x53F);
                tile.MoveToWorld(new Point3D(5926, 170, 22), Map.Felucca);
                patched++;

                tile = new Static(0x53F);
                tile.MoveToWorld(new Point3D(5926, 169, 22), Map.Felucca);
                patched++;

                tile = new Static(0x53F);
                tile.MoveToWorld(new Point3D(5926, 168, 22), Map.Felucca);
                patched++;
                #endregion add missing floor tiles

                #region remove blockers
                IPooledEnumerable eable = Map.Felucca.GetItemsInRange(new Point3D(5926, 172, 22), 5);
                List<Item> garbagecan = new List<Item>();
                foreach (Item item in eable)
                    if (item.ItemID == 0x21A4)          // blocker
                    {
                        garbagecan.Add(item);
                        patched++;
                    }
                eable.Free();

                eable = Map.Felucca.GetItemsInRange(new Point3D(5919, 171, 0), 2);
                foreach (Item item in eable)
                    if (item.ItemID == 0x21A4)          // blocker
                    {
                        garbagecan.Add(item);
                        patched++;
                    }
                eable.Free();

                foreach (Item item in garbagecan)
                    item.Delete();
                #endregion remove blockers

                #region add blockers
                List<Point3D> blockers = new List<Point3D>() {
                    new Point3D(5920, 171, 22),
                    new Point3D(5921, 171, 22),
                    new Point3D(5922, 171, 22),
                    new Point3D(5923, 171, 22),
                    new Point3D(5924, 171, 22),
                    new Point3D(5925, 171, 22),
                    new Point3D(5926, 168, 22),
                    new Point3D(5926, 169, 22),
                    new Point3D(5926, 170, 22),
                    new Point3D(5926, 171, 22),
                    new Point3D(5923, 168, 2),
                    new Point3D(5923, 169, 2),
                    new Point3D(5923, 170, 2),
                };

                foreach (Point3D bp in blockers)
                {
                    new Blocker().MoveToWorld(bp, Map.Felucca);
                    patched++;
                }
                #endregion add blockers

                #region wipe 6 teleporters 
                List<Point3D> teles = new List<Point3D>() {
                new Point3D(5923, 169, 1),
                new Point3D(5920, 170, 16),
                new Point3D(5920, 168, 16),
                new Point3D(5920, 169, 16),
                new Point3D(5921, 170, 14),
                new Point3D(5921, 169, 13),
                new Point3D(5921, 168, 12),
                };

                foreach (Point3D px in teles)
                {
                    Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter));
                    if (tele != null)
                    {
                        tele.Delete();
                        patched++;
                    }
                }
                #endregion  wipe 6 teleporters 

                #region Add / Modify teleporters
                {
                    // add some teleporters
                    Teleporter tele;
                    // t1 at (5920, 168, 16), mapdest fel, pointdest (5919, 169, 22), direction West, directional true
                    tele = new Teleporter();
                    tele.Pets = true;
                    tele.MapDest = Map.Felucca;
                    tele.Direction = Direction.West;
                    tele.Directional = true;
                    tele.PointDest = new Point3D(5919, 168, 22);
                    tele.MoveToWorld(new Point3D(5920, 168, 16), Map.Felucca);
                    // (5920, 169, 17)
                    tele = new Teleporter();
                    tele.Pets = true;
                    tele.MapDest = Map.Felucca;
                    tele.Direction = Direction.West;
                    tele.Directional = true;
                    tele.PointDest = new Point3D(5919, 169, 22);
                    tele.MoveToWorld(new Point3D(5920, 169, 17), Map.Felucca);
                    // (5920, 170, 16)
                    tele = new Teleporter();
                    tele.Pets = true;
                    tele.MapDest = Map.Felucca;
                    tele.Direction = Direction.West;
                    tele.Directional = true;
                    tele.PointDest = new Point3D(5919, 170, 22);
                    tele.MoveToWorld(new Point3D(5920, 170, 16), Map.Felucca);
                    // t2 at (5921, 169, 12), mapdest fel, pointdest (5919, 169, 22), direction West, directional true
                    tele = new Teleporter();
                    tele.Pets = true;
                    tele.MapDest = Map.Felucca;
                    tele.Direction = Direction.West;
                    tele.Directional = true;
                    tele.PointDest = new Point3D(5919, 169, 22);
                    tele.MoveToWorld(new Point3D(5921, 169, 12), Map.Felucca);

                    // tp3 at (5922, 168, 6) set delay 0
                    tele = (Teleporter)FindOneItemAt(new Point3D(5922, 168, 6), Map.Felucca, typeof(Teleporter));
                    if (tele != null)
                    {
                        tele.Delay = TimeSpan.Zero;
                        tele.PointDest = new Point3D(6084, 144, -22);
                        patched++;
                    }
                    // tp4 at (5922, 169, 6) set delay 0
                    tele = (Teleporter)FindOneItemAt(new Point3D(5922, 169, 6), Map.Felucca, typeof(Teleporter));
                    if (tele != null)
                    {
                        tele.Delay = TimeSpan.Zero;
                        patched++;
                    }
                    // tp5 at (5922, 170, 6) set delay 0
                    tele = (Teleporter)FindOneItemAt(new Point3D(5922, 170, 6), Map.Felucca, typeof(Teleporter));
                    if (tele != null)
                    {
                        tele.Delay = TimeSpan.Zero;
                        tele.PointDest = new Point3D(6084, 146, -22);
                        patched++;
                    }
                }
                #endregion Add / Modify teleporters
                #endregion broken stairs in Hythloth level 3

                if (SiegeStyleShards())
                {
                    #region diable these T2A teles
                    eable = Map.Felucca.GetItemsInRange(new Point3D(5850, 432, 0), 5);
                    foreach (Item item in eable)
                        if (item is Teleporter t2at)
                        {
                            t2at.Running = false;
                            patched++;
                        }
                    eable.Free();
                    #endregion diable these T2A teles

                    #region Add EvilWanderingHealer
                    foreach (Item item in World.Items.Values)
                    {
                        if (item == null || item.Map != Map.Felucca)
                            continue;
                        if (item is Spawner spawner && spawner.Running && spawner.ModeNeruns == true)
                        {
                            int index = 0;
                            if ((index = SpawnerIndexOf(spawner, "WanderingHealer")) != -1)
                            {
                                spawner.ObjectNamesRaw[index] =
                                    (spawner.ObjectNamesRaw[index] as string).Replace("WanderingHealer", "WanderingHealer:EvilWanderingHealer");
                                // index - 1: see comments in Spawner.Spawn
                                //spawner.EntryCount[index - 1] += 1; // bump up the number of creatures for this slot (because we added one)
                                spawner.SetSlotCount(index: index, spawner.GetSlotCount(index) + 1);
                                // don't need to respawn, it's done below in "Enable Kin"
                                //spawner.ScheduleRespawn = true;
                                patched++;
                            }
                        }
                    }
                    #endregion Add EvilWanderingHealer

                    #region Enable Kin
                    // we're enabling kin on Siege, a total respawn is required to reset alignment of all creatures
                    TotalRespawn();
                    #endregion Enable Kin
                }

                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV4 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion BetaReadyV4
        #region BetaReadyV3

        private static int BetaReadyV3(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV3;
            if (!Patched(bits) && AllShards())
            {
                int patched = 0;
                #region Begin Implementation

                #region Patch Check
                // we had a bug in out patcher logic, so this 'patch check' just verifies it is fixed
                if (SiegeStyleShards())
                    EchoOut("SiegeStyleShards Patch Check Okay.", ConsoleColor.Magenta);

                if (AngelIsland())
                    EchoOut("AngelIsland Patch Check Okay.", ConsoleColor.Magenta);
                #endregion Patch Check

                if (SiegeStyleShards())
                {   // no slayer instruments on Siege
                    CoreAI.SlayerInstrumentDropRate = 0.0;
                    patched++;
                    /* [GOM] Od � Today at 11:57 AM
                     * @Adam Ant all the normal slayers we�re definitely on Seige
                     * Hard to find though
                     * Lvl 4/5 maps
                     * Silver was prevalent
                     */
                    CoreAI.SlayerWeaponDropRate = 0.05;
                    patched++;

                    // fix skill level for Wind teleporter
                    SkillTeleporter skillTeleporter = (SkillTeleporter)FindOneItemAt(new Point3D(1361, 883, 0), Map.Felucca, typeof(SkillTeleporter));
                    if (skillTeleporter != null)
                    {
                        skillTeleporter.Required = 72;
                        patched++;
                    }

                    // fix homerange on lich spawner at wind entrance
                    Spawner lichSpawner = (Spawner)FindOneItemAt(new Point3D(5186, 234, 25), Map.Felucca, typeof(Spawner));
                    if (lichSpawner != null)
                    {   // hang out near entrance
                        lichSpawner.HomeRange = 5;
                        patched++;
                    }
                }

                if (AllShards())
                {
                    // we've updated our spawn calcs for concentric spawners to reduce 'clumping'
                    //  To see this, we will need to do a total respawn.
                    patched += TotalRespawn();
                }

                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV3 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        private static int TotalRespawn()
        {   // respawn the world now
            int patches = 0;

            EchoOut("Scheduling world Respawn...", ConsoleColor.Magenta);
            int patched = 0;

            List<Spawner> spawners = new();
            double nextspawn = 0.5;
            foreach (Item item in World.Items.Values)
            {
                if (item is Spawner s && s.Deleted == false && s.Running)
                {
                    // based on our spawner/shard config, should this spawner be respawned?
                    if (Spawner.ShouldShardEnable(s))
                    {
                        patched++;
                        s.ScheduleRespawn = true;
                    }
                }
            }

            EchoOut(String.Format("{0} Spawners scheduled. Spawning will complete in {1:0.00} seconds.", patched, nextspawn), ConsoleColor.Magenta);
            patches = patched;
            return patches;
        }
        #endregion BetaReadyV3
        #region BetaReadyV2
        public class Line
        {
            public Point2D p1, p2;

            public Line(Point2D p1, Point2D p2)
            {
                this.p1 = p1;
                this.p2 = p2;
            }

            public Point2D[] GetPoints(int quantity)
            {
                var points = new Point2D[quantity];
                int ydiff = p2.Y - p1.Y, xdiff = p2.X - p1.X;
                double slope = (double)(p2.Y - p1.Y) / (p2.X - p1.X);
                double x, y;

                --quantity;

                for (double i = 0; i < quantity; i++)
                {
                    y = slope == 0 ? 0 : ydiff * (i / quantity);
                    x = slope == 0 ? xdiff * (i / quantity) : y / slope;
                    //points[(int)i] = new Point2D((int)Math.Round(x) + p1.X, (int)Math.Round(y) + p1.Y);
                    points[(int)i] = new Point2D((int)Math.Ceiling(x) + p1.X, (int)Math.Ceiling(y) + p1.Y);
                }

                points[quantity] = p2;
                return points;
            }
        }
        private static int BetaReadyV2(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV2;
            if (!Patched(bits) && AllShards())
            {
                int patched = 0;
                #region Begin Implementation
                if (SiegeStyleShards())
                {
                    #region Yew Orc Fort
                    EchoOut("Patching Yew Orc Fort...", ConsoleColor.Magenta);
                    // add backdoor tele (inside fort) (628, 1478, 2)
                    Teleporter tp1 = new Teleporter();
                    tp1.Direction = Direction.North;
                    tp1.Directional = true;
                    tp1.Creatures = true;
                    tp1.Pets = true;
                    tp1.PointDest = new Point3D(628, 1476, 0);
                    tp1.MapDest = Map.Felucca;
                    tp1.MoveToWorld(new Point3D(628, 1478, 2), Map.Felucca);
                    tp1.Running = false;    // orcs now want it off
                    patched++;

                    // add backdoor tele (outside fort) (628, 1476, 0)
                    Teleporter tp2 = new Teleporter();
                    tp2.Direction = Direction.South;
                    tp2.Directional = true;
                    tp2.Creatures = true;
                    tp2.Pets = true;
                    tp2.PointDest = new Point3D(628, 1478, 2);
                    tp2.MapDest = Map.Felucca;
                    tp2.MoveToWorld(new Point3D(628, 1476, 0), Map.Felucca);
                    tp2.Running = false;    // orcs now want it off
                    patched++;

                    // wipe the tower (637, 1486, 0) x (645, 1494, 0)
                    //  plus some side objects, plus some roof tiles
                    Rectangle2D rx = new Rectangle2D(new Point2D(637, 1486), new Point2D(645, 1494));
                    rx.MakeHold(new Point2D(640, 1493));
                    rx.MakeHold(new Point2D(645, 1494));
                    // roof tiles                
                    rx.MakeHold(new Point2D(646, 1489));
                    rx.MakeHold(new Point2D(646, 1490));
                    rx.MakeHold(new Point2D(646, 1491));
                    rx.MakeHold(new Point2D(646, 1492));
                    rx.MakeHold(new Point2D(646, 1493));
                    patched += Utility.WipeRect(Map.Felucca, rx, 0, WipeRectFlags.All, new Type[] { typeof(Spawner) });

                    // wipe the outer east expansion (647, 1481, 0) x (679, 1509, 0)
                    patched += Utility.WipeRect(Map.Felucca, new Rectangle2D(new Point2D(647, 1481), new Point2D(679, 1509)), 0, WipeRectFlags.All, new Type[] { typeof(Spawner) });

                    // wipe some dangling palisades
                    Rectangle2D rect = new Rectangle2D(654, 1509, 658 - 654 + 1, 1509 - 1509 + 1);
                    patched += Utility.WipeRect(Map.Felucca, rect, 0, WipeRectFlags.All, new Type[] { typeof(Spawner) });

                    // spread out the orc fort spawn (too many inside fort)
                    // Old/new Values: 
                    //  HomeRange 10 => 60
                    //  Concentric false => true
                    Spawner spawner = (Spawner)FindOneItemAt(new Point3D(633, 1484, 0), Map.Felucca, typeof(Spawner));
                    if (spawner != null)
                    {
                        spawner.HomeRange = 60;
                        spawner.Concentric = true;
                        spawner.Respawn();
                        patched++;
                    }

                    // North-West corner
                    LOSBlocker losa = new LOSBlocker();
                    losa.MoveToWorld(new Point3D(622, 1477, 0), Map.Felucca); // (622, 1478, 20) // (622, 1477, 0)
                    patched++;

                    losa = new LOSBlocker();
                    losa.MoveToWorld(new Point3D(622, 1478, 0), Map.Felucca); // (622, 1479, 20) // (622, 1478, 0)
                    patched++;

                    losa = new LOSBlocker();
                    losa.MoveToWorld(new Point3D(623, 1477, 0), Map.Felucca); // (624, 1477, 20) // (623, 1477, 0)
                    patched++;

                    // South wall, west
                    Point2D px1 = new Point2D(622, 1496);
                    Point2D px2 = new Point2D(631, 1496);
                    Line line = new Line(px1, px2);
                    foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                    {
                        LOSBlocker losb = new LOSBlocker();
                        int z = Utility.GetAverageZ(Map.Felucca, node.X, node.Y);
                        losb.MoveToWorld(new Point3D(node, z), Map.Felucca);
                        patched++;
                    }

                    // Walkway West
                    px1 = new Point2D(631, 1495);
                    px2 = new Point2D(631, 1489);
                    line = new Line(px1, px2);
                    foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                    {
                        LOSBlocker losb = new LOSBlocker();
                        int z = Utility.GetAverageZ(Map.Felucca, node.X, node.Y);
                        losb.MoveToWorld(new Point3D(node, z), Map.Felucca);
                        patched++;
                    }

                    // Walkway East
                    //px1 = new Point2D(635, 1494);
                    px1 = new Point2D(635, 1495);
                    px2 = new Point2D(635, 1489);
                    line = new Line(px1, px2);
                    foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                    {
                        LOSBlocker losb = new LOSBlocker();
                        int z = Utility.GetAverageZ(Map.Felucca, node.X, node.Y);
                        losb.MoveToWorld(new Point3D(node, z), Map.Felucca);
                        patched++;
                    }

                    // South wall West
                    px1 = new Point2D(635, 1496);
                    px2 = new Point2D(646, 1496);
                    line = new Line(px1, px2);
                    foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                    {
                        LOSBlocker losb = new LOSBlocker();
                        int z = Utility.GetAverageZ(Map.Felucca, node.X, node.Y);
                        losb.MoveToWorld(new Point3D(node, z), Map.Felucca);
                        patched++;
                    }

                    // East wall, center
                    px1 = new Point2D(646, 1483);
                    px2 = new Point2D(646, 1488);
                    line = new Line(px1, px2);
                    foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                    {
                        LOSBlocker losb = new LOSBlocker();
                        int z = Utility.GetAverageZ(Map.Felucca, node.X, node.Y);
                        losb.MoveToWorld(new Point3D(node, z), Map.Felucca);
                        patched++;
                    }

                    {
                        // South wall West planks
                        // steps 1829 (0x725) at (625, 1495, 2) and (626, 1495, 8)
                        Static steps;
                        steps = new Static(0x725);
                        steps.MoveToWorld(new Point3D(625, 1495, 2), Map.Felucca);
                        patched++;

                        steps = new Static(0x725);
                        steps.MoveToWorld(new Point3D(626, 1495, 8), Map.Felucca);
                        patched++;

                        // planks location start (627, 1495, 13) => (630, 1495, 13) (running east-west)
                        px1 = new Point2D(627, 1495);
                        px2 = new Point2D(630, 1495);
                        line = new Line(px1, px2);
                        foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                        {
                            int itemid;
                            switch (node.Y)
                            {
                                case 627:
                                case 628:
                                case 629:
                                    itemid = 0x4DC;
                                    break;
                                default:
                                    itemid = 0x4D5;
                                    break;
                            }
                            Static plank = new Static(itemid);
                            int z = 13;
                            plank.MoveToWorld(new Point3D(node, z), Map.Felucca);
                            patched++;
                        }

                        // planks location start (630, 1495, 13) => (630, 1493, 13) (running north-south)
                        {
                            Static plank = new Static(0x4C8);
                            plank.MoveToWorld(new Point3D(630, 1494, 13), Map.Felucca);
                            patched++;
                            plank = new Static(0x4C8);
                            plank.MoveToWorld(new Point3D(630, 1493, 13), Map.Felucca);
                            patched++;
                        }

                        // add steps (item id 1828 (0x724))
                        steps = new Static(0x724);
                        steps.MoveToWorld(new Point3D(630, 1490, -1), Map.Felucca);
                        patched++;

                        steps = new Static(0x724);
                        steps.MoveToWorld(new Point3D(630, 1491, 3), Map.Felucca);
                        patched++;

                        steps = new Static(0x724);
                        steps.MoveToWorld(new Point3D(630, 1492, 8), Map.Felucca);
                        patched++;

                        // add a non-usable steps for aesthetics. (matching map statics)
                        steps = new Static(0x724);
                        steps.MoveToWorld(new Point3D(631, 1491, 3), Map.Felucca);
                        patched++;

                        steps = new Static(0x724);
                        steps.MoveToWorld(new Point3D(631, 1492, 8), Map.Felucca);
                        patched++;
                    }

                    // add pigs and boar spawner
                    {
                        Spawner pigs = new Spawner();
                        pigs.MoveToWorld(new Point3D(642, 1490, 0), Map.Felucca);
                        pigs.ObjectNamesRaw.Add("pig");
                        pigs.ObjectNamesRaw.Add("boar");
                        pigs.Count = 3;
                        pigs.HomeRange = 2;
                        pigs.Respawn();
                        patched++;
                    }

                    // walkways: cleanup old deco
                    {
                        int[] items = new[] { 0x40085B41, 0x400856EF, 0x40085B4B, 0x40085894, 0x40085A48, 0x40085A3D,
                            0x400859C9, 0x40085A7A, 0x40085A5D, 0x40085A84,0x40085BFF,0x40085841,0x4008586D,0x4008585F,};
                        foreach (int ix in items)
                        {
                            Item item = World.FindItem(ix);
                            if (item != null)
                            {
                                item.Delete();
                                patched++;
                            }
                        }
                    }
                    // add stairs (1826 (0x722)) @ (645, 1484, 5) and (645, 1485, 0)
                    {
                        Static stairs = new Static(0x722);
                        stairs.MoveToWorld(new Point3D(645, 1484, 5), Map.Felucca);
                        stairs.Movable = false;
                        patched++;

                        stairs = new Static(0x722);
                        stairs.MoveToWorld(new Point3D(645, 1485, 0), Map.Felucca);
                        stairs.Movable = false;
                        patched++;

                        // remove odd thing that seems to be blocking
                        // top of stairs [area interface
                        //  target yourself twice so you have that exact tile
                        Item odd = World.FindItem(0x40085D13);
                        if (odd != null)
                        {
                            odd.Delete();
                            patched++;
                        }

                        // add some planks
                        px1 = new Point2D(645, 1481);
                        px2 = new Point2D(645, 1483);
                        line = new Line(px1, px2);
                        foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                        {
                            Static plank = new Static(0x4D5);
                            int z = 10;
                            plank.MoveToWorld(new Point3D(node, z), Map.Felucca);
                            plank.Movable = false;
                            patched++;
                        }
                    }

                    // entrance walkway, east side
                    {   // corner plank missing
                        Static plank = new Static(0x4D5);
                        plank.MoveToWorld(new Point3D(636, 1496, 11), Map.Felucca);
                        plank.Movable = false;
                        patched++;

                        // more planks. double wide walkway
                        px1 = new Point2D(636, 1495);
                        px2 = new Point2D(640, 1495);
                        line = new Line(px1, px2);
                        bool toggle = false;
                        int itemid = 0x4D7;
                        int z = 0;
                        foreach (var node in line.GetPoints((int)Utility.GetDistanceToSqrt(px1, px2) + 1))
                        {
                            if (toggle == true)
                                itemid = 0x4D7;
                            else
                                itemid = 0x4D5;

                            toggle = !toggle;

                            plank = new Static(itemid);
                            z = node.X != 640 && node.X != 637 ? 12 : 11; // (f'ing odd ball zs)
                            plank.MoveToWorld(new Point3D(node, z), Map.Felucca);
                            plank.Movable = false;
                            patched++;
                        }

                        // add some stairs
                        Static stair = new Static(0x723);
                        stair.MoveToWorld(new Point3D(642, 1495, 2), Map.Felucca);
                        patched++;

                        stair = new Static(0x723);
                        stair.MoveToWorld(new Point3D(641, 1495, 6), Map.Felucca);
                        patched++;

                        // remove this extra plank (0x40006483)
                        if (World.FindItem(0x40006483) != null)
                        {
                            World.FindItem(0x40006483).Delete();
                            patched++;
                        }
                    }

                    // metal chest
                    {
                        MetalChest chest = new MetalChest();
                        chest.MoveToWorld(new Point3D(635, 1475, 16), Map.Felucca);
                        chest.Movable = false;
                        patched++;
                    }

                    #endregion Yew Orc Fort

                    #region Wind
                    EchoOut("Patching Wind...", ConsoleColor.Magenta);
                    EchoOut("\tAdd a permanent ogre corpse in Wind like was on Napa...", ConsoleColor.Magenta);
                    Static ogre = new Static(0x2006);
                    ogre.Movable = false;
                    ogre.Direction = Direction.Down;
                    ogre.MoveToWorld(new Point3D(5194, 233, 25), Map.Felucca);
                    patched++;

                    // turn on lich spawner at wind entrance
                    Spawner lichSpawner = (Spawner)FindOneItemAt(new Point3D(5186, 234, 25), Map.Felucca, typeof(Spawner));
                    if (lichSpawner != null)
                    {
                        // reclassify here as 'all shards'
                        UpdateSpawnerDesignationaAndLog(lichSpawner, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        lichSpawner.Running = true;
                        patched++;
                    }

                    #endregion Wind

                    #region Farm Cotton and Food
                    EchoOut("Patching farmable produce and cotton...", ConsoleColor.Magenta);
                    List<Type> exclude = new List<Type>() { typeof(FruitBasket) };
                    foreach (Item item in World.Items.Values)
                    {
                        if (item == null || item.Deleted) continue;
                        if (item.Map != Map.Felucca) continue;
                        if (item is Spawner spnr)
                        {
                            if (spnr.Running) continue;
                            if (spnr.Spawns("cottonplant") || spnr.Spawns(typeof(Food), exclude))
                            {
                                // reclassify here as 'all shards'
                                UpdateSpawnerDesignationaAndLog(spnr, coreSpawn: false,
                                    uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                                spnr.Running = true;
                                spnr.Respawn();
                                patched++;
                            }
                        }
                    }
                    #endregion Farm Cotton and Food
                }
                #region disable T2A teles
                if (AllShards())
                {
                    EchoOut("Disabling T2A teleporters...", ConsoleColor.Magenta);
                    Teleporter tp = (Teleporter)FindOneItemAt(new Point3D(2399, 198, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(2400, 198, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(6005, 1378, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(6005, 1379, 2), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(6005, 1380, 1), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(766, 1645, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(766, 1646, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(766, 1647, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }
                }

                #endregion disable T2A teles

                #region disable teles to bugged cave (Trinsic)
                if (AllShards())
                {
                    EchoOut("Disable teles to bugged cave (Trinsic)...", ConsoleColor.Magenta);
                    Teleporter tp = (Teleporter)FindOneItemAt(new Point3D(1714, 2996, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }

                    tp = (Teleporter)FindOneItemAt(new Point3D(1714, 2997, 0), Map.Felucca, typeof(Teleporter));
                    if (tp != null)
                    {
                        tp.Running = false;
                        patched++;
                    }
                }
                #endregion disable teles to bugged cave (Trinsic)

                #region allow pets through dungeon teleporters
                {
                    EchoOut("Allow pets through dungeon teleporters...", ConsoleColor.Magenta);
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is Teleporter tp && IsDungeonTeleporter(tp))
                        {
                            tp.Pets = true;
                            patched++;
                        }
                    }
                }
                #endregion allow pets through dungeon teleporters

                #region Add tinker to Britain
                if (SiegeStyleShards())
                {
                    EchoOut("Add tinker to Britain...", ConsoleColor.Magenta);
                    // re enable the tinker spawner we have in brit
                    List<Item> items = FindItemsAt(new Point3D(1426, 1657, 10), Map.Felucca, lenientZ: 1);
                    foreach (Item item in items)
                        if (item is Spawner sx)
                            if (sx.Distro == SpawnerModeAttribs.ModeLegacy)
                            {
                                // reclassify here as 'all shards'
                                UpdateSpawnerDesignationaAndLog(sx, coreSpawn: false,
                                    uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                                sx.Running = true;
                                patched++;
                            }


                }
                #endregion Add tinker to britain

                #endregion End Implementation

                EchoOut(String.Format("BetaReadyV2 patched with {0} objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion BetaReadyV2
        #region BetaReady
        private static int BetaReadyV1(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.BetaReadyV1;
            if (!Patched(bits) && AllShards())
            {
                EchoOut("Beta Ready V1 running...", ConsoleColor.Magenta);
                int patched = 0;
                #region Begin Implementation
                #region Champs
                if (Siege())
                {
                    Serial[] toCheck = new[] { ChampHelpers.Summer_Pirate, ChampHelpers.Autumn_Bob, ChampHelpers.Winter_FrozenHost, ChampHelpers.Spring_Vampire };
                    try
                    {
                        foreach (Serial serial in toCheck)
                        {
                            if (World.FindItem(serial) as ChampEngine != null)
                            {   // turn off all seasonal champs
                                ChampHelpers.ToggleChamp(serial, false);
                                EchoOut(string.Format("{0} seasonal champ has been disabled.", ChampHelpers.ChampName(serial)), ConsoleColor.Magenta);
                                patched++;
                            }
                            else
                                ErrorOut(bits, "Error: seasonal champ {0} not found", ConsoleColor.Red, serial);
                        }
                    }
                    catch (Exception e)
                    {
                        LogHelper.LogException(e);
                        ErrorOut(bits, "Beta Ready V1: {0}", ConsoleColor.Red, e.Message);
                        ErrorOut(bits, "{0}", ConsoleColor.Red, e.StackTrace);
                    }
                }
                #endregion Champs
                if (AllShards())
                {
                    #region Fix Green Acres
                    //  The Green Acres rectangle has been wrong since forever, and it's still wrong in RunUO 2.6
                    //  It's one giant rectangle that includes at least Dungeon Wrong and maybe a couple others.
                    //  This patch breaks GA into sort of a backwards 'L' by creating two rectangles.
                    Region rx = Region.FindByName("Green Acres", Map.Felucca);
                    if (rx != null)
                    {
                        // old broken RunUO GA rect = <rect x="5376" y="512" width="767" height="767" />
                        bool broken = rx.Coords.Count == 1 && rx.Coords[0].Start == new Point3D(5376, 512, -128) && rx.Coords[0].End == new Point3D(6143, 1279, 128);
                        if (broken)
                        {   // (5887, 1023, 0) is the corner of the backwards 'L' shape where we will split out the rectangles.
                            Rectangle3D core = rx.Coords[0];
                            Rectangle3D unt1 = new Rectangle3D(new Point3D(core.Start.X, 1023, -128), new Point3D(core.End.X, core.End.Y, 128));
                            Rectangle3D unt2 = new Rectangle3D(new Point3D(core.Start.X + (5887 - core.Start.X), core.Start.Y, -128), new Point3D(core.End.X, 1023, 128));
                            rx.Coords = new List<Rectangle3D> { unt1, unt2 };
                            patched += 2;
                        }
                    }
                }
                #endregion Fix Green Acres
                #endregion End Implementation
                EchoOut(String.Format("{0} Beta Ready objects updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion BetaReady
        #region OLDER PATCHES
        #region UpdatedRegionControllersV1
        private static int UpdatedRegionControllersV1(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.UpdatedRegionControllersV1;
            if (!Patched(bits) && AllShards())
            {
                EchoOut("Update region controllers V1 running...", ConsoleColor.Magenta);
                int patched = 0;

                patched = StaticRegionControl.FixControllers();

                EchoOut(String.Format("{0} Region controllers updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatcherTableTest
        #region PatcherTableTest
        private static int PatcherTableTest(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.PatcherTableTest;
            if (!Patched(bits) && AllShards())
            {
                EchoOut("PatcherTableTest: running...", ConsoleColor.Yellow);
                int patched = 333;

                EchoOut(String.Format("{0} Patcher Table test complete", patched), ConsoleColor.Yellow);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        #endregion PatcherTableTest
        #region HasDeletedHomelessBaseVendors
        private static int HasDeletedHomelessBaseVendors(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.None;
            if (AllShards())
            {
                EchoOut("Run Always: Deleting homeless base vendors...", ConsoleColor.Yellow);
                int patched = 0;

                // need to log this
                LogHelper logger = new LogHelper("HasDeletedHomelessBaseVendors.log", false, true);

                // first, locate all template mobiles (source templates)
                List<Mobile> templateMobiles = new();
                foreach (Item item in World.Items.Values)
                    if (item is Spawner spawner && !spawner.Deleted && spawner.TemplateEnabled && spawner.TemplateMobile != null && !spawner.TemplateMobile.Deleted)
                        templateMobiles.Add(spawner.TemplateMobile);

                // get a list of TownShip vendors
                List<BaseVendor> vendorList = GetTownshipVendors();

                // if you don't have a spawner, and you're not a template, and you're not a QuestGiver, and you're not in someone's house, then you should be deleted.
                foreach (Mobile mobile in World.Mobiles.Values)
                    if (mobile is BaseVendor bv && !bv.Deleted)
                        if (bv is QuestGiver qg)
                        {
                            if (qg.Owner == null)
                                ErrorOut(bits, string.Format("Notice: Ownerless QuestGiver '{0}' found at {1}", qg, qg.Location), ConsoleColor.Red);
                            // don't delete
                        }
                        else if (vendorList.Contains(bv))
                        {
                            ; // he's cool, leave him alone
                        }
                        else if (bv.GetType().BaseType.Name.Contains("BaseFactionVendor"))
                        {
                            ; // he's cool, leave him alone
                        }
                        else if (TownshipNPCHelper.IsTownshipNPC(bv))
                        {
                            ; // he's cool, leave him alone
                        }
                        else if (bv.IsIntMapStorage == true)
                        {
                            ; // he's cool, leave him alone
                        }
                        else if (bv.GetMobileBool(Mobile.MobileBoolTable.IsLinked))
                        {
                            ; // he's cool, leave him alone
                        }
                        else if (bv.Spawner == null && !templateMobiles.Contains(mobile) && !InAHouse(bv))
                        {
                            // homeless base vendor
                            patched++;
                            logger.Log(LogType.Mobile, bv,
                               string.Format("Title: {0}, Created: {1}", bv.Title == null ? "(null)" : bv.Title, bv.Created));
                            bv.Delete();
                        }

                logger.Finish();

                EchoOut(String.Format("{0} homeless base vendors deleted.", patched), ConsoleColor.Yellow);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }

        private static List<BaseVendor> GetTownshipVendors()
        {
            List<BaseVendor> list = new();
            foreach (var tss in TownshipStone.AllTownshipStones)
                if (tss is TownshipStone && tss.TownshipNPCs != null)
                    foreach (Mobile m in tss.TownshipNPCs)
                        if (m is BaseVendor)
                            list.Add(m as BaseVendor);
            return list;
        }

        #endregion HasDeletedHomelessBaseVendors
        #region HasPatchedPatrolGuardSpawners
        private static int HasPatchedPatrolGuardSpawners(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedPatrolGuardSpawners;
            if (!Patched(bits) && SiegeStyleShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to enable Patrol Guards...", ConsoleColor.Magenta);
                Spawner template = null;
                foreach (Item item in World.Items.Values)
                {
                    if (item is Spawner spawner && spawner.Map == Map.Felucca && !spawner.Deleted)
                    {
                        if (IsTownRegion(spawner.Location, spawner.Map))
                            if (spawner.Spawns("PatrolGuard"))
                            {
                                // reclassify here as 'all shards'
                                UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                                    uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                                if (template == null)
                                    template = spawner;

                                spawner.Running = true;
                                patched++;
                            }
                    }
                }
                #region Add two Patrol Guard spawners to Vesper bank
                // add two Patrol Guard spawners to Vesper (previously Kin spawners)
                Spawner s1 = new Spawner();
                Spawner s2 = new Spawner();
                Utility.CopyProperties(s1, template);
                Utility.CopyProperties(s2, template);
                s1.ObjectNamesRaw = new ArrayList(s1.ObjectNamesRaw);
                s2.ObjectNamesRaw = new ArrayList(s2.ObjectNamesRaw);
                s1.Location = new Point3D(2896, 677, 0);
                s2.Location = new Point3D(2896, 674, 0);
                UpdateSpawnerDesignationaAndLog(s1, coreSpawn: false, uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                UpdateSpawnerDesignationaAndLog(s2, coreSpawn: false, uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                // now drop a control console on top of the pile if there are more than one stacked spawners, and there isn't already
                //  a console there.
                if (NeedsConsole(s1.X, s1.Y, s1.Z, s1.Map) && !AlreadySpawned(s1.X, s1.Y, s1.Z, s1.Map))
                {
                    Items.StackedSpawnerConsole stackedSpawnerConsole = new Items.StackedSpawnerConsole();
                    stackedSpawnerConsole.Movable = false;
                    stackedSpawnerConsole.Visible = false;
                    stackedSpawnerConsole.MoveToWorld(new Point3D(s1.X, s1.Y, s1.Z + 1), s1.Map);
                }
                if (NeedsConsole(s2.X, s2.Y, s2.Z, s2.Map) && !AlreadySpawned(s2.X, s2.Y, s2.Z, s2.Map))
                {
                    Items.StackedSpawnerConsole stackedSpawnerConsole = new Items.StackedSpawnerConsole();
                    stackedSpawnerConsole.Movable = false;
                    stackedSpawnerConsole.Visible = false;
                    stackedSpawnerConsole.MoveToWorld(new Point3D(s2.X, s2.Y, s2.Z + 1), s2.Map);
                }
                patched += 2;
                #endregion  Add two Patrol Guard spawners to Vesper bank
                EchoOut(String.Format("{0} Patrol Guards enabled", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        #endregion HasPatchedPatrolGuardSpawners
        #region HasRunGeneralCleanupV1
        private static int HasRunGeneralCleanupV1(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRunGeneralCleanupV1;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to perform some general cleanup...", ConsoleColor.Magenta);

                Region prison = Region.FindByName("Angel Island", Map.Felucca);
                Region greenacres = Region.FindByName("Green Acres", Map.Felucca);
                bool ai = Core.RuleSets.AngelIslandRules();
                bool siege = Core.RuleSets.SiegeStyleRules();

                foreach (Item item in World.Items.Values)
                {
                    if (item is null || item.Deleted) continue;
                    if (item.Map == null) continue;

                    // turn jail exit gate (all shards)
                    if (IsFelucca(item) && item is JailExitSungate gate)
                    {
                        gate.Running = true;
                        gate.Visible = true;
                        patched++;
                    }
                    // add Warden (all shards)
                    if (IsFelucca(item) && item is Spawner s0 && prison != null && prison.Contains(s0.Location) && s0.Location == new Point3D(355, 833, 20))
                    {
                        s0.ObjectNamesRaw = new() { "AIWarden" };

                        UpdateSpawnerDesignationaAndLog(s0, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        s0.HomeRange = 0;
                        s0.MobileDirection = Direction.South;
                        s0.Running = true;
                        patched++;
                    }
                    // turn prison spawners (all shards but AI)
                    if (!ai && IsFelucca(item) && item is Spawner s1 && prison != null && prison.Contains(s1.Location))
                    {
                        // reclassify here as 'all shards'
                        UpdateSpawnerDesignationaAndLog(s1, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        s1.Running = true;
                        patched++;
                    }
                    // turn on MoonGateWizards (all shards but AI)
                    if (!ai && IsFelucca(item) && item is Spawner s2)
                    {
                        if (s2.Spawns("MoonGateWizard"))
                        {
                            // reclassify here as 'all shards'
                            UpdateSpawnerDesignationaAndLog(s2, coreSpawn: false,
                                uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                            s2.Running = true;
                            patched++;
                        }
                    }
                    if (item is CustomRegionControl crc)
                    {   // reset the colorization state (all shards)
                        crc.Registered = !crc.Registered;
                        crc.Registered = !crc.Registered;
                        patched++;

                        if (crc.CustomRegion != null && !string.IsNullOrEmpty(crc.CustomRegion.Name))
                        {
                            if (!ai) // all shards but AI
                                if (crc.CustomRegion.Name == "Ocllo Island" || crc.CustomRegion.Name == "Island Siege")
                                {
                                    crc.Registered = false;
                                    patched++;
                                }

                            if (ai) // AI only
                                if (crc.CustomRegion.Name == "Ocllo Island" || crc.CustomRegion.Name == "Ocllo")
                                {
                                    crc.Registered = false;
                                    patched++;
                                }
                        }
                    }
                    if (item is StaticRegionControl src)
                    {   // reset the colorization state (all shards)
                        src.Registered = !src.Registered;
                        src.Registered = !src.Registered;
                        patched++;

                        if (!ai) // all shards but AI
                            if (src.StaticRegion.Name == "Ocllo Island" || src.StaticRegion.Name == "Island Siege")
                            {
                                src.Registered = false;
                                patched++;
                            }

                        if (ai) // AI only
                            if (src.StaticRegion.Name == "Ocllo Island" || src.StaticRegion.Name == "Ocllo")
                            {
                                src.Registered = false;
                                patched++;
                            }
                    }
                }

                EchoOut(String.Format("{0} elements patched", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static bool IsFelucca(Item item)
        {
            return item != null && !item.Deleted && item.Map == Map.Felucca;
        }
        #endregion HasRunGeneralCleanupV1
        #region HasPatchedMachineInfo
        private static int HasPatchedMachineInfo(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedMachineInfo;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to add each account's current hardware hash to new hash list...", ConsoleColor.Magenta);

                foreach (Accounting.Account current in Accounting.Accounts.Table.Values)
                {
                    // they have no hash
                    if (current.HardwareHashRaw == 0)
                        continue;

                    // add this hash to the hash list
                    if (!current.Machines.Contains(current.HardwareHashRaw))
                    {
                        current.Machines.Add(current.HardwareHashRaw);
                        patched++;
                    }
                }

                EchoOut(String.Format("{0} accounts patched", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        #endregion HasPatchedMachineInfo
        #region HasResetChamps
        private static int HasResetChamps(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasResetChamps;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to fix ill-configured champ spawns...", ConsoleColor.Magenta);

                // set them all off and clear the monsters
                ResetChampsWorker(bits, ref patched);

                // turn on autumn champ
                EchoOut(String.Format("Turning on Autumn Bob champ"), ConsoleColor.Magenta);
                ChampHelpers.ToggleChamp(ChampHelpers.Autumn_Bob, true);

                EchoOut(String.Format("{0} champ engines updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static void ResetChampsWorker(PatchIndex bits, ref int patched)
        {
            string[] names = new[] { "Summer Pirate", "Autumn Bob", "Winter FrozenHost", "Spring Vampire" };
            Serial[] ids = new[] { ChampHelpers.Summer_Pirate, ChampHelpers.Autumn_Bob, ChampHelpers.Winter_FrozenHost, ChampHelpers.Spring_Vampire };
            try
            {
                int index = 0;
                foreach (Serial serial in ids)
                {
                    if (World.FindItem(serial) as ChampEngine != null)
                    {
                        ChampEngine champ = World.FindItem(serial) as ChampEngine;
                        champ.Name = names[index++];
                        EchoOut(String.Format("Resetting seasonal champ {0}.", champ.Name), ConsoleColor.Magenta);
                        ChampHelpers.ToggleChamp(serial, false);
                        patched++;
                    }
                    else
                    {
                        ErrorOut(bits, string.Format("{0} seasonal not found", serial), ConsoleColor.Red);
                    }
                }
            }
            catch (Exception e)
            {
                LogHelper.LogException(e);
                System.Console.WriteLine("Seasonal champ ResetChamps code: " + e.Message);
                System.Console.WriteLine(e.StackTrace);
            }
        }
        #endregion HasResetChamps
        private static int HasFixedDoorsV2(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasFixedDoorsV2;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to fix broken doors at Fire Temple and 1680 2986 20...", ConsoleColor.Magenta);
                BaseDoor door1 = (BaseDoor)FindOneItemAt(new Point3D(1680, 2986, 20), Map.Felucca, typeof(BaseDoor));
                BaseDoor door2 = (BaseDoor)FindOneItemAt(new Point3D(1680, 2985, 20), Map.Felucca, typeof(BaseDoor));
                if (door1 != null && door2 != null)
                {
                    door1.Facing = DoorFacing.SouthCW;
                    door2.Facing = DoorFacing.NorthCCW;
                    patched += 2;
                    EchoOut(String.Format("Doors fixed. {0} items updated", patched), ConsoleColor.Magenta);
                    if (StandardShards())
                    {   // wipe tiles from (4595, 3625, 30) - (4599, 3625, 30)
                        List<Item> items = new();
                        for (int X = 4595; X <= 4599; X++)
                            items.Add(FindOneItemAt(new Point3D(X, 3625, 30), Map.Felucca, typeof(Item)));
                        foreach (Item item in items)
                        {
                            item?.Delete();
                            patched++;
                        }
                    }
                    EchoOut(String.Format("Tiles removed. {0} items updated", patched - 2), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                {
                    ErrorOut(bits, "Did not find door(s) at expected location.", ConsoleColor.Red);
                }
            }

            return patched;
        }
        private static int HasPatchedDungeonTeleporters2(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedDungeonTeleporters2;
            // The new map floor again / placement. Adjust.
            if (!Patched(bits) && !LoginServer() && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to adjust dungeon exit teleporters II. Patching...", ConsoleColor.Magenta);
                List<Tuple<Point3D, Point3D>> list = new()
                {
                    new Tuple<Point3D, Point3D> (new Point3D(5556, 1826, -10), new Point3D(5556, 1827, -13)),
                    new Tuple<Point3D, Point3D> (new Point3D(5557, 1826, -10), new Point3D(5557, 1827, -13)),
                };

                foreach (var points in list)
                {
                    Item item = Utility.FindOneItemAt(points.Item1, Map.Felucca, typeof(Teleporter));
                    if (item is Teleporter tele)
                    {
                        tele.Location = points.Item2;    // adjust for map changes
                        patched++;
                    }
                    else
                        ErrorOut(bits, "Did not find teleporter at {0}.", ConsoleColor.Red, points.Item1);
                }

                // delete random moongate
                {
                    Item item = Utility.FindOneItemAt(new Point3D(5545, 189, 0), Map.Felucca, typeof(Moongate));
                    if (item is Moongate moongate)
                    {
                        patched++;
                        moongate.Delete();
                    }
                }

                // adjust tele dest
                {
                    Item item = Utility.FindOneItemAt(new Point3D(5538, 170, 5), Map.Felucca, typeof(Teleporter));
                    if (item is Teleporter tele)
                    {
                        patched++;
                        tele.PointDest = new Point3D(5513, 176, 5);
                    }
                    else
                        ErrorOut(bits, "Did not find teleporter at expected location .", ConsoleColor.Red);
                }

                // and the reverse
                {
                    Item item = Utility.FindOneItemAt(new Point3D(5513, 176, 5), Map.Felucca, typeof(Teleporter));
                    if (item is Teleporter tele)
                    {
                        patched++;
                        tele.PointDest = new Point3D(5538, 170, 5);
                    }
                    else
                        ErrorOut(bits, "Did not find teleporter at expected location .", ConsoleColor.Red);
                }

                EchoOut(String.Format("{0} Dungeon exit teleporters adjusted.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasPatchedDungeonTeleporters(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedDungeonTeleporters;
            // The new map floor is a bit higher than the old when the teleporters were placed.
            // We need to raise the teles
            if (!Patched(bits) && !LoginServer() && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to adjust dungeon exit teleporters. Patching...", ConsoleColor.Magenta);
                List<Tuple<Point3D, Point3D>> list = new()
                {
                    new Tuple<Point3D, Point3D> (new Point3D(5457, 1864, 0), new Point3D(5457, 1864, 3)),

                    new Tuple<Point3D, Point3D> (new Point3D(5242, 1007, 0), new Point3D(5242, 1007, 4)),
                    new Tuple<Point3D, Point3D> (new Point3D(5243, 1007, 0), new Point3D(5243, 1007, 4)),
                    new Tuple<Point3D, Point3D> (new Point3D(5244, 1007, 0), new Point3D(5244, 1007, 4)),
                };

                foreach (var points in list)
                {
                    Item item = Utility.FindOneItemAt(points.Item1, Map.Felucca, typeof(Teleporter));
                    if (item is Teleporter tele)
                    {
                        tele.Location = points.Item2;    // adjust for map changes
                        patched++;
                    }
                    else
                        ErrorOut(bits, "Did not find teleporter at {0}.", ConsoleColor.Red, points.Item1);
                }

                // dupe teleporter at (1997, 81, 7)
                //  add dupes at (1997, 82, 6),and (1997, 80, 7)
                {
                    Item item = Utility.FindOneItemAt(new Point3D(1997, 81, 7), Map.Felucca, typeof(Teleporter));
                    if (item is Teleporter tele)
                    {
                        Item tele2 = Utility.Dupe(tele);
                        Item tele3 = Utility.Dupe(tele);
                        if (tele2 != null)
                        {
                            tele2.Location = new Point3D(1997, 82, 6);
                            patched++;
                        }
                        if (tele3 != null)
                        {
                            tele3.Location = new Point3D(1997, 80, 7);
                            patched++;
                        }
                    }
                    else
                        ErrorOut(bits, "Did not find teleporter at expected location .", ConsoleColor.Red);
                }


                // patch pointdest to (5878, 147, 25) for tele at (5203, 2327, 27)
                {
                    Item item = Utility.FindOneItemAt(new Point3D(5203, 2327, 27), Map.Felucca, typeof(Teleporter));
                    if (item is Teleporter tele)
                    {
                        tele.PointDest = new Point3D(5878, 147, 25);
                        patched++;
                    }
                }

                EchoOut(String.Format("{0} Dungeon exit teleporters adjusted.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasPatchedAICamps(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedAICamps;
            // There were some complaints that the new Nerun respawn rates for camps was too slow. (Outdoors.map)
            //  I'll revert to faster respawn, but only for Angel Island
            if (!Patched(bits) && AngelIsland())
            {
                LogPatch(bits);
                EchoOut("One-time patch for custom respawn rates for Angel Island \"Camps\". Patching...", ConsoleColor.Magenta);
                foreach (Item item in World.Items.Values)
                {
                    if (item is EventSpawner) continue;
                    if (item.Map != Map.Felucca) continue;

                    if (item is Spawner spawner)
                        if (spawner.Spawns("camp"))
                        {
                            patched++;
                            spawner.MinDelay = TimeSpan.FromMinutes(10);    // ignoring Nerun's Outdoors.map, custom for Angel Island
                            spawner.MaxDelay = TimeSpan.FromMinutes(20);
                        }
                }

                EchoOut(String.Format("{0} Angel Island Camps Patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasDeletedNerunSpawners(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasDeletedNerunSpawners;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove the \"Sea Market\" spawners....", ConsoleColor.Magenta);

                // get "Sea Market" spawners
                List<string> mzLines = GetNerunSpawnerEntries();

                // delete spawners at "Sea Market"
                foreach (string line in mzLines)
                {
                    List<NerunRecord.Record> recordList = new();
                    List<string> compiledTokens = new();
                    string[] lineToks = line.Split(new char[] { '|' });                 // parse on '|'
                    CompileLine(lineToks, compiledTokens);                              // compile this line
                    NerunRecord.Parse(compiledTokens.ToArray(), recordList);            // parse into a record list
                    List<Spawner> allSpawnersAt = new List<Spawner>(AllModeNerunsSpawnersAt(recordList[0].X, recordList[0].Y, Map.Felucca));
                    foreach (Spawner spawner in allSpawnersAt)
                    {
                        spawner.RemoveObjects();
                        spawner.Delete();
                        patched++;
                    }
                }

                EchoOut(String.Format("{0} \"Sea Market\" spawners removed.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        #region HasDeletedNerunSpawners
        private static List<string> GetNerunSpawnerEntries()
        {
            // get Vendor spawner entries in "Sea Market"
            string[] files = new string[] { Path.Combine(Core.DataDirectory, "Spawners/Nerun's Distro/Spawns/felucca/Vendors.map") };
            List<string> mzLines = new();
            bool recording = false;
            bool start = false;
            foreach (string file in files)
            {
                foreach (string line in System.IO.File.ReadLines(file))
                {   //first scan looking for "Sea Market"
                    if (line.ToLower().Contains("sea market"))
                    {   // found it
                        // now collect all lines up until the next comment into a buffer
                        start = true;
                        continue;
                    }
                    if (start == true && CanParse(line))
                    {
                        recording = true;
                        mzLines.Add(line);
                        continue;
                    }
                    else if (recording == true && CanParse(line) == false)
                    {
                        recording = false;
                        break;
                    }
                }
            }

            return mzLines;
        }
        #endregion HasDeletedNerunSpawners
        private static int HasRepatchedMoonglowZoo(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRepatchedMoonglowZoo;
            if (!Patched(bits) && StandardShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time repatch of Moonglow Zoo on all standard shards running...", ConsoleColor.Magenta);

                // first, wipe the area of mobiles (likely blessed from AI)
                Region reg = Region.FindByName("Britannia Royal Zoo", Map.Felucca);
                if (reg != null)
                {
                    foreach (Rectangle3D rect in reg.Coords)
                    {
                        Rectangle2D rect2D = new(rect.Start.X, rect.Start.Y, rect.Width, rect.Height);
                        patched += WipeRect(Map.Felucca, rect2D,
                            Utility.GetAverageZ(Map.Felucca, rect2D.Center.X, rect2D.Center.Y),
                            flags: WipeRectFlags.Mobiles);
                    }
                }
                else
                {
                    ErrorOut(bits, "Logic Error: Unable to find Moonglow zoo to wipe.", ConsoleColor.Red);
                    return 0;
                }

                // next, set all the spawners to 'Exhibit' creatures
                foreach (Rectangle3D rect in reg.Coords)
                {
                    IPooledEnumerable eable = Map.Felucca.GetItemsInBounds(new Rectangle2D(rect.Start.X, rect.Start.Y, rect.Width, rect.Height));

                    foreach (Item item in eable)
                    {
                        if (item is Spawner spawner && !spawner.Deleted)
                        {
                            foreach (object o in spawner.Objects)
                            {
                                if (o is BaseCreature bc)
                                {   // leave guards and escortables alone
                                    if (!bc.Body.IsHuman)
                                    {   // we don't mix monsters and humans at this location
                                        spawner.Exhibit = true;
                                        spawner.RemoveObjects();
                                        patched++;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    eable.Free();
                }

                // next lock all the doors and remove signs (standard shards only)
                foreach (Rectangle3D rect in reg.Coords)
                {
                    List<Item> list = new();
                    IPooledEnumerable eable = Map.Felucca.GetItemsInBounds(new Rectangle2D(rect.Start.X, rect.Start.Y, rect.Width, rect.Height));
                    foreach (Item item in eable)
                    {
                        if (item is LocalizedSign)
                            continue;
                        else if (item is CustomRegionControl)
                            continue;
                        else if (item is BaseDoor bd)
                        {
                            bd.Locked = true;
                            patched++;
                        }
                        // south facing sign, north facing sign
                        //  only delete for standard shards
                        else if (StandardShards(quiet: true) && item.ItemID == 0xBD1 || item.ItemID == 0xBD2)
                        {
                            list.Add(item);
                            patched++;
                        }

                    }
                    eable.Free();

                    // delete all the items
                    foreach (Item item in list)
                        item.Delete();
                }

                EchoOut(String.Format("{0} elements of Moonglow Zoo on all standard shards repatched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasPatchedChickenFight(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedChickenFight;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove T2A spawner from 'chicken fight' tunnel...", ConsoleColor.Magenta);

                List<Item> items = FindItemsAt(new Point3D(5658, 423, 8), Map.Felucca, lenientZ: 1);
                // delete the T2A teleporter and stalagmite
                foreach (Item item in items)
                    if (item.GetType() == typeof(EventTeleporter))
                        continue;
                    else
                    {
                        patched++;
                        item.Delete();
                    }

                EchoOut(String.Format("{0} items removed.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedVendorFees(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedVendorFees;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to turn on vendor daily fees...", ConsoleColor.Magenta);

                // restore original fees. 
                // We had set this to zero causing ill behavior when calculating days the vendor can work for you (divide by zero)
                CoreAI.BaseVendorFee = 20;
                patched++;

                EchoOut(String.Format("{0} vendor daily fees restored.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedTemplateSpawners(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedTemplateSpawners;
            if (!Patched(bits) && AllShards())
            {   // special 'template' 
                LogPatch(bits);
                EchoOut("One-time patch to set template BaseVendor to invulnerable...", ConsoleColor.Magenta);

                foreach (Item item in World.Items.Values)
                {
                    if (item == null || item.Deleted)
                        continue;

                    if (item is Spawner spawner)
                    {
                        if (spawner.TemplateMobile is BaseVendor vendor)
                        {
                            if (vendor.IsInvulnerable == false)
                            {   // make clear our intentions
                                spawner.Exhibit = true;         // anything this spawner spawns will be an Exhibit
                                vendor.IsInvulnerable = true;   // update the template mobile to also be Invulnerable
                                patched++;
                            }
                        }
                    }
                }

                EchoOut(String.Format("{0} template vendors patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedPatchHistory(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedPatchHistory;
            // cannot call AllShards here as it will initialize the file we are checking!
            if (!Patched(bits))
            {
                // cannot call LogPatch here as it will initialize the file we are checking!
                if (!File.Exists(m_pathName))
                    foreach (PatchIndex patchBits in Enum.GetValues(typeof(PatchIndex)))
                        if (Patched(patchBits))
                        {   // record that this patch has been applied.
                            LogPatch(patchBits);
                            PatchComplete(patchBits, patchid, timeUnknown: true);
                            patched++;
                        }

                LogPatch(bits);
                EchoOut("One-time patch to retroactively update patch history...", ConsoleColor.Magenta);
                EchoOut(String.Format("{0} Patch history updated.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasEnabledSpecialSpawners(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasEnabledSpecialSpawners;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to enable special spawners...", ConsoleColor.Magenta);


                List<Item> list = new();
                /*LordGuardian */
                list.Add(FindOneItemAt(new Point3D(1521, 1442, 15), Map.Felucca, typeof(Spawner)));
                /* LadyGuardian */
                list.Add(FindOneItemAt(new Point3D(1521, 1443, 15), Map.Felucca, typeof(Spawner)));
                /* Smaghed */
                list.Add(FindOneItemAt(new Point3D(1521, 1446, 15), Map.Felucca, typeof(Spawner)));
                /* CrapFactory */
                list.Add(FindOneItemAt(new Point3D(1521, 1448, 15), Map.Felucca, typeof(Spawner)));
                /* Mashiara */
                list.Add(FindOneItemAt(new Point3D(1505, 1441, 15), Map.Felucca, typeof(Spawner)));

                foreach (Item item in list)
                    if (item is Spawner spawner && !spawner.Deleted)
                    {
                        spawner.Running = true;
                        // reclassify here as 'all shards'
                        UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                            uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);
                        patched++;
                    }

                // move Mashiara
                if (list.Count >= 5)
                    if (list[4] is Spawner spawner)
                    {
                        spawner.Location = new Point3D(1526, 1442, 15);
                        spawner.MobileDirection = Direction.West;
                        patched++;
                    }
                // test center doesn't have all these spawners
                if (patched == 6 || Core.UOTC_CFG)
                {
                    EchoOut(String.Format("{0} spawners enabled.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, "Did not find the one or more spawners as expected.", ConsoleColor.Red);
            }

            return patched;
        }
        #region HasRemovedBlessed
        private static int HasRemovedBlessed(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRemovedBlessed;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove blessed creatures...", ConsoleColor.Magenta);

                // look for blessed creatures not on a spawner - there should be zero
                LogHelper logger = new LogHelper("OrphanedBlessedDeleted.log", true, true, true);
                foreach (Mobile m in World.Mobiles.Values)
                {
                    if (m == null || m.Deleted)
                        continue;

                    if (m is PlayerMobile)
                        continue;

                    if (m.Blessed && !IsSpawnerProduct(m))
                    {
                        logger.Log(LogType.Mobile, m);
                        m.Delete();
                        patched++;
                    }
                }
                logger.Finish();
                if (patched > 0)
                {

                    EchoOut(String.Format("{0} 'blessed' mobiles removed.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, "Did not find 'blessed' mobiles as expected.", ConsoleColor.Red);
            }

            return patched;
        }
        private static bool IsSpawnerProduct(Mobile m)
        {
            foreach (Item item in World.Items.Values)
            {
                if (item == null || item.Deleted) continue;
                if (item is Spawner spawner)
                {
                    if (spawner.Objects != null)
                        foreach (object o in spawner.Objects)
                            if (o is Mobile sm)
                                if (sm.Serial == m.Serial)
                                    return true;
                }
            }

            return false;
        }
        #endregion HasRemovedBlessed
        #region HasPatchedBlessedToInvulnerable
        private static int HasPatchedBlessedToInvulnerable(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedBlessedToInvulnerable;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to convert 'blessed' mobiles to 'Exhibit' (Invulnerable+)...", ConsoleColor.Magenta);
                foreach (Item item in World.Items.Values)
                    if (item is Spawner spawner)
                        foreach (object o in spawner.Objects)
                        {
                            if (o is Mobile m)
                            {
                                if (m.Blessed)
                                {
                                    spawner.Exhibit = true;
                                    if (spawner.Running)
                                        spawner.ScheduleRespawn = true;
                                    patched++;

                                    // now for the template
                                    if (spawner.TemplateMobile != null && !spawner.TemplateMobile.Deleted)
                                    {
                                        if (spawner.TemplateMobile is BaseCreature bc)
                                        {
                                            Spawner.MakeExhibit(bc);
                                            patched++;
                                        }
                                    }
                                }
                            }
                        }

                if (patched > 0)
                {

                    EchoOut(String.Format("{0} 'blessed' mobiles converted to 'exhibit'.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, "Did not find 'blessed' mobiles as expected.", ConsoleColor.Red);
            }

            return patched;
        }
#if false
        private static bool MoonGlowspawn(Mobile m)
        {
            if (InRegion(m.Location, m.Map, "Britannia Royal Zoo"))
                if (m.IsInvulnerable && m is BaseCreature bc)
                    return true;
            return false;
        }
#endif
        #endregion HasPatchedBlessedToInvulnerable
        #region HasWipedKinRansomChests
        private static int HasWipedKinRansomChests(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasWipedKinRansomChests;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to wipe kin ransom chests...", ConsoleColor.Magenta);
                EchoOut("This patch will take about a minute...", ConsoleColor.Yellow);

                var before = Before();

                // find the ransom chests
                List<KinRansomChest> list = new();
                foreach (Item ix in World.Items.Values)
                    if (ix is KinRansomChest krc && !krc.Deleted)
                        list.Add(krc);

                KinRansomChestWipe(Map.Felucca, list);

                var after = After();

                patched = Delta(before, after).Count;

                if (patched > 0)
                {

                    EchoOut(String.Format("{0} Ransom chests and deco wiped.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, "Did not find the ransom chests as expected.", ConsoleColor.Red);
            }

            return patched;
        }
        private static void KinRansomChestWipe(Map map, List<KinRansomChest> chests)
        {
            Type[] exclude = new Type[] { typeof(Spawner), typeof(Teleporter), typeof(AddonComponent), typeof(BaseDoor) };
            foreach (object cx in chests)
                if (cx is KinRansomChest chest)
                {
                    // 4x4x5 .. this captures all the platforms on which the chests sit. 
                    //  4x4 width and height, with a Z sweep if +- 5
                    Rectangle2D rect = new Rectangle2D(4, 4, new Point2D(chest.X, chest.Y));
                    Utility.RefreshDeco(map, new List<Rectangle2D>() { rect }, chest.Z,
                        typeExclude: exclude, lenientZ: int.MinValue/*5*/);
                }
        }
        #endregion HasWipedKinRansomChests
        private static int HasDisabledIOBRegions(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasDisabledIOBRegions;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to disabled IOB regions...", ConsoleColor.Magenta);
                foreach (Item item in World.Items.Values)
                    if (item is CustomRegionControl crc)
                        if (crc.CustomRegion.IOBAlignment != IOBAlignment.None)
                        {
                            crc.Registered = false;
                            patched++;
                        }
                if (patched > 0)
                {

                    EchoOut(String.Format("{0} IOB regions disabled.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, "Did not find IOB regions as expected.", ConsoleColor.Red);
            }

            return patched;
        }
        private static int HasPatchedAIMoongates(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedAIMoongates;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to cleanup redundant public moongates.", ConsoleColor.Magenta);

                var before = Before();

                PublicMoongate.Generate(PMList.Felucca);

                var after = After();

                patched = Delta(before, after).Count;


                EchoOut(String.Format("{0} Redundant public moongates deleted.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedEventTeleporters(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedEventTeleporters;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to replace all event teleporters with EventTeleporters.", ConsoleColor.Magenta);
                Mute();
                // get the list of moongates
                string pathName = Path.Combine(Core.DataDirectory, "Patches", "EventTeleporters.cfg");
                if (File.Exists(pathName))
                {

                    List<Tuple<int, int, int, int, Map>> records = new();
                    foreach (string line in File.ReadAllLines(pathName))
                    {
                        string[] toks = line.Split(' ');
                        records.Add(new Tuple<int, int, int, int, Map>(int.Parse(toks[0]), int.Parse(toks[1]), int.Parse(toks[2]), int.Parse(toks[3]), Map.Parse(toks[4])));
                    }

                    int count = 0;
                    foreach (var record in records)
                    {
                        Item item = World.FindItem(record.Item1);
                        if (item == null || item.Deleted)
                            count++;
                        else if (item is Teleporter && item.Location == new Point3D(record.Item2, record.Item3, record.Item4))
                        {
                            if (item.GetType() == typeof(Teleporter))
                            {
                                Teleporter teleporter;
                                teleporter = (Teleporter)item;
                                EventTeleporter etp = new EventTeleporter();
                                CopyProperties(etp, teleporter);
                                etp.Running = false;
                                etp.Visible = false;
                            }
                            else if (item.GetType() == typeof(KeywordTeleporter))
                            {
                                KeywordTeleporter teleporter;
                                teleporter = (KeywordTeleporter)item;
                                EventKeywordTeleporter etp = new EventKeywordTeleporter();
                                CopyProperties(etp, teleporter);
                                etp.Running = false;
                                etp.Visible = false;
                            }
                            else
                                ErrorOut(bits, "Logic Error: Unknown teleporter type {0}.", ConsoleColor.Red, item);

                            item.Delete();
                            patched++;
                        }
                    }
                    Unmute();

                    EchoOut(String.Format("{0} teleporters replaced.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, String.Format("Error: unable to locate {0}.", pathName), ConsoleColor.Red);
            }

            return patched;
        }
        private static int HasPatchedMoongates(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedMoongates;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to replace all moongates with sungates.", ConsoleColor.Magenta);
                Mute();
                // get the list of moongates
                string pathName = Path.Combine(Core.DataDirectory, "Patches", "Angel Island Moongate.cfg");
                if (File.Exists(pathName))
                {

                    List<Tuple<int, int, int, int, Map>> records = new();
                    foreach (string line in File.ReadAllLines(pathName))
                    {
                        string[] toks = line.Split(' ');
                        records.Add(new Tuple<int, int, int, int, Map>(int.Parse(toks[0]), int.Parse(toks[1]), int.Parse(toks[2]), int.Parse(toks[3]), Map.Parse(toks[4])));
                    }

                    int count = 0;
                    foreach (var record in records)
                    {
                        Item item = World.FindItem(record.Item1);
                        if (item == null || item.Deleted)
                            count++;
                        else if (item is Moongate && item.Location == new Point3D(record.Item2, record.Item3, record.Item4))
                        {
                            if (item.Serial == 0x400040A1)
                            {   // special New Player Starting area
                                Moongate moongate;
                                moongate = (Moongate)item;
                                Sungate sungate = new Sungate();
                                CopyProperties(sungate, moongate);
                            }
                            else if (item.GetType() == typeof(ConfirmationMoongate))
                            {
                                ConfirmationMoongate moongate;
                                moongate = (ConfirmationMoongate)item;
                                EventConfirmationSungate sungate = new EventConfirmationSungate();
                                CopyProperties(sungate, moongate);
                                sungate.Running = false;
                                sungate.Visible = false;
                            }
                            else if (item.GetType() == typeof(JailExitGate))
                            {
                                JailExitGate moongate;
                                moongate = (JailExitGate)item;
                                JailExitSungate sungate = new JailExitSungate();
                                CopyProperties(sungate, moongate);
                                sungate.Running = false;
                                sungate.Visible = false;
                            }
                            else if (item.GetType() == typeof(Moongate))
                            {
                                Moongate moongate;
                                moongate = (Moongate)item;
                                EventSungate sungate = new EventSungate();
                                CopyProperties(sungate, moongate);
                                sungate.Running = false;
                                sungate.Visible = false;
                            }
                            else
                                ErrorOut(bits, "Logic Error: Unknown moongate type {0}.", ConsoleColor.Red, item);

                            item.Delete();
                            patched++;
                        }
                    }
                    Unmute();

                    EchoOut(String.Format("{0} moongates replaced.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, String.Format("Error: unable to locate {0}.", pathName), ConsoleColor.Red);
            }

            return patched;
        }
        private static int HasPatchedDestinationOverride(int patchid)
        {   // While old moongates had a notion of DestinationOverride, teleporters did not.
            //  The result is that teleporters that send you to, say another map, fail because it's is against the travel rules.
            // Set all existing to true
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedDestinationOverride;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to set DestinationOverride to true for all teleporters.", ConsoleColor.Magenta);

                foreach (Item item in World.Items.Values)
                    if (item is Teleporter teleporter && !teleporter.Deleted)
                    {
                        patched++;
                        teleporter.DestinationOverride = true;
                    }


                EchoOut(String.Format("{0} DestinationOverride patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasWipedContainerCache(int patchid)
        {   // wipe the unusual container cache in anticipation of 'decoration' unexpectedly deleting these containers.
            int patched = 0;
            PatchIndex bits = PatchIndex.HasWipedContainerCache;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to wipe the unusual container cache.", ConsoleColor.Magenta);
                Mute();
                patched = UnusualContainerSpawner.WipeContainerCache();
                Unmute();

                EchoOut(String.Format("{0} unusual container cache cleared.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasRebuiltContainerCache(int patchid)
        {   // rebuild the unusual container cache
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRebuiltContainerCache;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to rebuild the unusual container cache.", ConsoleColor.Magenta);
                Mute();
                patched = UnusualContainerSpawner.RebuildContainerCache();
                Unmute();

                EchoOut(String.Format("{0} unusual container cache rebuild.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedInClasicRespawn(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedInClasicRespawn;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to respawn the world with classic UO spawn.", ConsoleColor.Magenta);
                EchoOut("This patch will take several minutes...", ConsoleColor.Yellow);

                var before = Before();
                Mute();
                SpawnerManager.ClassicRespawn();
                Unmute();
                var after = After();

                patched = Delta(before, after).Count;


                EchoOut(String.Format("{0} spawners updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedTilesV1(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedTilesV1;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to fix up map elements...", ConsoleColor.Magenta);

                // record Items before the patch
                List<Item> before = Before();

                // apply some patches.
                #region Buc's den (All shards)
                {   // Buc's den, missing floor tile
                    Static fix = new Static(0x53E);
                    fix.MoveToWorld(new Point3D(2647, 2195, -20), Map.Felucca); patched++;
                }
                #endregion Buc's den (All shards)
                #region new player starting area (All shards)
                {   // remove random marble slab from new player starting area
                    Item slab = World.FindItem(0x40052C36);
                    if (slab != null && slab.Deleted == false && slab.Location == new Point3D(5735, 975, 3) && slab.Map == Map.Trammel)
                    {
                        slab.Delete(); patched++;
                    }
                    else
                        EchoOut(
                            string.Format("Warning: Did not find slab where expected {0}. ", new Point3D(5735, 975, 3)),
                            ConsoleColor.Yellow);
                }
                #endregion new player starting area (All shards)
                #region brit sewer => new orc fort (Standard Shards only)
                if (StandardShards())
                {
                    EchoOut("\tTunnels from brit sewers to a new orc fort...", ConsoleColor.Magenta);
                    Map map = Map.Felucca;

                    // fix teleporter and sign to tunnel in brit sewer
                    {
                        // first for the teleporter at (6140, 1431, 4)
                        Item tele1 = FindOneItemAt(new Point3D(6140, 1431, 4), Map.Felucca, typeof(Teleporter));
                        if (tele1 is Teleporter teleporter1)
                        {   // adjust position
                            teleporter1.MoveToWorld(new Point3D(6140, 1430, 4), tele1.Map);
                            patched++;
                            // add a second teleporter
                            Item tele2 = Dupe(teleporter1);
                            if (tele2 is Teleporter teleporter2)
                            {
                                teleporter1.MoveToWorld(new Point3D(6141, 1430, 4), tele1.Map);
                                patched++;
                            }
                        }
                        else
                            ErrorOut(bits, string.Format("Logic Error: Did not find teleporter where expected {0}. ", new Point3D(6140, 1431, 4)), ConsoleColor.Red);

                        // now for the teleporter signage at (6142, 1430, 5)
                        Item sign1 = World.FindItem(0x40004AC3);
                        if (sign1 != null)
                        {
                            sign1.ItemID = 0x1F29;
                            sign1.Name = "Caution: Orcs!";
                            sign1.MoveToWorld(new Point3D(6143, 1431, 26), map);
                            patched++;
                            Item post1 = new Static(0x09);
                            post1.MoveToWorld(new Point3D(6142, 1430, 4), map);
                            patched++;
                        }
                        else
                            ErrorOut(bits, string.Format("Logic Error: Did not find sign where expected {0}. ", 0x40004AC3), ConsoleColor.Red);

                        // tunnel entrance from orc area at 2108 1228 0 Felucca
                        {
                            tele1 = FindOneItemAt(new Point3D(2108, 1228, 0), Map.Felucca, typeof(Teleporter));
                            if (tele1 is Teleporter teleporter)
                            {   // set the PointDest to just inside the cave
                                teleporter.PointDest = new Point3D(6126, 1411, 15);
                                patched++;
                                // okay, now for the cave exit teleporters to this orc camp
                                Item tele2 = FindOneItemAt(new Point3D(6125, 1411, 15), Map.Felucca, typeof(Teleporter));
                                Item tele3 = FindOneItemAt(new Point3D(6126, 1411, 15), Map.Felucca, typeof(Teleporter));
                                Item tele4 = FindOneItemAt(new Point3D(6127, 1411, 15), Map.Felucca, typeof(Teleporter));
                                if (tele2 is Teleporter teleporter2 && tele3 is Teleporter teleporter3 && tele4 is Teleporter teleporter4)
                                {
                                    teleporter2.PointDest = teleporter3.PointDest = teleporter4.PointDest = new Point3D(2108, 1228, 7); // (2108, 1228, 0)
                                    patched++;
                                }
                                else
                                    ErrorOut(bits,
                                        string.Format("Logic Error: Did not find teleporter where expected {0}. ", new Point3D(6125, 1411, 15)),
                                        ConsoleColor.Red);

                            }
                            else
                                ErrorOut(bits,
                                    string.Format("Logic Error: Did not find teleporter where expected {0}. ", new Point3D(2108, 1228, 0)),
                                    ConsoleColor.Red);
                        }

                        // Convert this rect (2101, 1226)+(4, 17) to static (from someone's old Township deco)
                        //  Looks good for an Orc Camp
                        {
                            MakeStatic(new Rectangle2D(2101, 1226, 4, 17), Map.Felucca);
                            patched++;
                        }

                        // add an orc fort
                        {
                            object o = Activator.CreateInstance(typeof(BludchokAddon));
                            (o as Item).MoveToWorld(new Point3D(2069, 1243, 0), Map.Felucca);
                            patched++;

                            // add some doors to the orc fort
                            //  just steal the door info from the other fort
                            Item door1 = World.FindItem(0x40016C8D);
                            Item door2 = World.FindItem(0x40016C25);
                            Item door3 = World.FindItem(0x400167F9);
                            Item door4 = World.FindItem(0x40015CC1);
                            Item door5 = World.FindItem(0x40013581);
                            Item door6 = World.FindItem(0x40013589);
                            Item door7 = World.FindItem(0x4001424A);
                            Item door8 = World.FindItem(0x40012578);
                            Item door9 = World.FindItem(0x400124EB);
                            if (door1 is BaseDoor baseDoor1 && door2 is BaseDoor baseDoor2 &&
                                door3 is BaseDoor baseDoor3 && door4 is BaseDoor baseDoor4 &&
                                door5 is BaseDoor baseDoor5 && door6 is BaseDoor baseDoor6 &&
                                door7 is BaseDoor baseDoor7 && door8 is BaseDoor baseDoor8 &&
                                door9 is BaseDoor baseDoor9)
                            {
                                Item newDoor1 = Dupe(door1);
                                Item newDoor2 = Dupe(door2);
                                Item newDoor3 = Dupe(door3);
                                Item newDoor4 = Dupe(door4);
                                Item newDoor5 = Dupe(door5);
                                Item newDoor6 = Dupe(door6);
                                Item newDoor7 = Dupe(door7);
                                Item newDoor8 = Dupe(door8);
                                Item newDoor9 = Dupe(door9);

                                newDoor1.MoveToWorld(new Point3D(2062, 1239, 0), map); patched++;
                                newDoor2.MoveToWorld(new Point3D(2062, 1238, 0), map); patched++;
                                newDoor3.MoveToWorld(new Point3D(2066, 1235, 5), map); patched++;
                                newDoor4.MoveToWorld(new Point3D(2068, 1231, 5), map); patched++;
                                newDoor5.MoveToWorld(new Point3D(2065, 1251, 5), map); patched++;
                                newDoor6.MoveToWorld(new Point3D(2065, 1250, 5), map); patched++;
                                newDoor7.MoveToWorld(new Point3D(2056, 1251, 5), map); patched++;
                                newDoor8.MoveToWorld(new Point3D(2077, 1234, 0), map); patched++;
                                newDoor9.MoveToWorld(new Point3D(2078, 1234, 0), map); patched++;
                            }
                        }

                        // add an orc camp outside fort
                        {
                            object o = Activator.CreateInstance(typeof(Spawner));
                            (o as Item).MoveToWorld(new Point3D(2094, 1234, 0), map);
                            Spawner spawner1 = o as Spawner;
                            spawner1.ObjectNamesRaw.Add("orccamp");
                            patched++;
                        }
                    }
                }
                #endregion brit sewer => new orc fort (Standard Shards only)
                #region Moongates (All shards)
                if (AllShards() && !LoginServer(quiet: true))
                {
                    EchoOut("\tFix floating moongate in Brit's Castle, and remove one from Oc'Nivelle...", ConsoleColor.Magenta);
                    // floating moongate in brit's castle
                    Point3D px = new Point3D(1322, 1622, 71);
                    Item item = FindOneItemAt(px, Map.Felucca, typeof(EventSungate));
                    if (item != null)
                        item.Location = new Point3D(1322, 1622, 55);
                    else
                        ErrorOut(bits,
                            string.Format("Logic Error: Found too many sungates at {0}. ", px),
                            ConsoleColor.Red);

                    // floating moongate in Oc'Nivelle arena
                    px = new Point3D(815, 1052, 21);
                    item = FindOneItemAt(px, Map.Felucca, typeof(EventSungate));
                    if (item != null)
                        // we'll delete is since there is already a teleporter at that location with sparkles
                        item.Delete();
                    else
                        ErrorOut(bits,
                            string.Format("Logic Error: Found too many sungates at {0}. ", px),
                            ConsoleColor.Red);
                }
                #endregion Moongates (All shards)
                #region Moongates (standard shards only)
                // exit from Solen tunnels 
                //  we didn't use these tunnels on AI, but we will on the standard shards
                if (StandardShards())
                {
                    EchoOut("\tRemove solen moongate and sign (\"tunnels not in use\")...", ConsoleColor.Magenta);

                    // wipe rect instead of trying to locate the three different components (5726, 1852)+(6, 3)
                    Rectangle2D rect = Rectangle2D.Parse("(5726, 1852)+(6, 3)");
                    if (Utility.CountItems(Map.Felucca, rect) == 3)
                        WipeRect(Map.Felucca, rect, flags: WipeRectFlags.Items);
                    else
                        ErrorOut(bits,
                                string.Format("Logic Error: Did not find solen items where expected at {0}. ", rect),
                                ConsoleColor.Red);
                }
                #endregion Moongates (Standard Shards only)
                #region Teleporters (All shards)
                if (AllShards() && !LoginServer(quiet: true))
                {
                    EchoOut("\tfix the teleporters that lead from Vesper Inn to/from brit (and chicken arena)...", ConsoleColor.Magenta);
                    // first, the gate that leads from the tunnel, to the next tunnel TO brit
                    {
                        Point3D px = new Point3D(5686, 385, 2);
                        Item item = FindOneItemAt(px, Map.Felucca, typeof(Teleporter));
                        if (item != null)
                        {   // runUO placed this one wrong (2 instead of 3). Probably a difference in maps
                            int lowZ = 0, avgZ = 0, topZ = 0;
                            Map.Felucca.GetAverageZ(px.X, px.Y, ref lowZ, ref avgZ, ref topZ);
                            item.Z = avgZ;
                            patched++;
                            // fix up the destination, should be just the other side of the cave
                            (item as Teleporter).PointDest = new Point3D(2776, 894, -23);
                        }
                        else
                            ErrorOut(bits,
                                string.Format("Logic Error: Did not find teleporter where expected {0}. ", px),
                                ConsoleColor.Red);
                    }

                    // Next, RunUO placed two additional teleporters here. Again, probably for map comparability.
                    {
                        Point3D px = new Point3D(5686, 386, 2);
                        Item item = FindOneItemAt(px, Map.Felucca, typeof(Teleporter));
                        if (item != null)
                        {
                            item.Delete();
                            patched++;
                        }
                        else
                            ErrorOut(bits,
                                string.Format("Logic Error: Did not find teleporter where expected {0}. ", px),
                                ConsoleColor.Red);


                        // And this one.
                        px = new Point3D(5686, 387, 2);
                        item = FindOneItemAt(px, Map.Felucca, typeof(Teleporter));
                        if (item != null)
                        {
                            item.Delete();
                            patched++;
                        }
                        else
                            ErrorOut(bits,
                                string.Format("Logic Error: Did not find teleporter where expected {0}. ", px),
                                ConsoleColor.Red);
                    }

                    // Now.. on the other side of this cave entrance/exit is a single teleporter, we will add another
                    //  to cover the entrance/exit
                    {
                        Point3D px = new Point3D(2776, 895, -23);
                        Item item = FindOneItemAt(px, Map.Felucca, typeof(Teleporter));
                        if (item != null)
                        {   // activate this teleporter
                            Teleporter teleporter1 = item as Teleporter;
                            teleporter1.PointDest = new Point3D(5686, 385, 3);
                            teleporter1.Running = true;
                            // let's add a second teleporter
                            Teleporter teleporter2 = new Teleporter();
                            CopyProperties(teleporter2, teleporter1);
                            teleporter2.Location = new Point3D(2776, 894, -23);
                            patched++;
                        }
                        else
                            ErrorOut(bits,
                                string.Format("Logic Error: Did not find teleporter where expected {0}. ", px),
                                ConsoleColor.Red);
                    }

                    EchoOut("\treplace the 'alchemical symbol' with a 'hole' on the lighthouse roof (escape).", ConsoleColor.Magenta);
                    {
                        Point3D px = new Point3D(5672, 2406, 79);
                        Item item = FindOneItemAt(px, Map.Felucca, 0x1822);
                        if (item != null)
                        {
                            // 'alchemical symbol' (0x1822) to 'hole' (0x11C5)
                            item.ItemID = 0x11C5;
                            patched++;
                        }
                        else
                            ErrorOut(bits,
                                    string.Format("Logic Error: Did not find 'alchemical symbol' at {0}. ", px), ConsoleColor.Red);
                    }
                    #region EventTeleporters (All shards)
                    // patch staff made sparkles into the spawner
                    if (AllShards())
                    {
                        EchoOut("\tpatch staff made sparkles into the spawner...", ConsoleColor.Magenta);
                        foreach (Item item in World.Items.Values)
                        {
                            if (item != null && item is EventTeleporter etp && !etp.Deleted)
                            {
                                // copy the sparkles if they exist (some items have more than one)
                                //  we will prefer the special sparkle '0x375A'
                                List<Item> list = FindItemAt(etp.Location, etp.Map, 0x375A);
                                list.AddRange(FindItemAt(etp.Location, etp.Map, 0x373A));
                                if (list.Count > 0)
                                {   // there be sparkles here
                                    for (int ix = 0; ix < list.Count; ix++)
                                    {
                                        if (ix == 0)
                                        {   // just get the first sparkle, delete the rest
                                            etp.SparkleItem = list[0];
                                            etp.SparkleItem.MoveToWorld(etp.Location, etp.Map);
                                            etp.SparkleItem.Visible = etp.Running;
                                            etp.SparkleHue = list[0].Hue;
                                            patched++;
                                        }
                                        else
                                        {
                                            list[ix].Delete();
                                            patched++;
                                        }
                                    }
                                }
                                else
                                {   // No sparkles here, lets add some
                                    // lets add a sparkle if it's not over a "crumbling floor"
                                    // Note: this "crumbling floor" started out at Z=-1, later it will
                                    //  be moved to Z=0
                                    Item tmp = FindOneItemAt(etp.Location, etp.Map, 0x11C5, lenientZ: 3);
                                    if (tmp == null)
                                    {
                                        etp.SparkleItem = new Item(0x373A);
                                        etp.SparkleItem.MoveToWorld(etp.Location, etp.Map);
                                        etp.SparkleItem.Visible = etp.Running;
                                    }
                                }
                            }
                        }
                    }
                    #endregion EventTeleporters (All shards)
                }
                #endregion Teleporters
                #region Chicken arena (Multi shard)
                if (AllShards() && !LoginServer(quiet: true))
                {
                    EchoOut("\twipe the area in the tunnel of all staff added deco (chicken arena tunnel)...", ConsoleColor.Magenta);
                    // wipe the area in the tunnel of all staff added deco.
                    //  for AllShards, this has already happened, but no need to special case that here
                    {
                        Rectangle2D rect = Rectangle2D.Parse("(5657, 421)+(12, 10)");
                        WipeRect(Map.Felucca, rect, flags: WipeRectFlags.Items);
                    }

                    // patch the tele from Vesper inn into the tunnel
                    {
                        Point3D px = new Point3D(2782, 981, 2);
                        Item item = FindOneItemAt(px, Map.Felucca, typeof(EventTeleporter));
                        if (item != null)
                        {
                            (item as EventTeleporter).PointDest = new Point3D(5659, 424, -3);
                            patched++;
                        }
                        else
                        {
                            ErrorOut(bits,
                                string.Format("Logic Error: Did not find teleporter where expected. "), ConsoleColor.Red);
                            return 0;
                        }

                        // patch the tele and hole's Z from Vesper inn to the tunnel
                        // first the tele
                        int lowZ = 0, avgZ = 0, topZ = 0;
                        Map.Felucca.GetAverageZ(px.X, px.Y, ref lowZ, ref avgZ, ref topZ);
                        item.Z = avgZ;

                        // now for the hole (0x11C5)
                        px.Z = -1;
                        Item hole = FindOneItemAt(px, Map.Felucca, 0x11C5);
                        if (hole != null)
                        {
                            hole.Z = avgZ;
                            patched++;
                        }
                        else
                            ErrorOut(bits,
                                string.Format("Logic Error: Did not find 'hole' where expected. "), ConsoleColor.Red);
                    }

                    // add the tele back to Vesper Inn from the tunnel
                    {
                        Mute();
                        EventTeleporter etp = new();
                        etp.Map = Map.Felucca;
                        etp.Location = new Point3D(5658, 423, 8);
                        etp.PointDest = new Point3D(2782, 981, 0);
                        etp.MapDest = Map.Felucca;
                        Unmute();
                        patched++;
                    }

                    // add the 'hole' that drops you to the arena
                    {
                        Static hole = new Static(0x11C5);
                        hole.MoveToWorld(new Point3D(5660, 422, -2), Map.Felucca);
                        patched++;
                        // and now the teleporter
                        Mute();
                        EventTeleporter etp = new();
                        etp.Map = Map.Felucca;
                        etp.Location = new Point3D(5660, 422, -2);
                        etp.PointDest = new Point3D(1674, 966, 78);
                        etp.MapDest = Map.Ilshenar;
                        Unmute();
                        patched++;
                    }
                    // update the sign info
                    {
                        Item sign = World.FindItem(0x4000A5B2);
                        if (sign != null)
                        {
                            sign.Name = "There is no Chicken Arena down the hole. *winks*";
                            patched++;
                        }
                        else
                            ErrorOut(bits,
                                string.Format("Logic Error: Did not find sign where expected {0}. ", new Point3D(2782, 978, 0)),
                                ConsoleColor.Red);
                    }
                }
                #endregion Chicken arena (Multi shard)
                #region funky 'room' in Wrong with a teleporter to Shame
                if (StandardShards())
                {   // (5686, 573)+(11, 15)
                    EchoOut("\twipe funky 'room' in Wrong with a teleporter to Shame...", ConsoleColor.Magenta);
                    //  We could get away with a simple wipe, but just in case RunUO has/will put something there.
                    Utility.RefreshDeco(Map.Felucca, new List<Rectangle2D>() { new Rectangle2D(5686, 573, 11, 15) },
                        startingZ: 0, lenientZ: int.MinValue);
                }
                #endregion funky 'room' in Wrong with a teleporter to Shame
                #region replace missing dungeon wall in Deceit
                if (StandardShards())
                {   // (5259, 671, 0)
                    EchoOut("\tReplace missing dungeon wall in Deceit...", ConsoleColor.Magenta);
                    Static wall = new Static(0x243); // dungeon wall
                    wall.MoveToWorld(new Point3D(5259, 671, 0), Map.Felucca);
                }
                #endregion replace missing dungeon wall in Deceit
                #region Platform cleanup in Wrong
                if (StandardShards())
                {   // (5643, 575)+(5, 4)
                    EchoOut("\tPlatform cleanup in Wrong...", ConsoleColor.Magenta);
                    //  We could get away with a simple wipe, but just in case RunUO has/will put something there.
                    Utility.RefreshDeco(Map.Felucca, new List<Rectangle2D>() { new Rectangle2D(5643, 575, 5, 4) },
                        startingZ: Utility.GetAverageZ(Map.Felucca, 5643, 575), lenientZ: int.MinValue);
                }
                #endregion Platform cleanup in Wrong
                #region Wind memories
                // there appears to be a but in either RunUO, or the client
                // if you add this static, it changes 'direction' on the next server restart.
                // I can reproduce this in RunUO 2.6
#if false
                if (StandardShards())
                {   // (5193, 234, 25)
                    EchoOut("\tAdd a permanent ogre corpse in Wind like was on Napa...", ConsoleColor.Magenta);
                    Static ogre = new Static(0x2006);
                    ogre.MoveToWorld(new Point3D(5193, 234, 25), Map.Felucca);
                    ogre.Direction = Direction.Down;

                }
#endif
                #endregion Wind memories
                List<Item> after = After();
                patched = Delta(before, after).Count;

                EchoOut(String.Format("{0} map tiles updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static List<Item> Delta(List<Item> before, List<Item> after)
        {
            //List<Item> list1 = after.Except(before).ToList();
            //List<Item> list2 = before.Except(after).ToList();
            return before.Except(after).ToList();
        }
        private static List<Item> CountItems(Map map = null)
        {
            List<Item> results = new();
            foreach (Item item in World.Items.Values)
                if (item != null && item.Deleted == false && (map != null) ? (item.Map == map) : true)
                    results.Add(item);

            return results;
        }
        private static List<Item> Before(Map map = null)
        { return CountItems(map); }
        private static List<Item> After(Map map = null)
        { return CountItems(map); }
        private static int HasRemovedOcCastle(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRemovedOcCastle;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove castle behind Oc'Nivelle...", ConsoleColor.Magenta);
                if (World.FindItem(0x4004A942) is CustomRegionControl crc)
                {
                    List<Rectangle3D> list = new(crc.CustomRegion.Coords);
                    crc.Registered = false;
                    Rectangle2D area = new Rectangle2D();
                    foreach (Rectangle3D r3d in list)
                    {
                        area.MakeHold(new Point2D(r3d.Start.X, r3d.Start.Y));
                        area.MakeHold(new Point2D(r3d.End.X, r3d.End.Y));
                    }
                    int landZ = 0, landAvg = 0, landTop = 0;
                    crc.Map.GetAverageZ(crc.X, crc.Y, ref landZ, ref landAvg, ref landTop);
                    BaseHouse bh = BaseHouse.FindHouseAt(crc);
                    if (bh != null)
                    {
                        int lenientZ = bh.Components.Height;
                        List<Rectangle2D> bigrect = new() { area };
                        Type[] exclude = new Type[] { typeof(Spawner) };
                        RefreshDeco(crc.Map, bigrect, startingZ: landAvg,
                            typeExclude: exclude, lenientZ: int.MinValue/*lenientZ*/);
                    }


                    EchoOut(String.Format("Castle behind Oc'Nivelle removed. {0} items updated", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                {
                    ErrorOut(bits, "Did not find castle at expected location.", ConsoleColor.Red);
                }
            }

            return patched;
        }
        private static int HasFixedDoors_1133_2237_40(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasFixedDoors_1133_2237_40;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to fix broken doors at 1133 2237 40...", ConsoleColor.Magenta);
                Item door1 = World.FindItem(0x40010E34);
                Item door2 = World.FindItem(0x40010E3D);
                Item door3 = World.FindItem(0x40010E33);
                Item door4 = World.FindItem(0x40010E3C);
                if (door1 != null && door2 != null && door3 != null && door4 != null)
                {
                    door1.X++; patched++;
                    door2.X++; patched++;
                    door3.X++; patched++;
                    door4.X++; patched++;

                    EchoOut(String.Format("Doors fixed. {0} items updated", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                {
                    ErrorOut(bits, "Did not find door(s) at expected location.", ConsoleColor.Red);
                }
            }

            return patched;
        }
        private static int HasRestoredPremierGems(int patchid)
        {  // wipe stable, restore Premier Gems (Standard Shards)
           // WBB Jewler
           //  Premier Gems,
           // (1448, 1676)+(11, 23)
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRestoredPremierGems;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to restore Premier Gems to Britain...", ConsoleColor.Magenta);

                // our rect around the stable
                Rectangle2D rect = new Rectangle2D(1448, 1676, 13, 23);
                List<Rectangle2D> rects = new List<Rectangle2D>() { rect };

                // mini deco
                // we will wipe everything except spawners (they weren't put there by RunUO)
                patched = RefreshDeco(Map.Felucca, rects, startingZ: 0,
                    typeExclude: new Type[] { typeof(Spawner) }, lenientZ: int.MinValue/*lenientZ: 5*/);

                // now add the sign
                SignParser.Parse(World.GetSystemAcct(), rects, new Map[] { Map.Felucca });

                // now the doors
                DoorGenerator.Generate(rects, new Map[] { Map.Felucca });


                EchoOut(String.Format("Premier Gems restored to Britain. {0} items updated", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasDeletedForgeBehindWBB(int patchid)
        {  // wipe the forge and deco behind WBB
            int patched = 0;
            PatchIndex bits = PatchIndex.HasDeletedForgeBehindWBB;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove the forge and deco behind West Britain Bank...", ConsoleColor.Magenta);
                // serial of the anvil 0x4020EE97
                Item anvil = World.FindItem(0x4020EE97);
                if (anvil != null)
                {
                    List<Rectangle2D> rects = new List<Rectangle2D>() { new Rectangle2D(anvil.X, anvil.Y, 2, 3) };
                    patched = RefreshDeco(anvil.Map, rects, startingZ: anvil.Z,
                        typeExclude: new Type[] { typeof(Spawner) }, lenientZ: int.MinValue/*0*/);


                    EchoOut(String.Format("Removal of the forge and deco behind West Britain ({0} items updated) Bank complete.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                {
                    ErrorOut(bits, "Did not find anvil at expected location.", ConsoleColor.Red);
                }
            }

            return patched;
        }
        #region HasInitializedNewShard
        private static int HasInitializedNewShard(int patchid)
        {  // wipe all accounts, configure Allowed IP Addresses, characters per acct, Zora, Coops, etc.
            int patched = 0;
            PatchIndex bits = PatchIndex.HasInitializedNewShard;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to initialize a new shard...", ConsoleColor.Magenta);
                Mute();
                // ====================
#if false
                // first rehydrate world
                RehydrateWorld.RehydrateWorld_OnCommand(new CommandEventArgs());
#endif
                int count = 0;

                // delete accounts 
                count = OwnerTools.DeleteAccounts(new CommandEventArgs());
                EchoOut(String.Format("{0} Accounts deleted.", count), ConsoleColor.Magenta);
                patched += count;

                // delete contents of all containers
                count = OwnerTools.EmptyContainers(new CommandEventArgs());
                EchoOut(String.Format("{0} Items deleted.", count), ConsoleColor.Magenta);
                patched += count;

                // ====================
                // configure item management for standard shards
                {
                    ItemManagementConsole imc = new ItemManagementConsole();
                    imc.Cooperatives = true; imc.Cooperatives = false; patched++;
                    imc.MagicCraftSystem = true; imc.MagicCraftSystem = false; patched++;
                    imc.MagicGearDropChance = 50; patched++;
                    imc.MagicGearDropDowngrade = 0; patched++;
                    imc.MagicGearThrottleEnabled = false; patched++;
                    imc.SlayerInstrumentDropRate = 0.05; patched++;
                    imc.SlayerWeaponDropRate = 0.05; patched++;
                    imc.ZoraSystem = true; imc.ZoraSystem = false; patched++;
                    imc.Delete();
                }

                // Bulk Orders
                {
                    if (Core.RuleSets.BulkOrderSystemRules())
                    {   // turn on
                        BulkOrderSystem.EnabledFlags = BulkOrderFlags.Smith; // tailor hasn't been tested (?)
                        CoreAI.SetDynamicFeature(CoreAI.FeatureBits.BulkOrdersEnabled);
                    }
                    else
                    {   // turn off
                        BulkOrderSystem.EnabledFlags = BulkOrderFlags.None;
                        CoreAI.ClearDynamicFeature(CoreAI.FeatureBits.BulkOrdersEnabled);
                    }
                }

                // skill Gain
                {
                    if (SiegeStyleShards(quiet: true))
                    {
                        // Skill on Siege will be Return Over Time (ROT)
                        SkillGainSystem.GainWaits = true; patched++;
                    }
                    else
                    {
                        // other shards skills are difficulty based.
                        SkillGainSystem.GainWaits = false; patched++;
                    }
                }

                // configure the server for all shards
                {
                    CoreManagementConsole cmc = new CoreManagementConsole();
                    if (Siege(quiet: true))
                    { CoreAI.MaxAccountsPerIP = 1; patched++; }
                    else
                    { CoreAI.MaxAccountsPerIP = 3; patched++; }
                    CoreAI.MaxConcurrentAddresses = 1; patched++;
                    cmc.NewPlayerGuild = true; patched++;
                    // For Mortalis, we may want to have the exit from the NPSZ randomized.
                    cmc.NewPlayerStartingArea = true; patched++;
                    cmc.Delete();
                }

                // remove all guilds
                {
                    List<Guild> glist = new();
                    foreach (Guild g in BaseGuild.List.Values)
                        glist.Add(g);

                    foreach (Guild g in glist)
                    {
                        patched++;
                        g.Disband();
                    }
                    foreach (Item item in World.Items.Values)
                    {
                        if (item is Guildstone guildstone && !guildstone.Deleted)
                        {
                            patched++;
                            guildstone.Delete();
                        }
                    }
                }

                // Reprice all the static houses by simply lifting the item and placing it back in the vendor's backpack.
                // (The vendor already 1. has auto pricing of deeds, and 2. already takes into account Siege Pricing Rules.
                {
                    foreach (Mobile playerVendor in World.Mobiles.Values)
                    {
                        if (playerVendor is PlayerVendor && playerVendor.Backpack != null)
                        {
                            if (playerVendor.IsStaffOwned && playerVendor.Backpack.Items != null)
                            {
                                List<Item> list = new();
                                List<Item> itemList = new(playerVendor.Backpack.Items);
                                foreach (Item item in itemList)
                                {
                                    if (item is HouseDeed hd)
                                    {
                                        list.Add(hd);
                                        playerVendor.Backpack.RemoveItem(hd);
                                    }
                                }
                                foreach (Item item in list)
                                {
                                    playerVendor.Backpack.AddItem(item);
                                    patched++;
                                }
                            }
                        }
                    }
                }

                // Initialize the ResourcePool
                {
                    string saves = Path.Combine(Core.BaseDirectory, "Saves");
                    string resourcePool = Path.Combine(Core.BaseDirectory, "Saves", "ResourcePool");
                    string transactionHistories = Path.Combine(Core.BaseDirectory, "Saves", "TransactionHistories");
                    if (Directory.Exists(resourcePool))
                    {
                        DirectoryInfo di = new DirectoryInfo(resourcePool);
                        RecursiveDelete(di);
                    }
                    if (!Directory.Exists(resourcePool))
                        Directory.CreateDirectory(resourcePool);
                    if (!Directory.Exists(transactionHistories))
                        Directory.CreateDirectory(transactionHistories);
                    if (ResourcePool.Consignments != null)
                    {
                        int rpc = ResourcePool.Consignments.Count;
                        EchoOut(String.Format("{0} resource pool consignments detected.", rpc), ConsoleColor.Magenta);
                        ResourcePool.Consignments.Clear();
                        EchoOut(String.Format("{0} resource pool consignments deleted.", rpc), ConsoleColor.Magenta);
                    }
                    else
                        EchoOut(String.Format("No resource pool consignments to deleted."), ConsoleColor.Magenta);
                }

                // Done
                Unmute();

                EchoOut(String.Format("{0} shard initialization steps complete.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            else if (!Patched(bits) && AngelIsland())
            {   // nothing to do here - AI was set up long ago
                LogPatch(bits);
                EchoOut(String.Format("{0} shard initialization steps complete.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        public static void RecursiveDelete(DirectoryInfo baseDir)
        {
            if (!baseDir.Exists)
                return;

            foreach (var dir in baseDir.EnumerateDirectories())
            {
                RecursiveDelete(dir);
            }
            baseDir.Delete(true);
        }
        private static void Mute()
        {
            m_muted = true;
            Console.SetOut(StreamWriter.Null);
        }
        private static void Unmute()
        {
            m_muted = false;
            var standardOutput = new StreamWriter(Console.OpenStandardOutput());
            standardOutput.AutoFlush = true;
            Console.SetOut(standardOutput);
        }
        #endregion HasInitializedNewShard
        private static int HasPatchedVampChampTeleporters(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedVampChampTeleporters;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to fix vampire champ teleporters...", ConsoleColor.Magenta);
                // patch vampire teleporters by setting them to Z 1
                // They were at Z 0, and OnMoveOver fails if the teleporter Z < than the mobiles Z
                // 0x401C2190
                // 0x401C23DC
                ////
                if (World.FindItem(0x401C2190) is Teleporter t1 && World.FindItem(0x401C23DC) is Teleporter t2)
                {
                    t1.Z = t2.Z = 1;
                    patched += 2;

                    EchoOut(String.Format("{0} vampire champ teleporters fixed.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                {
                    ErrorOut(bits, String.Format("Error: unable to locate one or more of the vampire champ teleporters.", patched), ConsoleColor.Red);
                }
            }

            return patched;
        }
        private static int HasPatchedGreenAcresTeleporters(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedGreenAcresTeleporters;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to fix Green Acres teleporters...", ConsoleColor.Magenta);

                Teleporter tp1 = Patcher.FindItem(typeof(Teleporter), Map.Felucca, new Point3D(5440, 1153, 0)) as Teleporter;
                Teleporter tp2 = Patcher.FindItem(typeof(Teleporter), Map.Felucca, new Point3D(5440, 1151, 0)) as Teleporter;
                Moongate mg1 = Patcher.FindItem(typeof(Moongate), Map.Felucca, new Point3D(5440, 1149, 0)) as Moongate;
                Teleporter tp3 = Patcher.FindItem(typeof(Teleporter), Map.Felucca, new Point3D(5440, 1147, 0)) as Teleporter;

                if (tp1 != null && tp2 != null && mg1 != null && tp3 != null)
                {
                    tp1.Location = new Point3D(5437, 1150, 0);
                    tp2.Location = new Point3D(5437, 1148, 0);
                    tp3.Location = new Point3D(5437, 1144, 0);

                    Teleporter tp4 = new Teleporter(mg1.PointDest, mg1.MapDest);
                    tp4.MoveToWorld(new Point3D(5437, 1146, 0), Map.Felucca);
                    mg1.Delete();

                    List<Point3D> points = new() { new Point3D(5436, 1150, 0), new Point3D(5436, 1148, 0), new Point3D(5436, 1146, 0), new Point3D(5436, 1144, 0) };
                    List<string> texts = new() { "West Britain Bank", "Last Man Standing", "New Player Starting Area", "Capture The Flag" };
                    for (int ix = 0; ix < 4; ix++)
                    {
                        Item post = new Static(0xA9); patched++;
                        post.Movable = false; patched++;
                        post.Map = Map.Felucca; patched++;
                        post.Location = points[ix]; patched++;

                        Item placard = new Static(0x1F28); patched++;
                        placard.Movable = false; patched++;
                        placard.Map = Map.Felucca; patched++;
                        placard.Location = points[ix]; patched++;
                        placard.Location = new Point3D(points[ix].X, points[ix].Y, points[ix].Z + 12); patched++;
                        placard.Name = texts[ix]; patched++;
                    }

                    // clean up old sign and sparkles at and near old tp1 location
                    Point3D garbage = new Point3D(5440, 1153, 0);
                    List<Item> garbagecan = new();
                    IPooledEnumerable eable = Map.Felucca.GetItemsInRange(garbage, 1);
                    foreach (Item item in eable)
                        if (item.ItemID == 0x375A)          // sparkles
                        {
                            garbagecan.Add(item); patched++;
                        }
                        else if (item.ItemID == 0xA9)       // post
                        {
                            garbagecan.Add(item); patched++;
                        }
                        else if (item.ItemID == 0x1F28)     // placard
                        {
                            garbagecan.Add(item); patched++;
                        }
                    eable.Free();

                    foreach (Item item in garbagecan)
                        item.Delete();


                    EchoOut(String.Format("{0} Green Acres teleporter elements fixed.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                {
                    if (Core.UOTC_CFG)
                    {
                        EchoOut(String.Format("{0} Green Acres teleporter elements fixed. Nothing to do.", patched), ConsoleColor.Magenta);
                        PatchComplete(bits, patchid);
                    }
                    else
                        ErrorOut(bits, String.Format("One or more teleporters missing from expected locations."), ConsoleColor.Red);
                }
            }

            return patched;
        }
        private static int HasPatchedConPvPTeleporters(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedConPvPTeleporters;
            // test center doesn't have these teleporters
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch to fix ConPvP teleporters...", ConsoleColor.Magenta);
                if (!Core.UOTC_CFG)
                {
                    #region comments
                    /* Destination locations: (367, 904, 0), (365, 906, 0), (367, 908, 0), (371, 905, 0)
                     * These four spawners get one of the above destinations: 0x40059DF7, 0x40044B1A, 0x40041922, 0x4004190A

                     *  - Vesper Bank -
                     * sign at ((2875, 673, 17)) placard: 7977 (0x1F29), Name Dueling Arena (movable = false)
                     * post at {(2874, 672, -3)} post 9 (0x09) (movable = false)

                     * large crate (0x4000FC7A), move X+1, Y-2
                     * large crate (0x4000FC78) move to (2872, 676, 2)
                     * large create 0x4000FC75, move to (2875, 672, 3)
                     * 
                     * tele 0x40059DF7, move to (2874, 674, 0)
                     * tele 0x40044B1A, move to (2875, 674, 0)
                    */
                    #endregion comments
                    Teleporter tp1 = Patcher.FindItem(typeof(Teleporter), Map.Felucca, new Point3D(2874, 673, 0)) as Teleporter;
                    Teleporter tp2 = Patcher.FindItem(typeof(Teleporter), Map.Felucca, new Point3D(2875, 673, 0)) as Teleporter;
                    Teleporter tp3 = Patcher.FindItem(typeof(Teleporter), Map.Felucca, new Point3D(1173, 3625, 6)) as Teleporter;
                    Teleporter tp4 = Patcher.FindItem(typeof(Teleporter), Map.Felucca, new Point3D(1172, 3625, 5)) as Teleporter;

                    if (tp1 != null && tp2 != null && tp3 != null && tp4 != null)
                    {   // got our Teleporters
                        tp1.PointDest = new Point3D(367, 904, 0); patched++;
                        tp2.PointDest = new Point3D(365, 906, 0); patched++;
                        tp3.PointDest = new Point3D(367, 908, 0); patched++;
                        tp4.PointDest = new Point3D(371, 905, 0); patched++;

                        Item placard = new Static(0x1F29); patched++;
                        Item post = new Static(0x09); patched++;
                        placard.Movable = false; patched++;
                        placard.Location = new Point3D(2875, 673, 17); patched++;
                        placard.Name = "Dueling Arena"; patched++;
                        placard.Map = Map.Felucca; patched++;
                        post.Movable = false; patched++;
                        post.Location = new Point3D(2874, 672, -3); patched++;
                        post.Map = Map.Felucca; patched++;

                        if (World.FindItem(0x4000FC7A) is LargeCrate lc1 && World.FindItem(0x4000FC78) is LargeCrate lc2 && World.FindItem(0x4000FC75) is LargeCrate lc3)
                        {
                            lc1.Location = new Point3D(lc1.X + 1, lc1.Y - 2, lc1.Z); patched++;
                            lc2.Location = new Point3D(2872, 676, 2); patched++;
                            lc3.Location = new Point3D(2875, 672, 3); patched++;
                        }


                        EchoOut(String.Format("{0} ConPvP teleporter elements fixed.", patched), ConsoleColor.Magenta);
                        PatchComplete(bits, patchid);
                    }
                    else
                    {
                        ErrorOut(bits, String.Format("One or more teleporters missing from expected locations."), ConsoleColor.Red);
                    }
                }
                else
                {
                    EchoOut(String.Format("{0} ConPvP teleporter elements fixed. Nothing to do.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
            }

            return patched;
        }
        public static Item FindItem(Type t, Map map, Point3D p)
        {
            Item found = null;

            IPooledEnumerable eable = map.GetItemsInRange(p, 0);
            foreach (Item item in eable)
                if (item.GetType().IsAssignableFrom(t))
                {
                    found = item;
                    break;
                }

            eable.Free();

            return found;
        }
        private static int HasPatchedAIFeluccaTeleporters(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedAIFeluccaTeleporters;
            if (!Patched(bits) && AngelIsland())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove some Angel Island Felucca teleporters...", ConsoleColor.Magenta);

                // get a list of legal items
                string pathName = Path.Combine(Core.DataDirectory, "Patches", "ExcludeTeleporterAI.cfg");
                if (File.Exists(pathName))
                {

                    List<Tuple<int, int, int, int, Map>> records = new();
                    foreach (string line in File.ReadAllLines(pathName))
                    {
                        string[] toks = line.Split(' ');
                        records.Add(new Tuple<int, int, int, int, Map>(int.Parse(toks[0]), int.Parse(toks[1]), int.Parse(toks[2]), int.Parse(toks[3]), Map.Parse(toks[4])));
                    }

                    // sanity
                    int count = 0;
                    foreach (var record in records)
                    {   // we will pack out bad items in Patcher.HasValidatedTeleporterPatchLists()
                        //  we probably captured an EffectItem or corpse(and items) or something
                        Item item = World.FindItem(record.Item1);
                        if (item == null || item.Deleted)
                            count++;
                        else if (item is Teleporter && item.Location == new Point3D(record.Item2, record.Item3, record.Item4))
                        {
                            item.Delete();
                            patched++;
                        }
                    }


                    EchoOut(String.Format("{0} Angel Island Felucca teleporters removed.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, String.Format("Error: unable to locate {0}.", pathName), ConsoleColor.Red);
            }

            return patched;
        }
        private static int HasValidatedTeleporterPatchLists(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasValidatedTeleporterPatchLists;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to validated teleporter patchLists...", ConsoleColor.Magenta);

                List<Tuple<int, int, int, int, Map>> records = new List<Tuple<int, int, int, int, Map>>();
                string folder = Path.Combine(Core.DataDirectory, "Patches");

                if (!Directory.Exists(folder))
                {
                    ErrorOut(bits, String.Format("Error: unable to locate {0}.", folder), ConsoleColor.Red);
                    return 0;
                }

                string[] files = Directory.GetFiles(folder, "*.cfg");
                for (int j = 0; j < files.Length; ++j)
                {
                    int oldPatched = patched;
                    foreach (string line in File.ReadAllLines(files[j]))
                    {
                        Serial serial;
                        string[] toks = line.Split(' ');
                        if (toks.Length != 5) continue; // different .cfg format
                        // normalize hex => decimal
                        if (toks[0].StartsWith("0X", StringComparison.OrdinalIgnoreCase))
                        {
                            serial = int.Parse(toks[0].Substring(2), NumberStyles.HexNumber);
                            patched++;              // had to convert
                        }
                        else
                            serial = int.Parse(toks[0]);
                        //------------------------------------- Serial Number ------------ X ---------------- Y ----------------- Z ----------------- Map --
                        Tuple<int, int, int, int, Map> record = new(serial, int.Parse(toks[1]), int.Parse(toks[2]), int.Parse(toks[3]), Map.Parse(toks[4]));
                        serial = record.Item1;
                        Item item = World.FindItem(serial);
                        if (item != null && item.Deleted == false && item.Map != null && item.Map != Map.Internal)
                            records.Add(record);    // used for writing
                        else
                            patched++;              // can't find teleporter
                    }

                    // rewrite the list if changed.
                    if (oldPatched != patched)
                        using (StreamWriter file = new(files[j]))
                        {
                            foreach (var toWrite in records)
                            {
                                string s = String.Format("{0} {1} {2} {3} {4}", toWrite.Item1, toWrite.Item2, toWrite.Item3, toWrite.Item4, toWrite.Item5);
                                file.WriteLine(s);
                            }
                        }
                    records.Clear();
                }


                EchoOut(String.Format("{0} teleporter patchLists checked, {1} modifications.", files.Length, patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        #region HasPatchedFeluccaTeleporters
        private static int HasPatchedFeluccaTeleporters(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedFeluccaTeleporters;
            if (!Patched(bits) && StandardShards())
            {
                EchoOut("One-time patch to remove some Felucca teleporters and surrounding deco.", ConsoleColor.Magenta);
                EchoOut("This patch will run about 5 minutes...", ConsoleColor.Yellow);
                Mute();
                List<Item> before = Before(Map.Felucca);

                HasPatchedFeluccaTeleportersWorker();

                List<Item> after = After(Map.Felucca);

                // what's the delta?
                patched = Delta(before, after).Count;
                Unmute();
                EchoOut(String.Format("{0} Felucca teleporters removed or updated.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static void HasPatchedFeluccaTeleportersWorker()
        {
            Map map = null;
            string toDeleteFile = "Angel Island teleporters.cfg";
            string toDeletepathName = Path.Combine(Core.DataDirectory, "Patches", toDeleteFile);
            List<Item> toDeleteList = new();
            foreach (string line in File.ReadAllLines(toDeletepathName))
            {
                string[] toks = line.Split(' ');
                //-------------------------------------------------------------- Serial Number ------------------------------------------------- X ---------------- Y ----------------- Z ----------------- Map -----------
                Tuple<int, int, int, int, Map> record = new(int.Parse(toks[0]), int.Parse(toks[1]), int.Parse(toks[2]), int.Parse(toks[3]), Map.Parse(toks[4]));
                Serial serial = record.Item1;
                Item item = World.FindItem(serial);
                if (item != null && item.Deleted == false && item.Map != null && item.Map != Map.Internal)
                    toDeleteList.Add(item);
                else
                    ;
            }

            // next, read the list of items which we wish to preserve for standard shards
            // PreserveTeleporterIS.cfg
            string preserveFile = "PreserveTeleporterIS.cfg";
            string preservepathName = Path.Combine(Core.DataDirectory, "Patches", preserveFile);
            List<Item> preserveLlist = new();
            if (File.Exists(preservepathName))
            {
                foreach (String line in File.ReadAllLines(preservepathName))
                {
                    string[] toks = line.Split(' ');
                    Serial serial = int.Parse(toks[0]);
                    Item item = World.FindItem(serial);
                    if (item != null && item.Deleted == false && item.Map != null && item.Map != Map.Internal)
                        preserveLlist.Add(item);
                    else
                        ;
                }
            }

            // next, read the list of event teles which we wish to preserve for standard shards
            // EventTeleporters.cfg
            string eventFile = "EventTeleporters.cfg";
            string eventpathName = Path.Combine(Core.DataDirectory, "Patches", eventFile);
            if (File.Exists(eventpathName))
            {
                foreach (String line in File.ReadAllLines(eventpathName))
                {
                    string[] toks = line.Split(' ');
                    Serial serial = int.Parse(toks[0]);
                    Item item = World.FindItem(serial);
                    if (item != null && item.Deleted == false && item.Map != null && item.Map != Map.Internal)
                        preserveLlist.Add(item);
                    else
                        ;
                }
            }

            // what's the delta?
            var delta = toDeleteList.Except(preserveLlist).ToList();

            // only unique values
            delta = delta.Distinct().ToList();

            // delta list now contains the things we want to deleted from our standard shard
            LogHelper review = new LogHelper("Teleporters to deleted from shard.log", true, true, true);
            foreach (Item item in delta)
                review.Log(LogType.Text, string.Format("{0} {1} {2} {3} {4}", item.Serial.Value, item.X, item.Y, item.Z, item.Map));
            review.Finish();

            // we can't load the jumplist with the items as usual, since when we get there it will have been deleted.
            //  we'll load our jumplist with Point3D+map instead.
            List<WorldLocation> jumplist = new();
            foreach (Item item in delta)
                jumplist.Add(item.GetWorldLocation());

            // lets be careful
            AutoSave.SavesEnabled = false;

            // lets get cracking!
            foreach (Item item in delta)
            {
                if (item != null && item.Deleted == false && item.Map != null && item.Map != Map.Internal)
                {
                    map = item.Map;
                    Rectangle2D rect = new();
                    int width = 6;
                    int height = 6;

                    if (item.Serial == 0x400446E1 || item.Serial == 0x40023C72)
                    {   // exception: teleporter 0x400446E1 || 0x40023C72 needs a 5x9 wipe
                        // special room in wrong
                        width = 6;
                        height = 10;
                    }
                    else if (item.Serial == 0x40055B9C || item.Serial == 0x400C91AE)
                    {   // exception: 0x40055B9C || 0x400C91AE needs a 1x1 wipe. (Oc'nivelle deco)
                        // oc'nivelle teles with surrounding deco
                        width = 1;
                        height = 1;
                    }
                    else if (item.Serial == 0x400162AA || item.Serial == 0x40027043)
                    {   // destard level 3
                        width = 6;
                        height = 6;
                    }
                    else
                    {
                        width = 6;
                        height = 6;
                    }

                    rect.X = item.X;
                    rect.Y = item.Y;
                    rect.Width = 1;
                    rect.Height = 1;

                    // now grow the rect to hold the items within the given width and height
                    int[] dimentions = new int[] { width, height };
                    foreach (int dimention in dimentions)
                    {   // some deletions are for the tele only, don't suck in any other tiles.
                        if (dimention > 1)
                        {
                            IPooledEnumerable eable = item.Map.GetItemsInRange(item.Location, dimention);
                            foreach (Item nearItem in eable)
                                if (nearItem != null && nearItem.Deleted == false && nearItem.Map != null && nearItem.Map != Map.Internal)
                                    rect.MakeHold(new Point2D(nearItem.X, nearItem.Y));
                            eable.Free();
                        }
                    }

                    UpdateWorldUnit(map, rect, item);
                }
            }
        }
        private static void UpdateWorldUnit(Map map, Rectangle2D rect, Item item)
        {
            // ===
            // special types and ItemIDs to protect
            // ===

            // cages near a teleporter
            List<int> ids = new() { 0x000006f6, 0x000006f5, 0x00000687 };

            // other types to ignore
            List<Type> types = new();
            types.Add(typeof(Spawner));
            types.Add(typeof(BaseDoor));
            types.Add(typeof(Moongate));
            types.Add(typeof(Teleporter));

            int startingZ = item.Z;
            item.Delete();

            // do the patch
            RefreshDeco(map, new List<Rectangle2D>() { rect }, startingZ: startingZ,
                typeExclude: types.ToArray(), idExclude: ids.ToArray(), lenientZ: int.MinValue /*5*/);
        }
        #endregion HasPatchedFeluccaTeleporters
        private static int HasPatchedFeluccaDeco(int patchid)// TODO 
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedFeluccaDeco;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to initialize Felucca deco...", ConsoleColor.Magenta);
                List<Item> before = Before();

                // Moongates
                PublicMoongate.Generate(PMList.Felucca);

                // add the teleporters
                TeleportersCreator tc = new TeleportersCreator();
                tc.CreateTeleporters(listOnly: false, new Map[] { Map.Felucca });

                // add the signs
                SignParser.Parse(World.GetSystemAcct(), null, new Map[] { Map.Felucca });

                // now the doors
                DoorGenerator.Generate(null, new Map[] { Map.Felucca });

                // Felucca
                Generate(Path.Combine(Core.DataDirectory, "Decoration/Felucca"), DecoMode.add, file: "*.cfg", listOnly: false,
                    types: null, boundingRect: null, exclude: null, maps: new Map[] { Map.Felucca });

                // Britannia
                Generate(Path.Combine(Core.DataDirectory, "Decoration/Britannia"), DecoMode.add, file: "*.cfg", listOnly: false,
                    types: null, boundingRect: null, exclude: null, maps: new Map[] { Map.Felucca });

                List<Item> after = After();

                // what's the delta?
                patched = Delta(before, after).Count;


                EchoOut(String.Format("Felucca deco initialized. {0} items updated.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedLostLandsAccess(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedLostLandsAccess;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove Lost Lands access...", ConsoleColor.Magenta);
                string filename = "LostLandsAccessTeleporters.log";
                LogHelper logger = new LogHelper(filename, true, true, true);
                foreach (Item item in World.Items.Values)
                    if (item is Teleporter teleporter && !teleporter.Deleted && teleporter.Running)
                        if (FromBrit(teleporter) && ToLostLands(teleporter))
                        {
                            logger.Log(LogType.Text, string.Format("{0} {1} {2} {3} {4}", teleporter.Serial.Value, teleporter.X, teleporter.Y, teleporter.Z, teleporter.Map));
                            patched++;
                            teleporter.Running = false;
                        }
                logger.Finish();

                EchoOut(String.Format("{0} Lost Lands access removed.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        #region HasPatchedIllegalTrammelItems
        private static int HasPatchedIllegalTrammelItems(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedIllegalTrammelItems;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove illegal Trammel items...", ConsoleColor.Magenta);

                patched = DeleteAllIllegalTrammelItems(new CommandEventArgs());


                EchoOut(String.Format("{0} illegal Trammel items removed.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int DeleteAllIllegalTrammelItems(CommandEventArgs e)
        {
            int deleted = 0;
            // first, read the list of items to exclude from the trammel search
            string pathName = Path.Combine(Core.DataDirectory, "Patches", "LegalTrammelItems.cfg");
            if (File.Exists(pathName))
            {
                List<Tuple<int, int, int, int, Map>> records = new();
                foreach (string line in File.ReadAllLines(pathName))
                {
                    string[] toks = line.Split(' ');
                    records.Add(new Tuple<int, int, int, int, Map>(int.Parse(toks[0]), int.Parse(toks[1]), int.Parse(toks[2]), int.Parse(toks[3]), Map.Parse(toks[4])));
                }

                // log the items
                LogHelper logger = new LogHelper("OrphanedTrammelItems.log", true, true, true);
                foreach (Item item in World.Items.Values)
                    if (item != null && item.Deleted == false && item.Map == Map.Trammel)
                        if (item is not EffectItem)
                            if (!records.Any(t => t.Item1 == item.Serial.Value))
                                if (item is Item)
                                    logger.Log(LogType.Item, item);

                logger.Finish();

                // delete the items
                int starting = 0;
                foreach (Item item in World.Items.Values)
                    if (item != null && item.Deleted == false && item.Map == Map.Trammel)
                        if (item.RootParent is not Mobile)
                            if (item is not EffectItem)
                            {
                                starting++;
                                if (!records.Any(t => t.Item1 == item.Serial.Value))
                                    if (item is Item)
                                    {
                                        item.Delete();
                                        deleted++;
                                    }
                            }

                if (e.Mobile != null)
                    e.Mobile.SendMessage("{0}/{1} Trammel items deleted.", deleted, starting);
            }
            else if (e.Mobile != null)
                e.Mobile.SendMessage("Cannot find {0}", pathName);

            return deleted;
        }
        #endregion HasPatchedIllegalTrammelItems
        private static int HasPatchedOutChamps(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedOutChamps;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to remove Champion Teleporters...", ConsoleColor.Magenta);

                int index = ConsoleCaptureOn();

                Dictionary<Item, Tuple<Point3D, Map, bool>> ChangeLog =
                Decorate.Generate(Path.Combine(Core.DataDirectory, "Decoration/Felucca"), Decorate.DecoMode.delete, "_champion teleporters.cfg", maps: new Map[] { Map.Felucca });
                int tmp = ChangeLog.Count;

                patched = ConsoleCaptureOff(index);


                EchoOut(String.Format("{0} Champion Teleporters removed.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedNPSACoords(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedNPSACoords;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of New Player Starting Zone...", ConsoleColor.Magenta);

                for (int i = CustomRegionControl.Instances.Count - 1; i >= 0; i--)
                {
                    CustomRegionControl crc = CustomRegionControl.Instances[i];

                    if (crc.Parent == null)
                    {
                        CustomRegion cr = crc.CustomRegion;

                        for (int j = 0; j < StaticRegion.XmlDatabase.Count; j++)
                        {
                            StaticRegion sr = StaticRegion.XmlDatabase[j];

                            if (cr.Name == sr.Name && cr.Map != sr.Map)
                            {
                                // only static-ify custom region controllers if the static region in question is registered
                                //if (sr.Registered)
                                {
                                    patched++;
                                    cr.Map = Map.Trammel;
                                    cr.Coords.Clear();
                                    cr.Coords.AddRange(new List<Rectangle3D>() { new Rectangle3D(new Point3D(5700, 940, -128), new Point3D(5765, 1000, 128)) });
                                }

                                goto Done;
                            }
                        }
                    }
                }
            Done:


                EchoOut(String.Format("{0} New Player Starting Zone patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);

            }

            return patched;
        }
        #region Static Regions
        private static int HasPatchedRegionsControllerID(int patchid)
        {

            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedRegionsControllerID;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of region controllers graphic ID...", ConsoleColor.Magenta);

                Region ga = Region.FindByName("Green Acres", Map.Felucca);
                if (ga != null)
                {
                    for (int i = CustomRegionControl.Instances.Count - 1; i >= 0; i--)
                    {
                        CustomRegionControl crc = CustomRegionControl.Instances[i];
                        if (crc.Parent == null && ga.Contains(crc.Location))
                        {
                            crc.ItemID = 0x0BF6; // Sailor's guild sign
                            patched++;
                        }
                    }

                    for (int i = StaticRegionControl.Instances.Count - 1; i >= 0; i--)
                    {
                        StaticRegionControl src = StaticRegionControl.Instances[i];
                        if (src.Parent == null && ga.Contains(src.Location))
                        {
                            src.ItemID = 0x0BAC; // healer sign (looks different that region controllers)
                            patched++;
                        }
                    }
                }

                EchoOut(String.Format("{0} region controllers patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedStaticRegions(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedStaticRegions;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of static regions...", ConsoleColor.Magenta);
                /*
                 * If you want to check out the current regioning, do the following:
                 * 1. Pull my changes
                 * 2. Delete Saves/StaticRegions.xml
                 * 3. Boot server
                 * 4. Run [nuke PatchRegionControllers
                 */
                string filename = Path.Combine("Saves/", "StaticRegions.xml");
                bool complete = false;
                if (System.IO.File.Exists(filename))
                {
                    try { System.IO.File.Delete(filename); }
                    catch { ErrorOut(bits, string.Format("Error:HasPatchedStaticRegions: Cannot delete : {0}", filename), ConsoleColor.Red); }
                    if (!System.IO.File.Exists(filename))
                    {   // it was deleted
                        patched = Regions.StaticRegion.PatchRegionControllers();
                        complete = true;
                    }
                }
                else
                {
                    patched = Regions.StaticRegion.PatchRegionControllers();
                    complete = true;
                }

                if (complete == true)
                {

                    EchoOut(String.Format("{0} static regions patched.", patched), ConsoleColor.Magenta);
                    PatchComplete(bits, patchid);
                }
                else
                    ErrorOut(bits, "Logic Error: Unable to patch static regions '{0}'.", ConsoleColor.Red, "StaticRegions.xml");
            }

            return patched;
        }
        private static int HasRefreshedStaticRegionsV3(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRefreshedStaticRegionsV3;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("Redo of static regions patch V3...", ConsoleColor.Magenta);
                ClearDynamicPatch(PatchIndex.HasRefreshedStaticRegionsV2);   // clear the previous patch flag
                EchoOut(String.Format("Ready to apply V2..."), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasRefreshedStaticRegionsV2(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRefreshedStaticRegionsV2;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("Redo of static regions patch V2...", ConsoleColor.Magenta);
                ClearDynamicPatch(PatchIndex.HasRefreshedStaticRegions);   // clear the previous patch flag
                EchoOut(String.Format("Ready to apply Static Region Patch....", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasRefreshedStaticRegions(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasRefreshedStaticRegions;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("Redo of static regions patch V1...", ConsoleColor.Magenta);
                object regionRegions = SaveRegionRegions();             // save the current regions, and clear region database
                object mapRegions = SaveMapRegions();                   // save the current regions, and clear map region database
                DeleteStaticRegionsFromSaves();                         // force a reload from Data/
                StaticRegion.XmlDatabase.Clear();                       // empty database
                StaticRegion.LoadRegions(StaticRegion.DataFileName, initRegistration: true);    // okay, load from Data/
                ClearDynamicPatch(PatchIndex.HasPatchedStaticRegions);   // clear the previous patch flag
                patched = HasPatchedStaticRegions(patchid);             // redo the patch (converts Region Controllers to Static Region controllers)
                RestoreRegionRegions(regionRegions);                    // re-register any regions not covered by the above load (treasure map regions, houses, etc.)
                RestoreMapRegions(mapRegions);                          // probably a noop since, RestoreRegionRegions would have restored map regions
                EchoOut(String.Format("{0} static regions repatched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static bool DeleteStaticRegionsFromSaves()
        {
            string filename = Path.Combine("Saves/", "StaticRegions.xml");
            bool complete = false;
            if (System.IO.File.Exists(filename))
            {
                try { System.IO.File.Delete(filename); }
                catch { }
                if (!System.IO.File.Exists(filename))
                    complete = true;
            }
            else
                complete = true;

            return complete;
        }
        private static object SaveRegionRegions()
        {
            Dictionary<int, Region> regions = new Dictionary<int, Region>();
            foreach (Region rx in Region.Regions)
                regions.Add(rx.UId, rx);
            foreach (Region rx in regions.Values)
                Region.RemoveRegion(rx);
            return regions;
        }
        private static void RestoreRegionRegions(object o)
        {
            Dictionary<int, Region> regions = o as Dictionary<int, Region>;
            foreach (Region rx in regions.Values)

                /* Can't filter here by Region.FindByUId(rx.UId) as these are guaranteed 
                 *  to be different that the regions loaded from Data/StaticRegions.xml
                 * We allow null or empty names as this are house regions. As long as they are not in 
                 *  Data/StaticRegions.xml, then we should be cool
                 * Finally, we allow all uniquely named regions. This might a problem for Snafu's 
                 *  "Last Man Standing" regions if they made there way into Data/StaticRegions.xml
                 */
                if (string.IsNullOrEmpty(rx.Name) || (Region.FindByName(rx.Name, rx.Map) == null))
                    // add it!
                    Region.AddRegion(rx);
            return;
        }
        private static object SaveMapRegions()
        {
            Dictionary<string, Region> regions = new Dictionary<string, Region>();
            foreach (Region rx in Map.Felucca.Regions.Values)
                regions.Add(rx.Name, rx);
            foreach (Region rx in regions.Values)
                Map.Felucca.UnregisterRegion(rx);
            return regions;
        }
        private static void RestoreMapRegions(object o)
        {
            Dictionary<string, Region> regions = o as Dictionary<string, Region>;
            foreach (Region rx in regions.Values)
                if (!Map.Felucca.Regions.ContainsKey(rx.Name))
                    //Map.Felucca.Regions.Add(rx.Name, rx);
                    rx.Map.RegisterRegion(rx);
            return;
        }
        #endregion Static Regions
        private static int HasPatchedVisibleSpawners(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedVisibleSpawners;
            if (Patched(bits) == false &&
                Patched(PatchIndex.HasPatchedInClasicRespawn) == true &&
                StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of visible spawners, hiding...", ConsoleColor.Magenta);

                foreach (Item item in World.Items.Values)
                {
                    if (item is EventSpawner) continue;
                    if (item.Map != Map.Felucca) continue;

                    if (item is Spawner spawner && spawner.Visible == true)
                    {
                        spawner.Visible = false;
                        patched++;
                    }
                }


                EchoOut(String.Format("{0} visible spawners hidden.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        private static int HasPatchedMoonglowZooAI(int patchid)
        {
            int patched = 0;
            PatchIndex bits = CoreAI.PatchIndex.HasPatchedMoonglowZooAI;
            if (!Patched(bits) && AngelIsland())
            {
                EchoOut("One-time patch of Angel Island's Moonglow Zoo running...", ConsoleColor.Magenta);

                // get Moonglow Zoo spawners
                List<string> mzLines = GetMoonglowSpawnerEntries();

                // create spawners at moonglow zoo and bless the creatures so they can't be tamed, don't attack, can't be barded, etc.
                foreach (string line in mzLines)
                {
                    List<NerunRecord.Record> recordList = new();
                    List<string> compiledTokens = new();
                    string[] lineToks = line.Split(new char[] { '|' });                 // parse on '|'
                    CompileLine(lineToks, compiledTokens);                              // compile this line
                    NerunRecord.Parse(compiledTokens.ToArray(), recordList);            // parse into a record list

                    foreach (NerunRecord.Record record in recordList)
                    {
                        // record the mobiles found
                        List<Mobile> mobList = new();

                        // get the area rect of these mobiles
                        Rectangle2D rect = new Rectangle2D(record.X, record.Y, 1, 1);
                        // grow the rect to the 'room size' of the mobiles
                        rect = new Utility.SpawnableRect(rect).MaximumSpawnableRect(Map.Felucca, 30, Map.Felucca.GetAverageZ(rect.X, rect.Y));

                        foreach (object o in Map.Felucca.GetObjectsInBounds(rect))
                            if (o is Mobile mob && mob.Blessed == true)
                                mobList.Add(mob);

                        // create the spawner
                        Spawner spawner = Activator.CreateInstance(typeof(Spawner)) as Spawner;
                        spawner.MoveToWorld(new Point3D(record.X, record.Y, record.Z), Map.Felucca);
                        patched++;

                        // add the mobiles
                        foreach (Mobile m in mobList)
                            spawner.ObjectNamesRaw.Add(m.GetType().Name);

                        // set up the spawn count for each of these creatures
                        for (int jx = 0; jx < spawner.ObjectNamesRaw.Count; jx++)
                            spawner.SetSlotCount(index: jx, 1);
                        /*if (jx == 0)
                            spawner.Count = 1;
                        else
                            spawner.EntryCount[jx - 1] = 1;*/

                        // special case for our reaper
                        if (spawner.ObjectNamesRaw.Count == 1 && (spawner.ObjectNamesRaw[0] as string).ToLower() == "reaper")
                        {
                            spawner.HomeRange = 0;
                        }
                        else
                        {
                            spawner.ModeMulti = true;                                   // tell the spawner we're a multi spawner
                            spawner.HomeRange = 1;                                      // just a seed, will be thrown away
                            spawner.WalkRangeCalc = true;                               // automatically calculate the best walking range
                        }
                        spawner.Invulnerable = true;

                        // delete the old mobiles
                        foreach (Mobile m in mobList)
                            m.Delete();

                        // respawn the new
                        spawner.ScheduleRespawn = true;
                    }

                }

                EchoOut(String.Format("{0} Angel Island's Moonglow Zoo elements patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasPatchedMoonglowZooStandardShards(int patchid)
        {
            int patched = 0;
            PatchIndex bits = CoreAI.PatchIndex.HasPatchedMoonglowZooStandardShards;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of standard shard's Moonglow Zoo running...", ConsoleColor.Magenta);

                // get Moonglow Zoo spawners
                List<string> mzLines = GetMoonglowSpawnerEntries();

                // set spawners at moonglow zoo to bless the creatures so they can't be tamed, don't attack, can't be barded, etc.
                foreach (string line in mzLines)
                {
                    List<NerunRecord.Record> recordList = new();
                    List<string> compiledTokens = new();
                    string[] lineToks = line.Split(new char[] { '|' });                 // parse on '|'
                    CompileLine(lineToks, compiledTokens);                              // compile this line
                    NerunRecord.Parse(compiledTokens.ToArray(), recordList);            // parse into a record list
                    List<Spawner> allSpawnersAt = new List<Spawner>(AllModeNerunsSpawnersAt(recordList[0].X, recordList[0].Y, Map.Felucca));
                    foreach (Spawner spawner in allSpawnersAt)
                    {
                        spawner.Invulnerable = true;
                        spawner.RemoveObjects();
                        spawner.ScheduleRespawn = true;
                        patched++;
                    }
                }

                EchoOut(String.Format("{0} standard shard's Moonglow Zoo elements patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }

            return patched;
        }
        #region HasPatchedZoo   
        private static List<string> GetMoonglowSpawnerEntries()
        {
            // get Moonglow Zoo spawners
            string[] files = new string[] { Path.Combine(Core.DataDirectory, "Spawners/Nerun's Distro/Spawns/felucca/Outdoors.map") };
            List<string> mzLines = new();
            bool recording = false;
            bool start = false;
            foreach (string file in files)
            {
                foreach (string line in System.IO.File.ReadLines(file))
                {   //first scan looking for moonglow zoo
                    if (line.ToLower().Contains("moonglow zoo"))
                    {   // found it
                        // now collect all lines up until the next comment into a buffer
                        start = true;
                        continue;
                    }
                    if (start == true && CanParse(line))
                    {
                        recording = true;
                        mzLines.Add(line);
                        continue;
                    }
                    else if (recording == true && CanParse(line) == false)
                    {
                        recording = false;
                        break;
                    }
                }
            }

            return mzLines;
        }
        private static List<Spawner> AllModeNerunsSpawnersAt(int X, int Y, Map map)
        {
            List<Spawner> list = new();

            foreach (object o in map.GetObjectsInBounds(new Rectangle2D(X, Y, 1, 1)))   // does 0,0 work? seems not
                if (o is Spawner spawner)
                    if (spawner.ModeNeruns)
                        list.Add(spawner);

            return list;
        }
        private static bool CanParse(string line)
        {
            string[] lineToks = line.Split(new char[] { '|' });                         // parse on '|'
            if (lineToks.Length == 22)                                                  // always 22 fields
                return true;
            return false;
        }
        #endregion HasPatchedZoo
        private static int HasUpdatedMoonglowZoo(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasUpdatedMoonglowZoo;
            if (!Patched(bits) && AllShards() && !LoginServer(quiet: true))
            {
                LogPatch(bits);
                EchoOut("One-time patch of Moonglow Zoo on all shards running...", ConsoleColor.Magenta);

                // first, wipe the area of mobiles (likely blessed from AI)
                Region reg = Region.FindByName("Britannia Royal Zoo", Map.Felucca);
                if (reg != null)
                {
                    foreach (Rectangle3D rect in reg.Coords)
                    {
                        Rectangle2D rect2D = new(rect.Start.X, rect.Start.Y, rect.Width, rect.Height);
                        patched += WipeRect(Map.Felucca, rect2D,
                            Utility.GetAverageZ(Map.Felucca, rect2D.Center.X, rect2D.Center.Y),
                            flags: WipeRectFlags.Mobiles);
                    }
                }
                else
                {
                    ErrorOut(bits, "Logic Error: Unable to find Moonglow zoo to wipe.", ConsoleColor.Red);
                    return 0;
                }

                // next, set all the spawners to 'Exhibit' creatures
                foreach (Rectangle3D rect in reg.Coords)
                {
                    IPooledEnumerable eable = Map.Felucca.GetItemsInBounds(new Rectangle2D(rect.Start.X, rect.Start.Y, rect.Width, rect.Height));

                    foreach (Item item in eable)
                    {
                        if (item is Spawner spawner && !spawner.Deleted)
                        {
                            foreach (object o in spawner.Objects)
                            {
                                if (o is BaseCreature bc)
                                {   // leave guards and escortables alone
                                    if (!bc.Body.IsHuman)
                                    {   // we don't mix monsters and humans at this location
                                        spawner.Exhibit = true;
                                        spawner.RemoveObjects();
                                        patched++;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    eable.Free();
                }

                // next lock all the doors and remove signs (standard shards only)
                foreach (Rectangle3D rect in reg.Coords)
                {
                    List<Item> list = new();
                    IPooledEnumerable eable = Map.Felucca.GetItemsInBounds(new Rectangle2D(rect.Start.X, rect.Start.Y, rect.Width, rect.Height));
                    foreach (Item item in eable)
                    {
                        if (item is LocalizedSign)
                            continue;
                        else if (item is CustomRegionControl)
                            continue;
                        else if (item is BaseDoor bd)
                        {
                            bd.Locked = true;
                            patched++;
                        }
                        // south facing sign, north facing sign
                        //  only delete for standard shards
                        else if (StandardShards(quiet: true) && item.ItemID == 0xBD1 || item.ItemID == 0xBD2)
                        {
                            list.Add(item);
                            patched++;
                        }

                    }
                    eable.Free();

                    // delete all the items
                    foreach (Item item in list)
                        item.Delete();
                }


                EchoOut(String.Format("{0} Moonglow Zoo on all shards patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        #region HasPatchedBirds
        private static int HasPatchedBirds(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedBirds;
            // this patch can only run after a [classicRespawn
            if (
                (!Patched(bits) && Patched(PatchIndex.HasPatchedInClasicRespawn) && StandardShards()) ||
                (!Patched(bits) && AngelIsland())
                )
            {
                EchoOut("One-time patch of bird spawn. spawning...", ConsoleColor.Magenta);

                var before = Before();

                // spawn our new birds where ever birds are spawned in WildLife.map
                string[] files = new string[] { Path.Combine(Core.DataDirectory, "Spawners/Nerun's Distro/Spawns/felucca/WildLife.map") };
                foreach (string file in files)
                    HasPatchedBirdsWorker(file, "bird", "Crow:Magpie:Raven");

                // spawn crows at the Graveyards
                files = new string[] { Path.Combine(Core.DataDirectory, "Spawners/Nerun's Distro/Spawns/felucca/Graveyards.map") };
                foreach (string file in files)
                    HasPatchedBirdsWorker(file, "skeleton", "Crow");

                var after = After();

                patched = Delta(before, after).Count;

                EchoOut(String.Format("{0} birds spawned.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static void HasPatchedBirdsWorker(string file, string match, string replacement)
        {
            foreach (string line in System.IO.File.ReadLines(file))
            {
                // find matching lines
                if (Regex.Match(line, @"\b(" + match + @")\b", RegexOptions.IgnoreCase).Success)
                {
                    List<NerunRecord.Record> recordList = new();
                    List<string> compiledTokens = new();
                    string[] lineToks = line.Split(new char[] { '|' });                     // parse on '|'
                    if (lineToks.Length == 22)                                              // always 22 fields
                    {
                        CompileLine(lineToks, compiledTokens);                              // compile this line
                        NerunRecord.Parse(compiledTokens.ToArray(), recordList);            // parse into a record list
                        Spawner spawner = SpawnerFromCompiledTokens(compiledTokens);        // create the spawner based on the specs

                        for (int ix = 0; ix < compiledTokens.Count; ix++)
                        {
                            if (compiledTokens[ix].ToLower().Contains(match))
                            {
                                int count;
                                /*
                                if (ix == 0)
                                    count = spawner.Count;                                  // we found the bird in the first cell, this cell is controlled by 'Count'
                                else
                                    count = spawner.EntryCount[ix - 1];                     // we found 'bird' in a cell > 0, so use that entry count
                                */
                                count = spawner.GetSlotCount(ix);
                                //Array.Fill(spawner.EntryCount, 0);                          // wipe the existing notion of EntryCounts
                                spawner.WipeSlots();
                                spawner.Count = count;                                      // we're only adding one entry, so we use the 'Count' field
                                spawner.ObjectNamesRaw.Add(replacement);                    // Add our birds!
                                break;
                            }
                        }
                        // else: it will always be '22' (a valid record) since we are only passing it a valid record.

                        // the file created by this function is read and processed by all shards, and spawners are updated accordingly
                        UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false, uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                        // set the spawner mode
                        if (replacement.Contains(':'))                                      // important:
                            spawner.ModeMulti = true;                                       // if the replacement we added contains colon delimited fields, it must be a ModeMulti
                        else                                                                // otherwise,
                            spawner.ModeAI = true;                                          // it's a classic AI spawner

                        // convert to Concentric for the wide area spawners
                        if (spawner.HomeRange > 25)                                         // better distribution
                            spawner.Concentric = true;

                        // place it (<== seems a bit anticlimactic)
                        spawner.MoveToWorld(spawner.Location, Map.Felucca);

                        // now drop a control console on top of the pile if there are more than one stacked spawners, and there isn't already
                        //  a console there.
                        if (NeedsConsole(spawner.X, spawner.Y, spawner.Z, spawner.Map) && !AlreadySpawned(spawner.X, spawner.Y, spawner.Z, spawner.Map))
                        {
                            Items.StackedSpawnerConsole stackedSpawnerConsole = new Items.StackedSpawnerConsole();
                            stackedSpawnerConsole.Movable = false;
                            stackedSpawnerConsole.Visible = false;
                            stackedSpawnerConsole.MoveToWorld(new Point3D(spawner.X, spawner.Y, spawner.Z + 1), spawner.Map);
                        }

                        // as usual, log it
                        string output = string.Format("Add {0} spawner at {1}", replacement, spawner.Location);
                        LogHelper logger = new LogHelper("adding birds.log", false, true);
                        logger.Log(LogType.Text, output);
                        logger.Finish();
                    }
                }
            }
        }
        public static bool AlreadySpawned(int X, int Y, int Z, Map map)
        {
            foreach (object o in map.GetObjectsInBounds(new Rectangle2D(X, Y, 1, 1)))   // does 0,0 work? seems not
                if (o is Items.StackedSpawnerConsole)
                    return true;
            return false;
        }
        public static bool NeedsConsole(int X, int Y, int Z, Map map)
        {
            int count = 0;
            foreach (object o in map.GetObjectsInBounds(new Rectangle2D(X, Y, 1, 1)))   // does 0,0 work? seems not
                if (o is Spawner spawner)
                {
                    if (spawner.X == X && spawner.Y == Y)
                        count++;
                }
            return count > 1;
        }
        #endregion HasPatchedBirds
        private static int HasPatchedBowyer(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedBowyer;
            if (!Patched(bits) && AngelIsland())
            {
                LogPatch(bits);
                EchoOut("One-time patch of 'bowyer' spawners. Patching...", ConsoleColor.Magenta);
                foreach (Item item in World.Items.Values)
                {
                    if (item is EventSpawner) continue;
                    if (item.Map != Map.Felucca) continue;

                    if (item is Spawner spawner)
                        if (spawner.Spawns("bower"))
                        {
                            patched++;
                            for (int ix = 0; ix < spawner.ObjectNamesRaw.Count; ix++)
                                if ((spawner.ObjectNamesRaw[ix] as string).ToLower().Contains("bower"))
                                    spawner.ObjectNamesRaw[ix] = new string("bowyer");
                        }
                }

                EchoOut(String.Format("{0} 'bowyer' spawners patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasActivatedCamps(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasActivatedCamps;
            if (!Patched(bits) && AngelIsland())
            {
                LogPatch(bits);
                EchoOut("One-time patch of Camp system. Activating...", ConsoleColor.Magenta);
                foreach (Item item in World.Items.Values)
                {
                    if (item is EventSpawner) continue;
                    if (item.Map != Map.Felucca) continue;

                    if (item is Spawner spawner)
                        if (spawner.Spawns("camp"))
                        {
                            if (spawner.Running == false)
                            {
                                patched++;
                                spawner.Running = true;
                                spawner.MinDelay = TimeSpan.FromHours(1);
                                spawner.MaxDelay = TimeSpan.FromHours(3);
                            }
                            else
                            {
                                patched++;
                                spawner.MinDelay = TimeSpan.FromHours(1);
                                spawner.MaxDelay = TimeSpan.FromHours(3);
                            }
                        }
                }

                EchoOut(String.Format("{0} Camps Activated.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasPatchedCamps(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.HasPatchedCamps;
            // we really only should run this on AngelIsland(), but I inadvertently ran it on 
            //  Siege, so now we need to undo the patch there.
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of Camp respawn. Patching...", ConsoleColor.Magenta);
                foreach (Item item in World.Items.Values)
                {
                    if (item is EventSpawner) continue;
                    if (item.Map != Map.Felucca) continue;

                    if (item is Spawner spawner)
                        if (spawner.Spawns("camp"))
                        {
                            patched++;
                            spawner.MinDelay = TimeSpan.FromMinutes(45);    // from Nerun's Outdoors.map
                            spawner.MaxDelay = TimeSpan.FromMinutes(60);
                        }
                }

                EchoOut(String.Format("{0} Camps Patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        private static int HasPatchedFreezeDry(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.HasPatchedFreezeDry;
            //adam: Because Gold Tracker and Leaderboard frequently rehydrate the world, it obviates the need for freeze drying somewhat.
            //  I mean, what good is having 10,000 freeze dried items, if every 5 minutes we rehydrate them?
            //  If our population ever skyrockets, we can revisit this.
            //  Mortalis: Another concern is with new player tracking of items. This becomes much more complex with freeze drying as it effectly hides them from the world.
            if (!Patched(bits) && World.FreezeDryEnabled == true && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of FreezeDry system. Turning off...", ConsoleColor.Magenta);
                CommandEventArgs e = new CommandEventArgs();
#if false
                Commands.RehydrateWorld.RehydrateWorld_OnCommand(e);
#endif
                World.FreezeDryEnabled = false; // no more FreezeDry :(
                EchoOut("One-time patch of FreezeDry system. complete.", ConsoleColor.Magenta);
                PatchComplete(bits, patchid);
            }
            return patches + 1;
        }
        private static int HasPatchedGUIDs(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.HasPatchedGUIDs;
            // patch the players GUIDs
            //  we need to do players first, then pets
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of player GUIDs. Setting...", ConsoleColor.Magenta);
                int seen = 0;
                int patched = 0;
                foreach (Mobile m in World.Mobiles.Values)
                {
                    if (m == null || m.Deleted) continue;
                    if (m is Mobiles.PlayerMobile pm)
                    {
                        seen++;
                        // players that don't yet have a GUID, get one now.
                        //  a GUID uniquely identifies a player, even after the mobile has been deleted
                        // (Needed by by Mortalis)
                        if (pm.GUID == 0)
                        {
                            patched++;
                            // no longer used in this way.
                            //  GUIDs are created and assigned at login
                            //pm.GUID = pm.MakeGuid();
                        }
                    }
                }
                EchoOut(String.Format("{0} players checked, {1} patched.", seen, patched), ConsoleColor.Magenta);
                EchoOut("One-time patch of player GUIDs complete.", ConsoleColor.Magenta);
                patches = patched;

                // patch the player's pets GUIDs
                //  we need to do players first, then pets
                if (!Patched(bits) && AllShards())
                {
                    EchoOut("One-time patch of player's pets GUIDs. Setting...", ConsoleColor.Magenta);
                    seen = 0;
                    patched = 0;
                    foreach (Mobile m in World.Mobiles.Values)
                    {
                        if (m == null || m.Deleted) continue;
                        if (m is Mobiles.BaseCreature bc && bc.ControlMaster != null)
                        {
                            seen++;
                            // player's pet's that don't yet have a GUID, get one now.
                            //  a GUID uniquely identifies a player, even after the mobile has been deleted
                            // (Needed by by Mortalis)
                            if (bc.ControlMasterGUID == 0)
                            {
                                patched++;
                                bc.ControlMasterGUID = bc.ControlMaster.GUID;
                            }
                        }
                    }
                    EchoOut(String.Format("{0} pets checked, {1} patched.", seen, patched), ConsoleColor.Magenta);
                    EchoOut("One-time patch of player's pet's GUIDs complete.", ConsoleColor.Magenta);
                    patches += patched;
                }

                PatchComplete(bits, patchid);
            }
            return patches;
        }
        private static int HasPatchedHouseCodes(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.HasPatchedHouseCodes;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch of housing account codes. Patching...", ConsoleColor.Magenta);
                int patched = 0;
                foreach (Item item in World.Items.Values)
                {
                    if (item is Multis.BaseHouse bh)
                    {
                        patched++;
                        bh.RefreshAccountCode();
                    }
                }
                EchoOut(String.Format("{0} houses patched.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);

                patches = patched;
            }
            return patches;
        }
        private static int HasCategorizedOtherSpawners(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.HasCategorizedOtherSpawners;
            if (!Patched(bits) && AllShards())
            {
                EchoOut("One-time patch for 'other' spawner categorization. Patching...", ConsoleColor.Magenta);
                int patched = 0;

                // build spawner list
                List<Spawner> spawnerList = new();
                foreach (Item item in World.Items.Values)
                {
                    if (item is Spawner spawner && !spawner.Deleted)
                    {   // all the spawners missed on the first patch
                        if (spawner.Distro == SpawnerModeAttribs.None)
                        {
                            if (item is EventSpawner)
                                spawnerList.Add(spawner);
                            else if (item.Map != Map.Felucca)
                                spawnerList.Add(spawner);
                        }
                    }
                }

                foreach (Spawner spawner in spawnerList)
                {
                    patched++;
                    spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                    UpdateSpawnerDesignationaAndLog(
                        spawner,
                        coreSpawn: false,
                        uOSpawnMap: "AISpecial",
                        shardConfig: ShardConfig.AllShards);
                }
                EchoOut(String.Format("{0} 'other' spawners categorized.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);

                patches = patched;
            }

            return patches;
        }
        private static int HasCategorizedSpawners(int patchid)
        {
            XmlDocument doc = OpenStandardObjects();
            int patches = 0;
            PatchIndex bits = PatchIndex.HasCategorizedSpawners;
            if (!Patched(bits) && AllShards())
            {
                EchoOut("One-time patch for spawner categorization. Patching...", ConsoleColor.Magenta);
                int patched = 0;
                List<Serial> orcCaves = new List<Serial>() { 0x40052374, 0x40052EF4, 0x40053A47, 0x40055561, 0x400558F9, 0x40055C42, 0x400562D6, 0x40056626, 0x40056B6C, 0x40056F13, 0x40057224, 0x400574D1, 0x40058011, 0x400583AA };
                List<Serial> area37 = new List<Serial>() { 0x40033C4C };
                List<Serial> area40 = new List<Serial>() { 0x40132932 };

                // Sanity. Disallow running patch on already patched spawners
                foreach (Item item in World.Items.Values)
                {
                    if (item is EventSpawner) continue;
                    if (item.Map != Map.Felucca) continue;

                    if (item is Spawner spawner)
                    {
                        if (spawner.Distro != SpawnerModeAttribs.None)
                        {
                            ErrorOut(bits, "Error: These spawners have already been patched. Aborting...", ConsoleColor.Red);
                            return 0;
                        }
                    }
                }

                LogHelper logger = new LogHelper(Path.Combine(Core.DataDirectory, Core.Server, "definitive spawner list.cfg"), true, true);
                foreach (Item item in World.Items.Values)
                {
                    if (item is EventSpawner) continue;
                    if (item.Map != Map.Felucca) continue;

                    if (item is Spawner spawner)
                    {
                        bool allStandardCreature = AllStandardCreatures(doc, spawner);
                        bool excludeFromCore = ExcludeFromCore(spawner);

                        patched++;
                        if (orcCaves.Contains(spawner.Serial))
                        {
                            spawner.CoreSpawn = true;
                            spawner.Source = "OrcCaves";
                            spawner.Shard = Spawner.ShardConfig.Core;
                            spawner.NeedsReview = false;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }
                        else if (area37.Contains(spawner.Serial))
                        {
                            spawner.CoreSpawn = true;
                            spawner.Source = "Area 37";
                            spawner.Shard = Spawner.ShardConfig.Core;
                            spawner.NeedsReview = false;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }
                        else if (area40.Contains(spawner.Serial))
                        {
                            spawner.CoreSpawn = true;
                            spawner.Source = "Area 40";
                            spawner.Shard = Spawner.ShardConfig.Core;
                            spawner.NeedsReview = false;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }
                        else if (spawner.CoreSpawn)                                                         // was manually designated by AI staff
                        {   // determine if this spawner needs review
                            if (spawner.Name.ToLower() == "spawner")
                            {   // it was marked as core, but had no 'Area' qualifier 
                                spawner.NeedsReview = true;
                            }
                            else
                                spawner.NeedsReview = false;
                            spawner.CoreSpawn = true;
                            spawner.Source = PatchSpawnerData(spawner);
                            spawner.Shard = Spawner.ShardConfig.Core;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }
                        else if (SpecialDisposition(spawner) != null)                                   // AI prison
                        {   // needs to come before AllStandardCreatures.
                            spawner.Source = SpecialDisposition(spawner);                          // default to another naming, like IOB Alignment
                            // An Angel Island special spawn. I.e., non-core that will be allowed on all shards.
                            //  example: Angel Island Prison, treasure chests, hire fighters, etc
                            spawner.CoreSpawn = false;
                            spawner.Shard = Spawner.ShardConfig.AllShards;
                            spawner.NeedsReview = false;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }
                        else if (PromoteToCore(spawner) == true && excludeFromCore == false)            // shopkeepers and such
                        {   // certain mobiles like BaseVendor and Guards should be flagged as being 'core' spawners as they are not 'special' (or usually not)
                            spawner.Source = "Pub15";                                              // denotes this as pub 15 standard spawn. 
                            spawner.CoreSpawn = true;
                            spawner.Shard = Spawner.ShardConfig.Core;
                            spawner.NeedsReview = false;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }
                        else if (allStandardCreature && excludeFromCore == false)                       // standard creatures get promoted to core
                        {   // here we check to see if all creatures on this spawner are standard OSI circa Publish 15
                            //  in the early days, we placed spawners without a 'core' marker. We will promote them now.
                            spawner.Source = "Pub15";                                              // denotes this as pub 15 standard spawn. 
                            spawner.CoreSpawn = true;
                            spawner.Shard = Spawner.ShardConfig.Core;
                            spawner.NeedsReview = false;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }
                        else
                        {
                            // An Angel Island special spawn. I.e., non-core
                            spawner.Source = "AISpecial";  // denotes this as an Angel Island Special - non standard. 
                            spawner.CoreSpawn = false;
                            spawner.Shard = Spawner.ShardConfig.AngelIsland;
                            spawner.NeedsReview = false;
                            spawner.Distro = SpawnerModeAttribs.ModeLegacy;
                        }

                        logger.Log(LogType.Text, string.Format("Serial: {0}, Location: {1}, Name: {2}, UOSpawnMap: {3}, NeedsReview: {4}", spawner.Serial, spawner.Location, spawner.Name, spawner.Source, spawner.NeedsReview));
                    }
                }
                logger.Finish();
                EchoOut(String.Format("{0} spawners categorized.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);

                patches = patched;
            }

            return patches;
        }
        #region HasCategorizedSpawners
        private static bool AllStandardCreatures(XmlDocument doc, Spawner spawner)
        {
            if (spawner.Objects.Count == 0)
                return false;

            foreach (object o in spawner.Objects)
                if (o is BaseCreature)
                    if (StandardCreature(doc, o.GetType().FullName) == false)
                        return false;

            // we have objects, they are all baseCreature, and they are all standard.
            return true;
        }
        private static string SpecialDisposition(Spawner spawner)
        {
            // By Region
            ArrayList list = Region.FindAll(spawner.Location, spawner.Map);
            foreach (Region rx in list)
                if (!string.IsNullOrEmpty(rx.Name))
                    if (rx.Name.ToLower().Contains("angel island"))
                        return "AIPrison";

            // I've opted to disallow a special disposition for Kin, meaning, not on Siege
            if (false)
            {
                // By IOB Alignment
                //  We're keeping the kin and their strongholds.
                foreach (object o in spawner.Objects)
                {
                    if (o is BaseCreature bc)
                    {
                        switch (bc.IOBAlignment)
                        {
                            case IOBAlignment.Council:
                            case IOBAlignment.Pirate:
                            case IOBAlignment.Brigand:
                            case IOBAlignment.Orcish:
                            case IOBAlignment.Savage:
                            case IOBAlignment.Undead:
                            case IOBAlignment.Good:
                                return "Kin";
                        }
                    }
                }
            }

            // special spawners that we want to keep on all shards
            if (spawner.Spawns("treasure")) return "AISpecial";
            if (spawner.Spawns("hirefighter")) return "AISpecial";
            if (spawner.Spawns("deadminer")) return "AISpecial";
            if (spawner.Spawns("deadinmate")) return "AISpecial";
            if (spawner.Spawns("moongatewizard")) return "AISpecial";

            return null;
        }
        private static bool ExcludeFromCore(Spawner spawner)
        {
            foreach (object o in spawner.ObjectTypes)
            {   // all/most of these guys should NOT be marked as core

                if (typeof(FightBroker).IsAssignableFrom((o as Type))) return true;         // AI Special
                if (typeof(Auctioneer).IsAssignableFrom((o as Type))) return true;          // AI Special
                if (typeof(Ranger).IsAssignableFrom((o as Type))) return true;              // AI Special: RunUO's StandardCreatures contains a 'Ranger' too. Don't accept it as a match (will accept elsewhere)
                if (typeof(BritannianRanger).IsAssignableFrom((o as Type))) return true;    // AI Special
                if (typeof(Server.Mobiles.Pirate).IsAssignableFrom((o as Type))) return true;              // AI Special: RunUO's StandardCreatures contains a 'Pirate' too. Don't accept it as a match (will accept elsewhere)
            }

            return false;
        }
        private static bool PromoteToCore(Spawner spawner)
        {
            foreach (object o in spawner.ObjectTypes)
            {   // all/most of these guys should be marked as core

                if (typeof(BaseGuard).IsAssignableFrom((o as Type))) return true;
                if (typeof(BaseVendor).IsAssignableFrom((o as Type))) return true;      // includes BaseHealer
                if (typeof(BaseOverland).IsAssignableFrom((o as Type))) return true;    // all your Escortables (are belong to us)
                if (typeof(Gypsy).IsAssignableFrom((o as Type))) return true;
                if (typeof(Thief).IsAssignableFrom((o as Type))) return true;           // I guess. Don't know I've ever seen one of these

                // promote spawners with town critters to 'Core'
                if (typeof(BaseCreature).IsAssignableFrom((o as Type)))
                {
                    int nonCritters = 0;
                    foreach (object c in spawner.Objects)
                    {   // see if there is anything but critters on this spawner. If so, we won't promote
                        if (!(c is BaseCreature bc && bc.AIObject is AnimalAI))
                            // not a town critter
                            nonCritters++;
                    }
                    if (nonCritters == 0 && spawner.Objects.Count > 0)
                    {
                        // critters in town are also 'core'
                        if (IsTownRegion(spawner.Location, spawner.Map))
                            return true;
                    }
                }
            }

            return false;
        }
        private static string PatchSpawnerData(Spawner spawner)
        {
            if (spawner.Name == "Spawner")
                return "Area ??";
            else if (spawner.Name.ToLower().Contains("area"))
            {
                spawner.Source = spawner.Name.Replace("Spawner", "").Replace("  ", " ").Trim();
                spawner.Name = "Spawner";
                return spawner.Source;
            }
            else
                return "??";
        }
        #endregion HasCategorizedSpawners
        private static int HasPatchedStandardShardSpawners(int patchid)
        {   // Turn off all spawners tagged as Angel Island 'special'
            int patches = 0;
            PatchIndex bits = PatchIndex.HasPatchedStandardShardSpawners;
            if (!Patched(bits) && StandardShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to disable Angel Island spawners on standard shards. Patching...", ConsoleColor.Magenta);
                int patched = 0;
                foreach (Item item in World.Items.Values)
                {
                    if (item.Map != Map.Felucca) continue;
                    if (item is EventSpawner) continue;
                    if (item is Spawner spawner)
                    {
                        // based on our spawner/shard config, should this spawner be killed?
                        if (Spawner.ShouldShardEnable(spawner) == false)
                        {
                            patched++;
                            spawner.Running = false;
                            spawner.RemoveObjects();
                        }
                    }
                }
                EchoOut(String.Format("{0} spawners disabled.", patched), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);

                patches = patched;
            }

            return patches;
        }
        private static int HasPatchedTime(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.HasPatchedTime;
            // adam, 8/18/22
            // Summary: (HasPatchedTime)
            //  1. Converted all DateTime saved to UTC.
            //  2. Converted all DateTime read to Local
            //  Problem solved: 
            //  The server runs on a computer set as UTC
            //  Our local development machines us Local time
            //  If you move a Saves folder from the server to your local development machine, all saved DateTimes would be in UTC (would mess with debugging DateTime issues, e.g, expirations, etc.)
            //  By explicitly converting to/from UTC, we can safely move Saves from our server to local, and even from local to server. (should we even need to patch something locally.)
            //  HasPatchedTime:
            //  The first time the server is run, this bit will not be set, and all reads will read as Local time (the old default.)
            //  After the first run, (and a save to UTC) this bit will have been set (below). Once set, all future reads will be UTC
            //  When can we remove this code. After we have sufficient backups, we can remove the check in all DateTime *readers* after 9/15/22
            if (!Patched(bits) && AllShards())
            {
                EchoOut(String.Format("Patching all DateTime saves during this run session."), ConsoleColor.Magenta);
                patches++;

                SetDynamicPatch(bits);
                PatchComplete(bits, patchid);
            }

            return patches;
        }
        #endregion OLDER PATCHES
        #region AlwaysRun
        private static int AlwaysRunFirst(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.None;
            int patched = 0;

            #region Begin Implementation

            #region Delete all DeleteOnRestart items
            if (AllShards())
            {
                EchoOut("Run Always: Deleting all DeleteOnRestart items...", ConsoleColor.Yellow);
                foreach (Item item in World.Items.Values)
                    if (item.GetItemBool(ItemBoolTable.DeleteOnRestart))
                    {
                        item.Delete();
                        patched++;
                    }
            }
            #endregion Delete all DeleteOnRestart items

            #region Initialize Craftables Table
            if (AllShards())
            {
                EchoOut("Run Always: Initializing 'craftables' table...", ConsoleColor.Yellow);
                patched += CraftSystem.InitCraftTable();
            }
            #endregion Initialize Craftables Table

            #region Update Enable/disable temporarily modified spawners 
            if (Siege())
            {   // for this particular township, we disable all the Nerun's Distro spawners (full of monsters,) and enable friendly forest creatures.
                //  Should the township go away, this will be reversed.
                //  This mechanism can be expanded to have sets of spawners associated with a particular township. Currently it's hard-coded to a single township.
                #region Is the township still here?
                bool TownshipEstablished = false;
                Item witem = World.FindItem(0x400AB0FD); // just a Nerun's Distro Spawner near township
                if (witem is Spawner wspawner)
                {
                    Region tsr = TownshipRegion.Find(wspawner.Location, wspawner.Map);
                    if (tsr is TownshipRegion)
                        TownshipEstablished = true;
                    else
                        TownshipEstablished = false;
                }
                #endregion Is the township still here?

                #region Standard Shard Spawners
                // set these standard spawners to make this township a happy place
                List<Serial> standard_spawners = new() { 0x400AB0FD, 0x400AB0FC, 0x400AB0FE, 0x400AB0FF, 0x400AB100 };
                foreach (var serial in standard_spawners)
                {
                    Item item = World.FindItem(serial);
                    if (item is Spawner spawner)
                    {
                        System.Diagnostics.Debug.Assert(spawner.ModeNeruns == true);
                        if (spawner.Running == false && TownshipEstablished == false)
                        {   // enable
                            spawner.Running = true;
                            spawner.ScheduleRespawn = true;
                        }
                        else if (spawner.Running == true && TownshipEstablished == true)
                        {   // disable
                            spawner.ScheduleDespawn = true;
                            spawner.Running = false;
                        }
                    }
                }
                #endregion Standard Shard Spawners

                #region Custom Spawners
                // set these custom spawners to return this area to standard OSI
                List<Serial> custom_spawners = new() { 0x40041E7D, 0x40042327, 0x400422D6 };
                foreach (var serial in custom_spawners)
                {
                    Item item = World.FindItem(serial);
                    if (item is Spawner spawner)
                    {
                        System.Diagnostics.Debug.Assert(spawner.ModeNeruns == false);
                        if (spawner.Running == false && TownshipEstablished == true)
                        {   // enable
                            spawner.Running = true;
                            spawner.ScheduleRespawn = true;
                        }
                        else if (spawner.Running == true && TownshipEstablished == false)
                        {   // disable
                            spawner.ScheduleDespawn = true;
                            spawner.Running = false;
                        }
                    }
                }
                #endregion Custom Spawners
            }
            #endregion Update Enable/disable temporarily modified spawners 

            #region Allow 5 accounts on TC in debug mode
            if (AllShards() && Core.UOTC_CFG && Core.Debug)
            {
                CoreAI.MaxAccountsPerIP = 5;
                CoreAI.MaxConcurrentAddresses = 5;
                CoreAI.MaxAccountsPerMachine = 5;
                patched += 3;
            }
            #endregion Allow 5 accounts on TC in debug mode

            #endregion End Implementation

            EchoOut(String.Format("Run Always: {0} objects updated", patched), ConsoleColor.Magenta);
            PatchComplete(bits, patchid);
            patches = patched;
            return patches;
        }
        private static int AlwaysRunLast(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.None;
            int patched = 0;

            #region Begin Implementation

            #region 1 year veteran rewards - hued backpack
            if (Siege())
            {
                LogHelper logger = new LogHelper("1 year veteran rewards.log", overwrite: false, sline: true);
                foreach (var m in World.Mobiles.Values)
                    if (m is PlayerMobile pm && pm.AccessLevel == AccessLevel.Player)
                        if (pm.Backpack != null)
                            try
                            {
                                Accounting.Account acct = (pm.Account as Accounting.Account);
                                if (DateTime.UtcNow - acct.Created >= TimeSpan.FromDays(365))
                                {
                                    if (pm.GetPlayerBool(PlayerBoolTable.OneYearVeteranReward) == false)
                                    {
                                        pm.SetPlayerBool(PlayerBoolTable.OneYearVeteranReward, true);

                                        if (pm.Backpack.Hue == 0)
                                            pm.Backpack.Hue = pm.RewardHue;
                                        else
                                            ; // we will patch their backpack

                                        logger.Log(string.Format("{0} received hue {1} for {2:0.##} days of play", pm, pm.Backpack.Hue, (DateTime.UtcNow - acct.Created).TotalDays));
                                    }
                                }
                            }
                            catch { }

                logger.Finish();
            }
            #endregion 1 year veteran rewards - hued backpack

            #region Relocate Spawners
            if (AllShards())
            {
                EchoOut("Run Always: Relocation spawners...", ConsoleColor.Yellow);
                foreach (Item item in World.Items.Values)
                    if (item is Spawner spawner)
                    {
                        // don't check Running here as we just want the spawner to relocate itself if it is under a house
                        spawner.Defrag();
                        patched++;
                    }
            }
            #endregion Relocate Spawners

            #region Send 'Int Map' template mobiles, items, and loot packs to the internal map
            if (AllShards())
            {
                EchoOut("Run Always: Send 'Int Map' template mobiles, items, and loot packs to the internal map...", ConsoleColor.Yellow);
                patched += DoIntMap();
            }
            #endregion Send 'Int Map' template mobiles, items, and loot packs to the internal map

            #region Delete and redeed any preview addons that were picked up by a save
            if (AllShards())
            {
                EchoOut("Run Always: Delete and redeed any preview addons that were picked up by a save...", ConsoleColor.Yellow);
                patched += CleanupPreviewAddons();
            }
            #endregion Delete and redeed any preview addons that were picked up by a save

            #region Apply any spawner patches
            patches += ApplySpawnerUpdates(0);
            #endregion Apply any spawner patches

            #region Cleanup Global Linker Database
            patched += CleanupGlobalLinkerDatabase();
            #endregion Cleanup Global Linker Database

            #region Cleanup non-null/internal maps for items/mobiles stashed at 0,0
            patched += FeluccaMap00Check(0);
            #endregion Cleanup non-null/internal maps for items/mobiles stashed at 0,0

            #region Cleanup Homeless BaseVendors
            patched += HasDeletedHomelessBaseVendors(0);
            #endregion Cleanup Homeless BaseVendors

            #region Return "In Memoriam" players to the world
            if (AllShards())
            {
                foreach (var m in World.Mobiles.Values)
                    if (m is PlayerMobile pm && pm.GetPlayerBool(PlayerBoolTable.InMemoriam))
                    {
                        pm.Blessed = true;
                        pm.CantWalkLand = true;                         // just in case, heh
                        pm.Frozen = true;
                        pm.Direction = Direction.South;
                        pm.MoveToWorld(pm.LogoutLocation, Map.Felucca); // will need to update if we ever support other facets
                    }
            }
            #endregion Return "In Memoriam" players to the world

            #endregion End Implementation

            EchoOut(String.Format("Run Always: {0} objects updated", patched), ConsoleColor.Magenta);
            PatchComplete(bits, patchid);
            patches = patched;
            return patches;
        }
        private static int CleanupGlobalLinkerDatabase()
        {
            int patched = 0;

            if (AllShards())
            {
                EchoOut("Run Always: Updating link information. Slow...", ConsoleColor.Yellow);
                List<Mobile> mobiles_that_are_linked = new();
                List<Item> items_that_are_linked = new();
                List<IEntity> objects_that_are_linked = new();
                // build lists of all the items and mobiles that are linked to
                foreach (Item item in World.Items.Values)
                {
                    if (item is ITrigger || item is ITriggerable)
                    {
                        mobiles_that_are_linked.AddRange(Utility.GetLinksFrom(item, typeof(Mobile)).Cast<Mobile>().ToList());
                        items_that_are_linked.AddRange(Utility.GetLinksFrom(item, typeof(Item)).Cast<Item>().ToList());
                        objects_that_are_linked.AddRange(Utility.GetLinksFrom(item, typeof(IEntity)).Cast<IEntity>().ToList());
                    }
                    else if (item is Spawner spawner)
                    {
                        if (spawner.Objects != null)
                            foreach (object o in spawner.Objects)
                                if (o is Mobile mobile && mobile.GetMobileBool(Mobile.MobileBoolTable.IsLinked))
                                    mobiles_that_are_linked.Add(mobile);
                                else if (o is Item sitem && item.GetItemBool(ItemBoolTable.IsLinked))
                                    items_that_are_linked.Add(sitem);
                    }
                }
                mobiles_that_are_linked = mobiles_that_are_linked.Distinct().ToList();
                items_that_are_linked = items_that_are_linked.Distinct().ToList();

                foreach (var ent in objects_that_are_linked)
                    if (ent is Item)
                    {
                        if (!items_that_are_linked.Contains(ent as Item))
                            items_that_are_linked.Add(ent as Item);
                    }
                    else if (ent is Mobile)
                    {
                        if (!mobiles_that_are_linked.Contains(ent as Mobile))
                            mobiles_that_are_linked.Add(ent as Mobile);
                    }

                // now, loop through items and mobiles and unset their 'linked' bit if they are no longer linked to
                foreach (Item item in World.Items.Values)
                    if (!items_that_are_linked.Contains(item))                                          // this item is linked
                        if (item.Spawner != null && items_that_are_linked.Contains(item.Spawner))       // if it's on a linked spawner, ignore it
                            continue;
                        else if (item.GetItemBool(ItemBoolTable.IsLinked))                              // if it's linked
                        {   // unlink
                            item.SetItemBool(ItemBoolTable.IsLinked, false);                            // unlink it
                            patched++;
                        }


                foreach (Mobile mob in World.Mobiles.Values)
                    if (!mobiles_that_are_linked.Contains(mob))                                         // this mobile is linked
                        if (mob.Spawner != null && items_that_are_linked.Contains(mob.Spawner))         // if it's on a linked spawner, ignore it
                            continue;
                        else if (mob.GetMobileBool(Mobile.MobileBoolTable.IsLinked))                    // if it's linked
                        {   // unlink
                            mob.SetMobileBool(Mobile.MobileBoolTable.IsLinked, false);                  // unlink it
                            patched++;
                        }
            }

            return patched;
        }
        private static int CleanupPreviewAddons()
        {
            int patched = BaseAddon.ImpliedPreviewCancelation();

            return patched;
        }
        private static int DoIntMap()
        {
            int patched = 0;
            #region Begin Implementation

            #region Clean up the mess created by staff storing template mobiles, items, and loot packs on the map
            {
                foreach (Item item in World.Items.Values)
                    if (item is Spawner spawner)
                    {
                        if (spawner.TemplateInternalize == false)
                        { spawner.TemplateInternalize = true; patched++; }
                        if (spawner.TemplateMobile != null && spawner.TemplateMobile.Map != Map.Internal)
                        { spawner.TemplateMobile.MoveToIntStorage(); patched++; }
                        if (spawner.TemplateItem != null && spawner.TemplateItem.Map != Map.Internal)
                        { spawner.TemplateItem.MoveToIntStorage(); patched++; }
                        if (spawner.LootPack != null && spawner.LootPack.Map != Map.Internal)
                        { spawner.LootPack.MoveToIntStorage(); patched++; }
                        if (spawner.ArtifactPack != null && spawner.ArtifactPack.Map != Map.Internal)
                        { spawner.ArtifactPack.MoveToIntStorage(); patched++; }
                    }
            }
            #endregion Clean up the mess created by staff storing template mobiles, items, and loot packs on the map

            #endregion End Implementation

            return patched;
        }
        #endregion
        #region ApplySpawnerUpdates
        /// <summary>
        /// While building Mortalis/Siege, we discovered AISpecial spawners tagged as 'Core'
        ///     this happens because our original patching can't know if say Copper Elementals belong in the first level of Shame.
        ///     We now have a world building command [AISpecial we can use on such spawners to reclassify them as AISpecial.
        ///     Also, our [ClassicRespawn command (SpawnerManagement) updates this file. (obviates the explicit use of [AISpecial)
        ///     These updates will be written to "definitive spawner list patch.cfg" and saved (and checked in to) the Data folder.
        ///     When the (AI) server starts, it checks this file to apply any needed patches.
        /// </summary>
        /// <returns></returns>
        private static int ApplySpawnerUpdates(int patchid)
        {
            int patches = 0;
            PatchIndex bits = PatchIndex.None;
            if (AngelIsland())
            {
                EchoOut("Run Always: Applying spawner patches...", ConsoleColor.Yellow);
                int patched = 0;
                List<SpawnerPatch> list = CompilePatches();                   // compile the patch table
                if (list.Count > 0)
                    if (System.IO.File.Exists(Path.Combine(Core.DataDirectory, "Patches", "definitive spawner list patch.cfg")))
                        foreach (Item item in World.Items.Values)
                        {
                            if (item is not Spawner spawner) continue;
                            if (spawner is EventSpawner) continue;
                            if (spawner.Map != Map.Felucca) continue;
                            foreach (SpawnerPatch patch in list)
                            {
                                if (spawner.Serial != patch.Serial) continue;
                                // apply the patch
                                patches++;
                                spawner.CoreSpawn = patch.CoreSpawn;
                                spawner.Source = patch.UOSpawnMap;
                                spawner.Shard = patch.Shard;
                            }
                        }
                EchoOut(String.Format("{0} spawner patches applied.", patched), ConsoleColor.Yellow);
                PatchComplete(bits, patchid);
                patches = patched;
            }

            return patches;
        }
        public class SpawnerPatch
        {
            public Serial Serial;
            public bool CoreSpawn;
            public string UOSpawnMap;
            public ShardConfig Shard;
            public SpawnerPatch(Serial serial, bool coreSpawn, string uOSpawnMap, ShardConfig shard)
            {
                Serial = serial;
                CoreSpawn = coreSpawn;
                UOSpawnMap = uOSpawnMap;
                Shard = shard;
            }
        }
        private static List<SpawnerPatch> CompilePatches()
        {
            List<SpawnerPatch> list = new();
            // ("{0}:{1}:{2}:{3}", spawner.Serial, spawner._CoreSpawn, spawner._UOSpawnMap, spawner._Shard)
            foreach (string line in System.IO.File.ReadLines(Path.Combine(Core.DataDirectory, "Patches", "definitive spawner list patch.cfg")))
            {
                if (string.IsNullOrEmpty(line)) continue;

                string[] tokens = line.Split(new char[] { ':' });
                UInt32 serial = 0;
                bool core = false;
                string uospawnmap = string.Empty;
                UInt32 shardConfig = 0;
                if (UInt32.TryParse(tokens[0], System.Globalization.NumberStyles.Integer, null, out serial))
                {
                    if (bool.TryParse(tokens[1].ToLower(), out core))
                        if (UInt32.TryParse(tokens[3], System.Globalization.NumberStyles.Integer, null, out shardConfig))
                            list.Add(new SpawnerPatch((Serial)(int)serial, core, tokens[2], (ShardConfig)shardConfig));
                }
            }

            return list;
        }
        #endregion ApplySpawnerUpdates
        private static int ConsoleCaptureOn()
        {
            List<string> lines = new();
            string filename = "deco_delete.txt";
            string pathName = Path.Combine(Core.BaseDirectory, "Logs", filename);
            if (System.IO.File.Exists(pathName))
                foreach (String line in System.IO.File.ReadAllLines(pathName))
                    lines.Add(line);
            return lines.Count;
        }
        private static int ConsoleCaptureOff(int index)
        {
            List<string> lines = new();
            string filename = "deco_delete.txt";
            string pathName = Path.Combine(Core.BaseDirectory, "Logs", filename);
            if (System.IO.File.Exists(pathName))
                foreach (String line in System.IO.File.ReadAllLines(pathName))
                    lines.Add(line);

            int patched = 0;
            if (lines.Count > index)
                for (int ix = index; ix < lines.Count; ix++)
                    if (lines[ix].Contains("Deleting a 0x") && lines[ix].Contains("(teleporter)"))
                        patched++;

            return patched;
        }
        private static int FeluccaMap00Check(int patchid)
        {
            int patched = 0;
            PatchIndex bits = PatchIndex.None;
            if (AllShards())
            {//TODO:
                EchoOut("Run Always: Checking for mobiles & items at map 0,0...", ConsoleColor.Yellow);
                //adam: issue a warning if we find junk at map location 0 0
                #region Relocating / Deleting objects at Felucca 0,0
                IPooledEnumerable eable = Map.Felucca.GetObjectsInRange(new Point3D(0, 0, 0), 1);
                List<object> toMove = new List<object>();
                foreach (object obj in eable)
                {
                    Point3D spawnerLoc = Point3D.Zero;
                    if (obj is Mobile m) { spawnerLoc = m.SpawnerLocation; }
                    if (obj is Item i) { spawnerLoc = i.Spawner != null ? i.Spawner.Location : Point3D.Zero; }
                    EchoOut(string.Format("Warning: {0} found at {1} with a spawner located at {2}", obj, new Point3D(0, 0, 0), spawnerLoc == Point3D.Zero ? "-none-" : spawnerLoc), ConsoleColor.Yellow);
                    if (obj is Mobile mWrongMap && mWrongMap.Map == Map.Felucca && mWrongMap.IsIntMapStorage)
                    {
                        EchoOut(string.Format("Note: IsIntMapStorage (template) mobile {0} found on wrong map. Relocating...", obj), ConsoleColor.Yellow);
                        toMove.Add(obj);
                        patched++;
                    }
                    else if (obj is Item iWrongMap && iWrongMap.Map == Map.Felucca && iWrongMap.IsIntMapStorage)
                    {
                        EchoOut(string.Format("Note: IsIntMapStorage (template) item {0} found on wrong map. Relocating...", obj), ConsoleColor.Yellow);
                        toMove.Add(obj);
                        patched++;
                    }
                    else
                    {
                        EchoOut(string.Format("Deleting and Logging: {0}", obj), ConsoleColor.Yellow);
                        string output = string.Format("Deleting FeluccaMap object {0} from map 0,0 with a spawner located at {1}", obj, spawnerLoc == Point3D.Zero ? "-none-" : spawnerLoc);
                        LogHelper logger = new LogHelper("FeluccaMap00Delete.log", false);
                        logger.Log(LogType.Text, output);
                        logger.Log(LogType.Mixed, obj);
                        logger.Finish();
                        patched++;
                    }
                }
                eable.Free();
                foreach (object obj in toMove)
                {
                    if (obj is Mobile mWrongMap && mWrongMap.Map == Map.Felucca && mWrongMap.IsIntMapStorage)
                    {
                        mWrongMap.Map = Map.Internal;
                        patched++;
                    }
                    else if (obj is Item iWrongMap && iWrongMap.Map == Map.Felucca && iWrongMap.IsIntMapStorage)
                    {
                        iWrongMap.Map = Map.Internal;
                        patched++;
                    }
                }
                #endregion Relocating / Deleting objects at Felucca 0,0
                EchoOut(String.Format("{0} objects handled.", patched), ConsoleColor.Yellow);
                PatchComplete(bits, patchid);
            }
            return patched;
        }
        public static void EventSink_ServerStarted()
        {
            ConsoleOutEcho = Path.Combine(Core.LogsDirectory, "ConsoleHistory.log");
            Utility.TimeCheck tc = new Utility.TimeCheck();
            tc.Start();

            try
            {
                int patches = 0;
                patches += HasPatchedTime(m_PatchID++);

                patches += HasTotalRespawn(m_PatchID++);    // must be last patch

                if (patches == 0)
                    EchoOut(String.Format("No special 'ServerStarted' patching required."), ConsoleColor.Magenta);
            }
            catch (Exception ex)
            {
                LogHelper.LogException(ex);
            }
            finally
            {
                ConsoleOutEcho = null;
            }

            tc.End();
            System.Console.WriteLine("Patcher2 completed in {0}", tc.TimeTaken);

        }
        private static int HasTotalRespawn(int patchid)
        {   // respawn the world now
            int patches = 0;
            PatchIndex bits = PatchIndex.HasTotalRespawn;
            if (!Patched(bits) && AllShards())
            {
                LogPatch(bits);
                EchoOut("One-time patch to respawn the world. Respawning...", ConsoleColor.Magenta);
                int patched = 0;

                List<Spawner> spawners = new();
                double nextspawn = 0.5;
                foreach (Item item in World.Items.Values)
                {
                    if (item is Spawner s && s.Deleted == false && s.Running)
                    {
                        // based on our spawner/shard config, should this spawner be respawned?
                        if (Spawner.ShouldShardEnable(s))
                        {
                            patched++;
                            s.ScheduleRespawn = true;
                        }
                    }
                }

                EchoOut(String.Format("{0} Spawners scheduled. Spawning will complete in {1:0.00} seconds.", patched, nextspawn), ConsoleColor.Magenta);
                PatchComplete(bits, patchid);

                patches = patched;
            }

            return patches;
        }

        #region Tools
        private static bool SetSpawnerFlags(Point3D px, SpawnFlags flags)
        {
            Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
            if (spawner != null)
            {
                spawner.SpawnerFlags |= flags;
            }

            return (spawner != null);
        }
        private static bool AddTriggerSpawner(Point3D px, uint key, List<string> creatures, bool coreSpawn, ref TriggerSpawner spawner, int count = 1, int homeRange = 4, bool force = false)
        {
            spawner = (TriggerSpawner)FindOneItemAt(px, Map.Felucca, typeof(TriggerSpawner), 2, false);
            if (spawner == null || force == true)
            {
                spawner = new(key);

                // reclassify here as 'all shards'
                if (coreSpawn)
                    UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: coreSpawn,
                        uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                spawner.Count = count;
                spawner.HomeRange = homeRange;
                foreach (string mob in creatures)
                    spawner.ObjectNamesRaw.Add(mob);
                spawner.MoveToWorld(px, Map.Felucca);
            }

            return (spawner != null);
        }
        private static bool AddSpawner(Point3D px, List<string> creatures, bool coreSpawn, ref Spawner spawner, int count = 1, int homeRange = 4, bool force = false)
        {
            spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
            if (spawner == null || force == true)
            {
                spawner = new();

                // reclassify here as 'all shards'
                if (coreSpawn)
                    UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: coreSpawn,
                        uOSpawnMap: "AISpecial", shardConfig: ShardConfig.AllShards);

                spawner.Count = count;
                spawner.HomeRange = homeRange;
                foreach (string mob in creatures)
                    spawner.ObjectNamesRaw.Add(mob);
                spawner.MoveToWorld(px, Map.Felucca);
                spawner.Running = true;
                spawner.ScheduleRespawn = true;
            }

            return (spawner != null);
        }
        private static bool MakeSpawnerPermanent(Point3D px, ref Spawner new_spawner)
        {
            EventSpawner event_spawner = (EventSpawner)FindOneItemAt(px, Map.Felucca, typeof(EventSpawner), 2, false);
            new_spawner = null;
            if (event_spawner != null)
            {
                new_spawner = new Spawner();
                CopyPropertyIntersection(dest: new_spawner, src: event_spawner);
                if (new_spawner != null)
                {
                    new_spawner.MoveToWorld(px, event_spawner.Map);
                    event_spawner.Delete();
                }
            }

            return (event_spawner != null && new_spawner != null);
        }
        private static bool MakeTeleporterPermanent(Point3D px, ref Teleporter new_tele)
        {
            EventTeleporter event_tele = (EventTeleporter)FindOneItemAt(px, Map.Felucca, typeof(EventTeleporter), 2, false);
            new_tele = null;
            if (event_tele != null)
            {
                new_tele = new Teleporter();
                CopyPropertyIntersection(dest: new_tele, src: event_tele);
                if (new_tele != null)
                {
                    new_tele.MoveToWorld(px, event_tele.Map);
                    event_tele.Delete();
                }
            }

            return (event_tele != null && new_tele != null);
        }
        private static bool DeleteSpawner(Point3D px)
        {
            Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
            if (spawner != null)
            {
                spawner.RemoveObjects();
                spawner.Delete();
            }

            return (spawner != null);
        }
        private static bool ScheduleRespawn(Spawner spawner)
        {
            if (spawner != null)
            {
                spawner.RemoveObjects();
                spawner.ScheduleRespawn = true;
            }

            return (spawner != null);
        }
        private static bool DeleteTeleporter(Point3D px)
        {
            Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter));
            if (tele != null)
            {
                tele.Delete();
            }

            return (tele != null);
        }
        private static bool DeleteItem(Point3D px)
        {
            Item item = (Item)FindOneItemAt(px, Map.Felucca, typeof(Item));
            if (item != null)
            {
                item.Delete();
            }

            return (item != null);
        }
        private static bool HideItem(Point3D px)
        {
            Item item = (Item)FindOneItemAt(px, Map.Felucca, typeof(Item), 2, false);
            bool bWasVisible = false;
            if (item != null && item.Visible)
            {
                bWasVisible = true;
                item.Visible = false;
            }

            return (item != null && bWasVisible);
        }
        private static bool DupeSpawner(Point3D at, Point3D to, ref Spawner sr)
        {
            Spawner spawner = (Spawner)FindOneItemAt(at, Map.Felucca, typeof(Spawner), 2, false);
            Spawner new_spawner = null;
            if (spawner != null)
            {
                new_spawner = (Spawner)Utility.Dupe(spawner);
                if (new_spawner != null)
                {
                    new_spawner.MoveToWorld(to, spawner.Map);
                    sr = new_spawner;
                }
            }

            return (spawner != null && new_spawner != null);
        }
        private static bool EnableSpawner(Point3D px, ref Spawner spawner, string designation = null)
        {
            spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
            return EnableSpawner(ref spawner, designation);
        }
        private static bool EnableSpawner(ref Spawner spawner, string designation = null)
        {
            if (spawner != null)
            {
                // reclassify here as 'all shards'
                UpdateSpawnerDesignationaAndLog(spawner, coreSpawn: false,
                    uOSpawnMap: designation != null ? designation : spawner.Source, shardConfig: ShardConfig.AllShards);

                spawner.Running = true;
                spawner.ScheduleRespawn = true;
            }

            return (spawner != null);
        }
        private static bool DisableTeleporter(Point3D px)
        {
            Teleporter tele = (Teleporter)FindOneItemAt(px, Map.Felucca, typeof(Teleporter), 2, false);
            if (tele is Teleporter)
                tele.Running = false;
            return (tele != null);
        }
        private static bool DisableSpawner(Point3D px)
        {
            Spawner spawner = (Spawner)FindOneItemAt(px, Map.Felucca, typeof(Spawner), 2, false);
            return DisableSpawner(spawner);
        }
        private static bool DisableSpawner(Spawner spawner)
        {
            if (spawner != null)
            {
                spawner.Running = false;
                spawner.RemoveObjects();
            }

            return (spawner != null);
        }
        private static bool MoveSpawner(Point3D old_location, Point3D new_location, ref Spawner spawner)
        {
            spawner = (Spawner)FindOneItemAt(old_location, Map.Felucca, typeof(Spawner), 2, false);
            if (spawner != null)
            {
                spawner.Location = new_location;
            }

            return (spawner != null);
        }
        private static bool MoveItem(Point3D old_location, Point3D new_location)
        {
            Item item = (Item)FindOneItemAt(old_location, Map.Felucca, typeof(Item), 2, false);
            if (item != null)
            {
                item.Location = new_location;
            }

            return (item != null);
        }
        #endregion Tools

        #region Utility functions
        private static bool Patched(PatchIndex bits)
        {
            // PatchIndex.None is reserved for repeated patching
            return bits == PatchIndex.None ? false : CoreAI.IsDynamicPatchSet(bits);
        }
        private static bool TestCenter(bool quiet = false) { if (!quiet) return Patching(Core.RuleSets.TestCenterRules()); else return Core.RuleSets.TestCenterRules(); }
        private static bool Siege(bool quiet = false) { if (!quiet) return Patching(Core.RuleSets.SiegeRules()); else return Core.RuleSets.SiegeRules(); }
        private static bool AngelIsland(bool quiet = false) { if (!quiet) return Patching(Core.RuleSets.AngelIslandRules()); else return Core.RuleSets.AngelIslandRules(); }
        private static bool Mortalis(bool quiet = false) { if (!quiet) return Patching(Core.RuleSets.MortalisRules()); else return Core.RuleSets.MortalisRules(); }
        private static bool Renaissance(bool quiet = false) { if (!quiet) return Patching(Core.RuleSets.RenaissanceRules()); else return Core.RuleSets.RenaissanceRules(); }
        private static bool LoginServer(bool quiet = false) { if (!quiet) return Patching(Core.RuleSets.LoginServerRules()); else return Core.RuleSets.LoginServerRules(); }
        private static bool TestCenterShards(bool quiet = false)
        {
            if (Core.RuleSets.TestCenterRules())
                return TestCenter(quiet);
            else
                return false;
        }
        private static bool SiegeStyleShards(bool quiet = false)
        {
            if (Core.RuleSets.SiegeRules())
                return Siege(quiet);
            else if (Core.RuleSets.MortalisRules())
                return Mortalis(quiet);
            else
                return false;
        }
        private static bool StandardShards(bool quiet = false)
        {
            if (Core.RuleSets.SiegeRules())
                return Siege(quiet);
            else if (Core.RuleSets.MortalisRules())
                return Mortalis(quiet);
            if (Core.RuleSets.RenaissanceRules())
                return Renaissance(quiet);
            else
                return false;
        }
        private static bool AllShards() { EchoOut("Patching all shards.", ConsoleColor.Green); return true; }
        private static void LogPatch(PatchIndex bits)
        {
            // record the patch
            using (StreamWriter sw = File.AppendText(m_pathName))
            {
                sw.WriteLine(string.Format("{0}: patching...",
                    Enum.GetName(typeof(PatchIndex), bits)));
            }
        }
        private static void PatchComplete(PatchIndex bits, int patchid, bool timeUnknown = false)
        {
            // PatchIndex.None is a special flag that runs each and every server restart. Usually 
            //  to cleanup map (0,0) and other common errors
            if (bits != PatchIndex.None)
                SetDynamicPatch(bits);
            string l1 = String.Format(string.Format("Patch {0} complete. {1}", patchid,
                timeUnknown ? DateTime.MinValue : AdjustedDateTime.GameTime));
            string l2 = String.Format("===========================");
            EchoOut(l1, ConsoleColor.Green, echo: false);
            EchoOut(l2, ConsoleColor.Green, echo: false);
            using (StreamWriter sw = File.AppendText(m_pathName))
            {
                sw.WriteLine(string.Format("{0}: Complete on {1}",
                    GetPatchName(bits),
                    timeUnknown ? DateTime.MinValue : AdjustedDateTime.GameTime));
                sw.WriteLine(l2);
            }
        }
        private static string GetPatchName(PatchIndex bits)
        {
            return Enum.GetName(typeof(PatchIndex), bits);
        }
        private static bool Patching(bool shards)
        {
            // format for the screen
            {
                bool wasmuted = m_muted;
                if (wasmuted) Unmute();
                if (shards)
                {
                    if (Core.RuleSets.StandardShardRules())
                        EchoOut("Patching Siege, Mortalis, and Renaissance.", ConsoleColor.Green);
                    else if (Core.RuleSets.AngelIslandRules())
                        EchoOut("Patching Angel Island.", ConsoleColor.Green);
                    else
                        ;
                }
                if (wasmuted) Mute();
            }
            return shards;
        }
        private static void EchoOut(string text, ConsoleColor color, bool echo = true)
        {
            ConsoleWriteLine(text, color);
            if (echo)
                using (StreamWriter sw = File.AppendText(m_pathName))
                {
                    sw.WriteLine(string.Format("{0}", text));
                }
        }
        private static void ErrorOut(PatchIndex bits, string text, ConsoleColor color, object o = null)
        {
            Utility.ErrorOut(text, color, o);
            using (StreamWriter sw = File.AppendText(m_pathName))
            {
                sw.WriteLine(string.Format("{0}: {1} {2}", Enum.GetName(typeof(PatchIndex), bits),
                    text, o));
            }
        }
        private static bool m_muted = false;
        private static string m_pathName = Path.Combine(Core.LogsDirectory, "PatchHistory.log");
        #endregion Utility functions
    }
}