/***************************************************************************
 *
 *   RunUO                   : May 1, 2002
 *   portions copyright      : (C) The RunUO Software Team
 *   email                   : info@runuo.com
 *   
 *   Angel Island UO Shard   : March 25, 2004
 *   portions copyright      : (C) 2004-2024 Tomasello Software LLC.
 *   email                   : luke@tomasello.com
 *
 ***************************************************************************/

/***************************************************************************
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 ***************************************************************************/

/* Engines/Email/smtp.cs
 * CHANGELOG:
 *  3/10/22, Adam (IsValidEmail)
 *      Add a new and more robust email address checker IsValidEmail()
 *	9/8/08, Adam
 *		- normalize all weird newline combos
 *		- use GetEnvironmentVariable to get SMTP password
 *  12/24/06, Adam
 *      Add new static CheckEmailAddy() to validate an email address
 *  11/18/06, Adam
 *      Update to new .NET 2.0 email services
 *	11/8/06, Adam
 *		Add a bit of debug output
 *	11/7/06, Adam
 *		Copy attachments over to the email object
 *	11/3/06, Adam
 *		Go back to using Collaborative Data Object (CDO) for SMTP send in an attempt
 *			to resolve mail that is rejected by Yahoo and some other very picky servers.
 *			Also, stop relaying the email, and instead authenticate to a 'real' account (not an alias.)
 *	6/24/06, Adam
 *		Update header 'Date' field to us the RFC 1123 Pattern
 *	2/2/06, Adam
 *		Add a new constructor: 
 *			public bool Send(MailMessage message)
 *	1/31/06, Adam
 *		Initial Version
 *		From a modified version of this software by Dr. Peter Bromberg
 *		http://www.eggheadcafe.com/articles/20030316.asp
 */

/* You will need to set these environment variables for email to work on your system
 * More information: https://www.codeproject.com/Tips/520998/Send-Email-from-Yahoo-GMail-Hotmail-Csharp
 * AI.NOREPLY.PASSWORD = (your email password. For this I use an AppPassword generated by Google)
 * AI.NOREPLY.ADDRESS = example: noreply@game-master.net
 * AI.EMAIL.HOST = example: smtp.gmail.com
 * AI.EMAIL.USER = example: luke.tomasello@gmail.com
 * AI.EMAIL.HOST.PORT = 587
 * AI.EMAIL.ACCOUNTING = example: aiaccounting@game-master.net	// new account created etc.
 * AI.EMAIL.ANNOUNCEMENTS = announcements@game-master.net		// announce shard wide events
 * AI.EMAIL.DEVNOTIFY = devnotify@game-master.net				// sent on server crash
 * AI.EMAIL.DISTLIST.PASSWORD = (your email password. For this I use an AppPassword generated by Google)
 * AI.EMAIL.SHARDOWNER = (example: luke.tomasello@gmail.com)
 */

//using System.Collections.Generic;   // Emailer
using Server.Accounting;            // Emailer
using Server.Diagnostics;
using System;
using System.Linq;
using System.Net.Mail;
using System.Net.Mime;


namespace Server.SMTP
{
    /// <summary>
    /// provides methods to send email via smtp direct to mail server
    /// </summary>
    public class SmtpDirect
    {
        /// <summary>
        /// Get / Set the name of the SMTP mail server
        /// </summary>

        public SmtpDirect()
        {
            // nada			
        }

        public static string FromEmailAddress
        {
            get { return Environment.GetEnvironmentVariable("AI.NOREPLY.ADDRESS"); }
        }

        public static string CCEmailAddress
        {
            get { return Environment.GetEnvironmentVariable("AI.EMAIL.ACCOUNTING"); }
        }

        public static string Server
        {
            //get { return "mail.game-master.net"; }
            get { return Environment.GetEnvironmentVariable("AI.EMAIL.HOST"); }
        }

        public static Attachment MailAttachment(string file)
        {
            // Create  the file attachment for this e-mail message.
            Attachment data = new Attachment(file);
            // Add time stamp information for the file.
            ContentDisposition disposition = data.ContentDisposition;
            disposition.CreationDate = System.IO.File.GetCreationTime(file);
            disposition.ModificationDate = System.IO.File.GetLastWriteTime(file);
            disposition.ReadDate = System.IO.File.GetLastAccessTime(file);
            return data;
        }

        // check the from of this address or list.
        // Under the message.to.Add is a call to System.Net.Mime.MailBnfHelper() which
        //  which validates the form
        public static bool CheckEmailAddy(string address, bool AllowList)
        {
            try
            {
                if (AllowList == false)
                {
                    if (address.IndexOf(',') >= 0 || address.IndexOf(';') >= 0)
                        return false;

                    if (IsValidEmail(address) == false)
                        return false;
                }

                MailMessage message = new MailMessage();
                message.To.Add(SmtpDirect.ClassicList(address));
            }
            catch
            {   // bad format
                return false;
            }
            // good form
            return true;
        }
        public static bool IsValidEmail(string email)
        {
            if (!MailAddress.TryCreate(email, out var mailAddress))
                return false;

            // And if you want to be more strict:
            var hostParts = mailAddress.Host.Split('.');
            if (hostParts.Length == 1)
                return false; // No dot.
            if (hostParts.Any(p => p == string.Empty))
                return false; // Double dot.
            if (hostParts[^1].Length < 2)
                return false; // TLD only one letter.

            if (mailAddress.User.Contains(' '))
                return false;
            if (mailAddress.User.Split('.').Any(p => p == string.Empty))
                return false; // Double dot or dot at end of user part.

            return true;
        }
        // convert a normal semicolon delimited list of emails addresses...
        public static string ClassicList(string list)
        {
            while (list.IndexOf(' ') > -1)
                list = list.Remove(list.IndexOf(' '), 1);
            list = list.Replace(';', ',');
            return list;
        }

        public bool SendEmail(string toAddress, string subject, string body, bool ccRegistration)
        {
            if (Server == null || FromEmailAddress == null)
                return false;

            MailMessage message = new MailMessage();
            try
            {
                message.To.Add(SmtpDirect.ClassicList(toAddress));
                message.From = new MailAddress(FromEmailAddress);

                if (ccRegistration && CCEmailAddress.Length != 0)
                    message.CC.Add(SmtpDirect.ClassicList(CCEmailAddress));
            }
            catch (Exception ex)
            {   // you should be calling CheckEmailAddy() first to avoid this error
                LogHelper.LogException(ex);
                return false;
            }

            message.Subject = subject;
            message.Body = body;

            return Send(message);
        }

        public bool SendEmail(MailMessage message)
        {
            return Send(message);
        }

        public bool Send(MailMessage message)
        {
            bool result = false;
            try
            {
                Console.WriteLine("Email: To: {0} Subject: \"{1}\"",
                message.To.ToString() != null ? message.To.ToString() : "(null)",
                message.Subject.ToString() != null ? message.Subject.ToString() : "(null)");
                result = _Send(message);
            }
            // error has already been handled
            catch (Exception ex) { EventSink.InvokeLogException(new LogExceptionEventArgs(ex)); }

            if (result == true)
                Console.WriteLine("Email: Send ok.");
            else
                Console.WriteLine("Email: Send failed.");

            return result;
        }

        private bool _Send(MailMessage message)
        {
            try
            {
                // normalize all weird newline combos
                message.Body = message.Body.Replace("\r\n", "$n$"); // good => meta
                message.Body = message.Body.Replace("\r", "$n$");   // bad => meta
                message.Body = message.Body.Replace("\n", "$n$");   // bad => meta
                message.Body = message.Body.Replace("$n$", "\r\n"); // meta => good

                string password = Environment.GetEnvironmentVariable("AI.NOREPLY.PASSWORD");
                if (password == null || password.Length == 0)
                    throw new ApplicationException("the SMTP password is not set.");

                SmtpClient client = new SmtpClient(Server);
                client.Credentials = new System.Net.NetworkCredential(Environment.GetEnvironmentVariable("AI.EMAIL.USER"), password);
                client.EnableSsl = true;
                try { client.Port = Int32.Parse(Environment.GetEnvironmentVariable("AI.EMAIL.HOST.PORT")); }
                catch { throw new ApplicationException("the SMTP port is not set."); }
                client.Send(message);
                return true;
            }
            catch (System.Net.Sockets.SocketException se)
            {
                LogHelper.LogException(se);
                Console.WriteLine("Caught SocketException: {0}", se.Message);
                Console.WriteLine(se.StackTrace);
                return false;
            }
            catch (System.Exception e)
            {
                LogHelper.LogException(e);
                Console.WriteLine("Caught Exception: {0}", e.Message);
                Console.WriteLine(e.StackTrace);
                return false;
            }

        }
    }
}


/* You will need to set these environment variables for email to work on your system
 * More information: https://www.codeproject.com/Tips/520998/Send-Email-from-Yahoo-GMail-Hotmail-Csharp
 * AI.NOREPLY.PASSWORD = (your email password. For this I use an AppPassword generated by Google)
 * AI.NOREPLY.ADDRESS = example: noreply@game-master.net
 * AI.EMAIL.HOST = example: smtp.gmail.com
 * AI.EMAIL.USER = example: luke.tomasello@gmail.com
 * AI.EMAIL.HOST.PORT = 587
 * AI.EMAIL.ACCOUNTING = example: aiaccounting@game-master.net	// new account created etc.
 * AI.EMAIL.ANNOUNCEMENTS = announcements@game-master.net		// announce shard wide events
 * AI.EMAIL.DEVNOTIFY = devnotify@game-master.net				// sent on server crash
 * AI.EMAIL.DISTLIST.PASSWORD = (your email password. For this I use an AppPassword generated by Google)
 */
namespace Server.Commands
{
    public class TestEmail
    {
        public static void Initialize()
        {
            Server.CommandSystem.Register("TestEmail", AccessLevel.Owner, new CommandEventHandler(TestEmail_OnCommand));
        }

        [Usage("TestEmail")]
        [Description("Test all the email systems.")]
        public static void TestEmail_OnCommand(CommandEventArgs e)
        {
            string noreply_password = Environment.GetEnvironmentVariable("AI.NOREPLY.PASSWORD");                // = (your email password. For this I use an AppPassword generated by Google)
            string noreply_address = Environment.GetEnvironmentVariable("AI.NOREPLY.ADDRESS");                  // = example: noreply @game-master.net
            string email_host = Environment.GetEnvironmentVariable("AI.EMAIL.HOST");                            //  = example: smtp.gmail.com
            string email_user = Environment.GetEnvironmentVariable("AI.EMAIL.USER");                            //  = example: luke.tomasello@gmail.com
            string email_port = Environment.GetEnvironmentVariable("AI.EMAIL.HOST.PORT");                       //  = 587
            string email_accounting = Environment.GetEnvironmentVariable("AI.EMAIL.ACCOUNTING");                // = example: aiaccounting @game - master.net    // new account created etc.
            string email_announcements = Environment.GetEnvironmentVariable("AI.EMAIL.ANNOUNCEMENTS");          // = announcements@game-master.net				// announce shard wide events
            string email_devnotify = Environment.GetEnvironmentVariable("AI.EMAIL.DEVNOTIFY");                  // = devnotify@game-master.net					// sent on server crash
            string email_distlist_password = Environment.GetEnvironmentVariable("AI.EMAIL.DISTLIST.PASSWORD");  //  = (your email password.For this I use an AppPassword generated by Google) ;
            string email_shardowner = Environment.GetEnvironmentVariable("AI.EMAIL.SHARDOWNER");                // = shard owners email address, certain private information

            if (noreply_password == null || noreply_address == null || email_host == null || email_user == null || email_port == null ||
                email_accounting == null || email_announcements == null || email_devnotify == null || email_distlist_password == null || email_shardowner == null)
            {
                if (e != null && e.Mobile != null)
                    e.Mobile.SendMessage("One or more of the required environment variables are not set.");
                return;
            }

            if (e != null && e.Mobile != null)
            {
                e.Mobile.SendMessage("All of the required environment variables are set.");
                e.Mobile.SendMessage("Sending email...");
            }

            try
            {
                Emailer mail = new Emailer();
                mail.SendEmail(Environment.GetEnvironmentVariable("AI.EMAIL.ACCOUNTING"), "AI.EMAIL.ACCOUNTING", "passed", false);
                mail.SendEmail(Environment.GetEnvironmentVariable("AI.EMAIL.ANNOUNCEMENTS"), "AI.EMAIL.ANNOUNCEMENTS", "passed", false);
                mail.SendEmail(Environment.GetEnvironmentVariable("AI.EMAIL.DEVNOTIFY"), "AI.EMAIL.DEVNOTIFY", "passed", false);
                mail.SendEmail(Environment.GetEnvironmentVariable("AI.EMAIL.SHARDOWNER"), "AI.EMAIL.SHARDOWNER", "passed", false);
                mail.SendEmail(email_devnotify, "direct send to an email address", "pass", false);  // direct send to an email address, we use us for this test
            }
            catch (Exception ex)
            {
                if (e != null && e.Mobile != null)
                    e.Mobile.SendMessage("TestEmail: {0}", ex);
                LogHelper.LogException(ex);
            }
        }
    }
}